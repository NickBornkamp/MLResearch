E,/* * Welcome function will print the greeting message to the screen. */,
E,/** * This Show Menu function will print list of options that user can choose from. */,
E,/** * This addMember function will allow the user to enter a new member. */,
E,/**     * @return the suite of tests being tested     */,
E,"/**    * You can also modify the body of this method to customize your error messages.    * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not    * of end-users concern, so you can return something like :     *    *     ""Internal Error : Please file a bug report .... ""    *    * from this method for such cases in the release version of your parser.    */",
E,/**    * Use this method to add FormatCommands to the command queue to be    * executed when the next token in the tree is visited.    */,
E,/**   * Generate a name for a parameter from the type of the parameter.   *   * @param className  the parameters type   * @return a more or less fitting name.   */,
E,/**   * Gets a container containing the signatures of the delegation   * methods.   *   * @return the value of signatures   */,
E,/**   * Gets the value of signatures   *   * @return the value of signatures   */,
E,/**     * Method that adds a new element to the stack.     *     * @param value - the value to be added     * @return - true if the value was inserted successfully and false otherwise     */,
E,/**     * Method that returns end removes the top element from the stack. Program will close if the stack is empty.     *     * @return - the top element from the stack     */,
E,/**     * @return - the top element from the stack without removing it.     */,
E,/**     * Method that checks if the stack is empty.     *     * @return - true if the stack is empty and false otherwise.     */,
E,/**     * Method that check if the stack is full.     *     * @return - true if the stack is full and false otherwise     */,
E,/**    @Deprecated    reason - we will not be using this anymore     */,
E,/*         * LIST - ordered collection of elements.         * Elements can be accessed by their index.         */,
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/** Puts an X or O mark at position i,j. */",
E,"/** Puts an X or O mark at position i,j. */",
E,/** Checks whether the board configuration is a win for the given player. */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/**     * This is the main swing application method.   It sets up and displays the     * initial GUI, and controls execution thereafter.  Everything else in     * this class is 'private', please read the code.     */",
E,/*     * usage A private static method to display usage information to     * the user before an error exit.     */,
E,"/*     * go This method reads the file, creates the table to display,     * the window to display it in, and displays the window.     * @param fileName the name of the file to read.     * @param tryLines An estimate of the number of lines in     * the file.     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date with the era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of era changed.     *     * @param yearOfEra  the year of era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of century field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of century changed.     *     * @param yearOfCentury  the year of century to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the month of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of year changed.     *     * @param dayOfYear  the day of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of month field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of week field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of week changed.     *     * @param dayOfWeek  the day of week to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Returns a copy of this date with a different chronology, potentially     * changing the day in unexpected ways.     * <p>     * This method creates a new DateMidnight using the midnight millisecond value     * and the new chronology. If the same or similar chronology is specified, but     * with a different time zone, the day may change. This occurs because the new     * DateMidnight rounds down the millisecond value to get to midnight, and the     * time zone change may result in a rounding down to a different day.     * <p>     * For example, changing time zone from London (+00:00) to Paris (+01:00) will     * retain the same day, but changing from Paris to London will change the day.     * (When its midnight in London its the same day in Paris, but when its midnight     * in Paris its still the previous day in London)     * <p>     * To avoid these unusual effects, use {@link #withZoneRetainFields(DateTimeZone)}     * to change time zones.     *     * @param newChronology",the new chronology     * @return a copy of this instant with a different chronology     */
E,"/**     * Returns a copy of this date with a different time zone, preserving the day     * The returned object will have a local time of midnight in the new zone on     * the same day as the original instant.     *     * @param newZone  the new time zone, null means default     * @return a copy of this instant with a different time zone     */",
E,"/**     * Returns a copy of this date with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>LocalDate</code> then the date fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this datetime with the era field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the year field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the hour of day field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * hour of day changed.     *     * @param hour  the hour of day to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the minute of hour updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * minute of hour changed.     *     * @param minute  the minute of hour to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the second of minute field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * second of minute changed.     *     * @param second  the second of minute to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Gets the field being used.         *          * @return the field         */,
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this         * DateTime.  If halfway, the ceiling is favored over the floor only if         * it makes this field's value even.         *         * @return a copy of the DateTime with the field value changed         */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,/**         * Gets the current time.         * @return the current time in millis         */,
E,"/**     * Gets the default time zone.     * <p>     * The default time zone is derived from the system property {@code user.timezone}.     * If that is {@code null} or is not a valid identifier, then the value of the     * JDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.     * <p>     * NOTE: If the {@code java.util.TimeZone} default is updated <i>after</i> calling this     * method, then the change will not be picked up here.     *      * @return the default datetime zone object     */",
E,/**     * Gets all the available IDs supported.     *      * @return an unmodifiable Set of String IDs     */,
E,/**     * Gets the zone provider factory.     * <p>     * The zone provider is a pluggable instance factory that supplies the     * actual instances of DateTimeZone.     *      * @return the provider     */,
E,"/**     * Sets the zone provider factory without performing the security check.     *      * @param provider  provider to use, or null for default     * @throws IllegalArgumentException if the provider is invalid     */",
E,/**     * Gets the name provider factory.     * <p>     * The name provider is a pluggable instance factory that supplies the     * names of each DateTimeZone.     *      * @return the provider     */,
E,/**     * Gets the default name provider.     * <p>     * Tries the system property <code>org.joda.time.DateTimeZone.NameProvider</code>.     * Then uses <code>DefaultNameProvider</code>.     *      * @return the default name provider     */,
E,"/**     * Converts an old style id to a new style id.     *      * @param id  the old style id     * @return the new style id, null if not found     */",
E,"/**     * Gets the duration field type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Gets the period type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Converts this period in minutes to a period in weeks assuming a     * 7 days week, 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all weeks are     * 7 days long, all days are 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole weeks for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in days assuming a     * 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all days are     * 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole days for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in hours assuming a     * 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all hours are     * 60 minutes long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of hours for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in seconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of seconds for this number of minutes     * @throws ArithmeticException if the number of seconds is too large to be represented     */",
E,"/**     * Converts this period in minutes to a duration in milliseconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert from a period to a duration.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long. This might not be true for an unusual chronology,     * for example one that takes leap seconds into account.     * However, the method is included as it is a useful operation for many     * applications and business rules.     *     * @return a duration equivalent to this number of minutes     */",
E,/**     * Gets the number of minutes that this period represents.     *     * @return the number of minutes in the period     */,
E,"/**     * Returns a new instance with the specified number of minutes added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to add, may be negative, null means zero     * @return the new period plus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of minutes taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to take away, may be negative, null means zero     * @return the new period minus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Is this minutes instance greater than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is greater than the specified one     */",
E,"/**     * Is this minutes instance less than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is less than the specified one     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Handle broken serialization from other tools.     * @return the resolved object, not null     */",
E,"/**     * Gets the number of fields in this partial, which is two.     * The supported fields are MonthOfYear and DayOfMonth.     * Note that only these fields may be queried.     *     * @return the field count, two     */",
E,/**         * Gets the field that this property uses.         *          * @return the field         */,
E,"/**     * Gets the field type at the specified index.     *     * @param index  the index to retrieve     * @return the field at the specified index, never null     * @throws IndexOutOfBoundsException if the index is invalid     */",
E,"/**     * Gets an array of the field type of each of the fields that this partial supports.     * <p>     * The fields are returned largest to smallest, Month, Day.     *     * @return the array of field types (cloned), largest to smallest, never null     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,/**     * Get the month of year field value.     *     * @return the month of year     */,
E,/**     * Get the day of month field value.     *     * @return the day of month     */,
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Gets the property object for the specified type, which contains     * many useful methods.     *     * @param type  the field type to get the property for     * @return the property object     * @throws IllegalArgumentException if the field is null or unsupported     */",
E,/**     * Get the month of year field property which provides access to advanced functionality.     *      * @return the month of year property     */,
E,/**     * Get the day of month field property which provides access to advanced functionality.     *      * @return the day of month property     */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the value of this field.         *          * @return the field value         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative, null means zero     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative, null means zero     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,/** * Returns * the title over the image * @return */,
N,/**     * @return the suite of tests being tested     */,
E,/* play a card */,
E,/* play a card */,
,/**     * Returns true if this object has buffered data for reading.     *     * @param context the context to be used     * @return true if there is data still available for reading.     */,
,"/**     * Converts an array of characters representing hexadecimal values into an array of bytes of those same values. The     * returned array will be half the length of the passed array, as it takes two characters to represent any given     * byte. An exception is thrown if the passed char array has an odd number of elements.     *     * @param data     *            An array of characters containing hexadecimal digits     * @return A byte array containing binary data decoded from the supplied char array.     * @throws DecoderException     *             Thrown if an odd number or illegal of characters is supplied     */",
,"/*     * Returns whether the array contains the key, or not.     */",
,"/**         * Creates a new branch, identical to this branch.         *         * @return a new, identical branch         */",
,"/**     * Handles 'A', 'E', 'I', 'O', 'U', and 'Y' cases.     */",
,/**     * Handles 'C' cases.     */,
,/**     * Handles 'CC' cases.     */,
,/**     * Handles 'CH' cases.     */,
,/**     * Handles 'D' cases.     */,
,/**     * Handles 'G' cases.     */,
,/**     * Handles 'H' cases.     */,
,/**     * Handles 'J' cases.     */,
E,/** True if the entry is expired. */,
E,/** True if a refresh is needed from the original data source. */,
E,"/**     * Forces this dispatcher to quit immediately. If any requests are still in the queue, they are     * not guaranteed to be processed.     */",
E,"/**         * For cacheable requests, if a request for the same cache key is already in flight, add it         * to a queue to wait for that in-flight request to finish.         *         * @return whether the request was queued. If false, we should continue issuing the request         *     over the network. If true, we should put the request on hold to be processed when the         *     in-flight request finishes.         */",
E,"/** Returns true if this policy has attempts remaining, false otherwise. */",
E,/**     * Creates a new network response for an OK response with no headers.     *     * @param data Response body     */,
E,"/**     * Creates a new request with the given method (one of the values from {@link Method}), URL, and     * error listener. Note that the normal response listener is not provided here as delivery of     * responses is provided by subclasses, who have a better idea of how to deliver an     * already-parsed response.     */",
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/** Return the method for this request. Can be one of the values in {@link Method}. */,
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/** Adds an event to this request's event log; for debugging. */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Sets the sequence number of this request. Used by {@link RequestQueue}.     *     * @return This Request object to allow for chaining.     */,
E,/** Reads the contents of an InputStream into a byte[]. */,
E,/**     * Combine cache headers with network response headers for an HTTP 304 response.     *     * <p>An HTTP 304 response does not have all header fields. We have to use the header fields     * from the cache entry plus the new ones from the response. See also:     * http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5     *     * @param responseHeaders Headers from the network response.     * @param entry The cached response.     * @return The combined list of headers.     */,
E,"/**     * Returns a buffer from the pool if one is available in the requested size, or allocates a new     * one if a pooled one is not available.     *     * @param len the minimum size, in bytes, of the requested buffer. The returned buffer may be     *     larger.     * @return a byte[] buffer is always returned.     */",
E,/** Returns a file object for the given cache key. */,
E,/**     * Puts the entry with the specified key into the cache.     *     * @param key The key to identify the entry by.     * @param entry The entry to cache.     */,
E,/** Removes the entry identified by 'key' from the cache. */,
E,/** Creates a cache entry for the specified data. */,
E,/** Returns the HTTP status code of the response. */,
E,/**     * Clear page history for the app.     */,
E,/**     * Determine if log level will be logged     *     * @param logLevel     * @return true if the parameter passed in is greater than or equal to the current log level     */,
E,/**     * Changes the bridge mode.     */,
E,"/**     * Combines and returns queued messages combined into a single string.     * Combines as many messages as possible, while staying under MAX_PAYLOAD_SIZE.     * Returns null if the queue is empty.     */",
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a plugin class that implements a service to the service entry table.     * This does not create the plugin object instance.     *     * @param entry             The plugin entry     */,
E,/**     * Called when the activity is becoming visible to the user.     */,
E,/**     * Called when the activity is no longer visible to the user.     */,
E,/**     * The final call you receive before your activity is destroyed.     */,
E,/**     * Called when the activity receives a new intent.     */,
E,"/**     * Called when the webview is going to request an external resource.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the resource to load,     *                  false to block the resource.     */",
E,"/**     * Called when the webview is going to change the URL of the loaded content.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the navigation,     *                  false to block the navigation.     */",
E,/**     * Called when the webview is requesting the exec() bridge be enabled.     */,
E,"/**     * Called when the webview is going not going to navigate, but may launch     * an Intent for an URL.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the URL to launch an intent,     *                  false to block the intent.     */",
E,"/**     * Called when the URL of the webview changes.     *     * @param url               The URL that is being changed to.     * @return                  Return false to allow the URL to load, return true to prevent the URL from loading.     */",
E,/**     * Create a plugin based on class name.     */,
E,/**     * Called by the system when the device configuration changes while your activity is running.     *     * @param newConfigThe new device configuration     */,
E,/**     * Determine if URL is in approved list of URLs to load.     *     * @param uri     * @return true if wide open or whitelisted     */,
E,/**     * Ask the host application for a custom progress view to show while     * a <video> is loading.     * @return View The progress view.     */,
E,/** Used when created via reflection. */,
E,/** * Create the frame. */,
E,/** * Launch the application. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
N,/**     * This function is run when the robot is first started up and should be     * used for any initialization code.     */,
E,/** * get a new vertex * @return named vertex */,
E,/** * reset to a neutral state */,
E,/** * string representation */,
E,"/** * compare edge to edge * from Comparable, to allow sorting edges by weight */",
E,/** * add edge to forest *  * @param e edge to be added */,
E,/** * remove a tree from the forest *  * @param t tree */,
E,/** Add a new element at the end of this list */,
E,/** Return true if this list contains no elements */,
E,/** Return the number of elements in this list */,
E,/** Remove the first occurrence of the element o from this list.   *  Shift any subsequent elements to the left.   *  Return true if the element is removed. */,
E,/** Create a default list */,
E,/** Create a list from an array of objects */,
E,/** Return the head element in the list */,
E,/** Return the last element in the list */,
E,/** Add an element to the beginning of the list */,
E,/** Add an element to the end of the list */,
E,/** Add a new element at the specified index in this list     * The index of the head element is 0 */,
E,/** Remove the head node and     *  return the object that is contained in the removed node. */,
E,/** Remove the last node and     * return the object that is contained in the removed node. */,
E,/** Remove the element at the specified position in this list.     *  Return the element that was removed from the list. */,
E,/** Clear the list */,
E,"/** Returns true if this linked list contains the element e, otherwise returns false     * @return .*/",
E,"/** Returns the element at specified index of this list, returns null if index is invalid. */",
E,"/** Returns the index of the first matching element in this linked list, return !-1 if no match. */",
E,"/** Returns the index of the last matching element in this list, returns !-1 if no match. */",
E,"/** Replaces the element at specified index in this linked list with the specified element.  Returns the old element at specified index, otherwise returns null if index is invalid. */",
E,/** Main method - DO NOT CHANGE THIS CODE!!!! */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the DisRule wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOver wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameWon wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Life wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Message wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Quit wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Rules wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Story wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Timer wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOverScreen wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**   * Observes the value of any new tiles that was formed   *   * @return   */,
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,/**   * Draws Tiles in a square arrangement   */,
E,/**   * Draws Tiles in a square arrangement   */,
E,/** * Create the frame. */,
E,/** * method that returns the URL passed into this download frame * @return */,
E,/** * returns instance of this download frame * @return */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return musicpath */,
E,/** * this method should read the log file and return imagePath */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/**     * Create a byte array with a specific size filled with specified data.     *     * @param size the size of the byte array.     * @param data the data to put in the byte array.     * @return the JSON byte array.     */,
E,"/**     * Create a User.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which has a required relationship to the User entity.     */",
E,"/**     * Create an entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**     * Create an updated entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**    * Users can call this method to add new points to the plot for this graph.    * Once a point is added, it cannot be removed from the graph. The graph    * class uses lazy evaluation for all plotting functions so nothing will show    * up until a showGraph() method is called.    *     * @param newPoints    *           the array of new points to add to the graph    */",
E,/**    * this methods shows the graph with all of the current points and lines that    * the user added.    */,
E,/**    * this method reads all the data files for the bird names listed in the enum    * Birds and generates a corresponding processed file named:    * [birdName]_out.txt    */,
E,"/** If size = length of d, double the length of array d. <br> * The worst-case time is proportional to the length of d. */",
E,/** Return the size of this heap. <br> * This operation takes constant time. */,
E,"/** Return the shortest path from node v to node end <br>     * ---or the empty list if a path does not exist. <br>     * Note: The empty list is NOT ""null""; it is a list with 0 elements. */",
E,/** Return the direction. */,
E,/** Return a new point that is this point with p added to it. */,
E,/** Return a randomly determined gold value for a given tile. */,
E,"/** Given tiles t without edges and a supplier to return edge weights, <br> * add edges to the nodes between adjacent non-wall tiles. <br> * Precondition: all elements of {@code tiles} are non-null. */",
E,/** Generate a new random graph that fits within the grid and return the set of nodes. */,
E,/** Return the number of open floor tiles in this cavern <br> * (this is the size of the graph). */,
E,/** Return the number of rows in the grid. */,
E,/** Return the number of columns in the grid. */,
E,/** Return the set of all nodes in the graph. <br> * This is an umodifiable view of the graph. */,
E,/** Return the node corresponding to the entrance to the cavern. */,
E,"/** Return the Tile information for tile (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,"/** Return the node at the given (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,/** Return the Node on this edge that is not equal to n. <br> * Throw an IllegalArgumentException if n is not in this Edge. */,
E,/** Return the length of this Edge */,
E,/** Return the source of this edge. */,
E,/** Return destination of edge */,
E,"/** Run through the game, one step at a time. <br>     * Will run scram() only if hunt() succeeds. <br>     * Does not use a timeout and will wait as long as necessary. */",
E,"/** Return the Manhattan distance from (row, col) to the target */",
E,"/** Given seed, whether or not to use the GUI, and an instance <br>     * of a solution to use, run the game. */",
E,/** Return the number of elements in the priority queue.<br> * This operation takes constant time. */,
E,/* * Welcome function will print the greeting message to the screen. */,
E,/** * This Show Menu function will print list of options that user can choose from. */,
E,/** * This addMember function will allow the user to enter a new member. */,
E,/**     * @return the suite of tests being tested     */,
E,"/**    * You can also modify the body of this method to customize your error messages.    * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not    * of end-users concern, so you can return something like :     *    *     ""Internal Error : Please file a bug report .... ""    *    * from this method for such cases in the release version of your parser.    */",
E,/**    * Use this method to add FormatCommands to the command queue to be    * executed when the next token in the tree is visited.    */,
E,/**   * Generate a name for a parameter from the type of the parameter.   *   * @param className  the parameters type   * @return a more or less fitting name.   */,
E,/**   * Gets a container containing the signatures of the delegation   * methods.   *   * @return the value of signatures   */,
E,/**   * Gets the value of signatures   *   * @return the value of signatures   */,
E,/**     * Method that adds a new element to the stack.     *     * @param value - the value to be added     * @return - true if the value was inserted successfully and false otherwise     */,
E,/**     * Method that returns end removes the top element from the stack. Program will close if the stack is empty.     *     * @return - the top element from the stack     */,
E,/**     * @return - the top element from the stack without removing it.     */,
E,/**     * Method that checks if the stack is empty.     *     * @return - true if the stack is empty and false otherwise.     */,
E,/**     * Method that check if the stack is full.     *     * @return - true if the stack is full and false otherwise     */,
E,/**    @Deprecated    reason - we will not be using this anymore     */,
E,/*         * LIST - ordered collection of elements.         * Elements can be accessed by their index.         */,
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/** Puts an X or O mark at position i,j. */",
E,"/** Puts an X or O mark at position i,j. */",
E,/** Checks whether the board configuration is a win for the given player. */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/**     * This is the main swing application method.   It sets up and displays the     * initial GUI, and controls execution thereafter.  Everything else in     * this class is 'private', please read the code.     */",
E,/*     * usage A private static method to display usage information to     * the user before an error exit.     */,
E,"/*     * go This method reads the file, creates the table to display,     * the window to display it in, and displays the window.     * @param fileName the name of the file to read.     * @param tryLines An estimate of the number of lines in     * the file.     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date with the era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of era changed.     *     * @param yearOfEra  the year of era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of century field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of century changed.     *     * @param yearOfCentury  the year of century to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the month of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of year changed.     *     * @param dayOfYear  the day of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of month field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of week field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of week changed.     *     * @param dayOfWeek  the day of week to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Returns a copy of this date with a different chronology, potentially     * changing the day in unexpected ways.     * <p>     * This method creates a new DateMidnight using the midnight millisecond value     * and the new chronology. If the same or similar chronology is specified, but     * with a different time zone, the day may change. This occurs because the new     * DateMidnight rounds down the millisecond value to get to midnight, and the     * time zone change may result in a rounding down to a different day.     * <p>     * For example, changing time zone from London (+00:00) to Paris (+01:00) will     * retain the same day, but changing from Paris to London will change the day.     * (When its midnight in London its the same day in Paris, but when its midnight     * in Paris its still the previous day in London)     * <p>     * To avoid these unusual effects, use {@link #withZoneRetainFields(DateTimeZone)}     * to change time zones.     *     * @param newChronology",the new chronology     * @return a copy of this instant with a different chronology     */
E,"/**     * Returns a copy of this date with a different time zone, preserving the day     * The returned object will have a local time of midnight in the new zone on     * the same day as the original instant.     *     * @param newZone  the new time zone, null means default     * @return a copy of this instant with a different time zone     */",
E,"/**     * Returns a copy of this date with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>LocalDate</code> then the date fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this datetime with the era field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the year field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the hour of day field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * hour of day changed.     *     * @param hour  the hour of day to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the minute of hour updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * minute of hour changed.     *     * @param minute  the minute of hour to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the second of minute field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * second of minute changed.     *     * @param second  the second of minute to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Gets the field being used.         *          * @return the field         */,
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this         * DateTime.  If halfway, the ceiling is favored over the floor only if         * it makes this field's value even.         *         * @return a copy of the DateTime with the field value changed         */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,/**         * Gets the current time.         * @return the current time in millis         */,
E,"/**     * Gets the default time zone.     * <p>     * The default time zone is derived from the system property {@code user.timezone}.     * If that is {@code null} or is not a valid identifier, then the value of the     * JDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.     * <p>     * NOTE: If the {@code java.util.TimeZone} default is updated <i>after</i> calling this     * method, then the change will not be picked up here.     *      * @return the default datetime zone object     */",
E,/**     * Gets all the available IDs supported.     *      * @return an unmodifiable Set of String IDs     */,
E,/**     * Gets the zone provider factory.     * <p>     * The zone provider is a pluggable instance factory that supplies the     * actual instances of DateTimeZone.     *      * @return the provider     */,
E,"/**     * Sets the zone provider factory without performing the security check.     *      * @param provider  provider to use, or null for default     * @throws IllegalArgumentException if the provider is invalid     */",
E,/**     * Gets the name provider factory.     * <p>     * The name provider is a pluggable instance factory that supplies the     * names of each DateTimeZone.     *      * @return the provider     */,
E,/**     * Gets the default name provider.     * <p>     * Tries the system property <code>org.joda.time.DateTimeZone.NameProvider</code>.     * Then uses <code>DefaultNameProvider</code>.     *      * @return the default name provider     */,
E,"/**     * Converts an old style id to a new style id.     *      * @param id  the old style id     * @return the new style id, null if not found     */",
E,"/**     * Gets the duration field type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Gets the period type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Converts this period in minutes to a period in weeks assuming a     * 7 days week, 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all weeks are     * 7 days long, all days are 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole weeks for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in days assuming a     * 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all days are     * 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole days for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in hours assuming a     * 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all hours are     * 60 minutes long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of hours for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in seconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of seconds for this number of minutes     * @throws ArithmeticException if the number of seconds is too large to be represented     */",
E,"/**     * Converts this period in minutes to a duration in milliseconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert from a period to a duration.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long. This might not be true for an unusual chronology,     * for example one that takes leap seconds into account.     * However, the method is included as it is a useful operation for many     * applications and business rules.     *     * @return a duration equivalent to this number of minutes     */",
E,/**     * Gets the number of minutes that this period represents.     *     * @return the number of minutes in the period     */,
E,"/**     * Returns a new instance with the specified number of minutes added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to add, may be negative, null means zero     * @return the new period plus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of minutes taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to take away, may be negative, null means zero     * @return the new period minus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Is this minutes instance greater than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is greater than the specified one     */",
E,"/**     * Is this minutes instance less than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is less than the specified one     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Handle broken serialization from other tools.     * @return the resolved object, not null     */",
E,"/**     * Gets the number of fields in this partial, which is two.     * The supported fields are MonthOfYear and DayOfMonth.     * Note that only these fields may be queried.     *     * @return the field count, two     */",
E,/**         * Gets the field that this property uses.         *          * @return the field         */,
E,"/**     * Gets the field type at the specified index.     *     * @param index  the index to retrieve     * @return the field at the specified index, never null     * @throws IndexOutOfBoundsException if the index is invalid     */",
E,"/**     * Gets an array of the field type of each of the fields that this partial supports.     * <p>     * The fields are returned largest to smallest, Month, Day.     *     * @return the array of field types (cloned), largest to smallest, never null     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,/**     * Get the month of year field value.     *     * @return the month of year     */,
E,/**     * Get the day of month field value.     *     * @return the day of month     */,
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Gets the property object for the specified type, which contains     * many useful methods.     *     * @param type  the field type to get the property for     * @return the property object     * @throws IllegalArgumentException if the field is null or unsupported     */",
E,/**     * Get the month of year field property which provides access to advanced functionality.     *      * @return the month of year property     */,
E,/**     * Get the day of month field property which provides access to advanced functionality.     *      * @return the day of month property     */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the value of this field.         *          * @return the field value         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative, null means zero     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative, null means zero     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,/** * Returns * the title over the image * @return */,
N,/**     * @return the suite of tests being tested     */,
E,/* play a card */,
E,/* play a card */,
,/**     * Returns true if this object has buffered data for reading.     *     * @param context the context to be used     * @return true if there is data still available for reading.     */,
,"/**     * Converts an array of characters representing hexadecimal values into an array of bytes of those same values. The     * returned array will be half the length of the passed array, as it takes two characters to represent any given     * byte. An exception is thrown if the passed char array has an odd number of elements.     *     * @param data     *            An array of characters containing hexadecimal digits     * @return A byte array containing binary data decoded from the supplied char array.     * @throws DecoderException     *             Thrown if an odd number or illegal of characters is supplied     */",
,"/*     * Returns whether the array contains the key, or not.     */",
,"/**         * Creates a new branch, identical to this branch.         *         * @return a new, identical branch         */",
,"/**     * Handles 'A', 'E', 'I', 'O', 'U', and 'Y' cases.     */",
,/**     * Handles 'C' cases.     */,
,/**     * Handles 'CC' cases.     */,
,/**     * Handles 'CH' cases.     */,
,/**     * Handles 'D' cases.     */,
,/**     * Handles 'G' cases.     */,
,/**     * Handles 'H' cases.     */,
,/**     * Handles 'J' cases.     */,
E,/** True if the entry is expired. */,
E,/** True if a refresh is needed from the original data source. */,
E,"/**     * Forces this dispatcher to quit immediately. If any requests are still in the queue, they are     * not guaranteed to be processed.     */",
E,"/**         * For cacheable requests, if a request for the same cache key is already in flight, add it         * to a queue to wait for that in-flight request to finish.         *         * @return whether the request was queued. If false, we should continue issuing the request         *     over the network. If true, we should put the request on hold to be processed when the         *     in-flight request finishes.         */",
E,"/** Returns true if this policy has attempts remaining, false otherwise. */",
E,/**     * Creates a new network response for an OK response with no headers.     *     * @param data Response body     */,
E,"/**     * Creates a new request with the given method (one of the values from {@link Method}), URL, and     * error listener. Note that the normal response listener is not provided here as delivery of     * responses is provided by subclasses, who have a better idea of how to deliver an     * already-parsed response.     */",
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/** Return the method for this request. Can be one of the values in {@link Method}. */,
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/** Adds an event to this request's event log; for debugging. */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Sets the sequence number of this request. Used by {@link RequestQueue}.     *     * @return This Request object to allow for chaining.     */,
E,/** Reads the contents of an InputStream into a byte[]. */,
E,/**     * Combine cache headers with network response headers for an HTTP 304 response.     *     * <p>An HTTP 304 response does not have all header fields. We have to use the header fields     * from the cache entry plus the new ones from the response. See also:     * http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5     *     * @param responseHeaders Headers from the network response.     * @param entry The cached response.     * @return The combined list of headers.     */,
E,"/**     * Returns a buffer from the pool if one is available in the requested size, or allocates a new     * one if a pooled one is not available.     *     * @param len the minimum size, in bytes, of the requested buffer. The returned buffer may be     *     larger.     * @return a byte[] buffer is always returned.     */",
E,/** Returns a file object for the given cache key. */,
E,/**     * Puts the entry with the specified key into the cache.     *     * @param key The key to identify the entry by.     * @param entry The entry to cache.     */,
E,/** Removes the entry identified by 'key' from the cache. */,
E,/** Creates a cache entry for the specified data. */,
E,/** Returns the HTTP status code of the response. */,
E,/**     * Clear page history for the app.     */,
E,/**     * Determine if log level will be logged     *     * @param logLevel     * @return true if the parameter passed in is greater than or equal to the current log level     */,
E,/**     * Changes the bridge mode.     */,
E,"/**     * Combines and returns queued messages combined into a single string.     * Combines as many messages as possible, while staying under MAX_PAYLOAD_SIZE.     * Returns null if the queue is empty.     */",
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a plugin class that implements a service to the service entry table.     * This does not create the plugin object instance.     *     * @param entry             The plugin entry     */,
E,/**     * Called when the activity is becoming visible to the user.     */,
E,/**     * Called when the activity is no longer visible to the user.     */,
E,/**     * The final call you receive before your activity is destroyed.     */,
E,/**     * Called when the activity receives a new intent.     */,
E,"/**     * Called when the webview is going to request an external resource.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the resource to load,     *                  false to block the resource.     */",
E,"/**     * Called when the webview is going to change the URL of the loaded content.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the navigation,     *                  false to block the navigation.     */",
E,/**     * Called when the webview is requesting the exec() bridge be enabled.     */,
E,"/**     * Called when the webview is going not going to navigate, but may launch     * an Intent for an URL.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the URL to launch an intent,     *                  false to block the intent.     */",
E,"/**     * Called when the URL of the webview changes.     *     * @param url               The URL that is being changed to.     * @return                  Return false to allow the URL to load, return true to prevent the URL from loading.     */",
E,/**     * Create a plugin based on class name.     */,
E,/**     * Called by the system when the device configuration changes while your activity is running.     *     * @param newConfigThe new device configuration     */,
E,/**     * Determine if URL is in approved list of URLs to load.     *     * @param uri     * @return true if wide open or whitelisted     */,
E,/**     * Ask the host application for a custom progress view to show while     * a <video> is loading.     * @return View The progress view.     */,
E,/** Used when created via reflection. */,
E,/** * Create the frame. */,
E,/** * Launch the application. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
N,/**     * This function is run when the robot is first started up and should be     * used for any initialization code.     */,
E,/** * get a new vertex * @return named vertex */,
E,/** * reset to a neutral state */,
E,/** * string representation */,
E,"/** * compare edge to edge * from Comparable, to allow sorting edges by weight */",
E,/** * add edge to forest *  * @param e edge to be added */,
E,/** * remove a tree from the forest *  * @param t tree */,
E,/** Add a new element at the end of this list */,
E,/** Return true if this list contains no elements */,
E,/** Return the number of elements in this list */,
E,/** Remove the first occurrence of the element o from this list.   *  Shift any subsequent elements to the left.   *  Return true if the element is removed. */,
E,/** Create a default list */,
E,/** Create a list from an array of objects */,
E,/** Return the head element in the list */,
E,/** Return the last element in the list */,
E,/** Add an element to the beginning of the list */,
E,/** Add an element to the end of the list */,
E,/** Add a new element at the specified index in this list     * The index of the head element is 0 */,
E,/** Remove the head node and     *  return the object that is contained in the removed node. */,
E,/** Remove the last node and     * return the object that is contained in the removed node. */,
E,/** Remove the element at the specified position in this list.     *  Return the element that was removed from the list. */,
E,/** Clear the list */,
E,"/** Returns true if this linked list contains the element e, otherwise returns false     * @return .*/",
E,"/** Returns the element at specified index of this list, returns null if index is invalid. */",
E,"/** Returns the index of the first matching element in this linked list, return !-1 if no match. */",
E,"/** Returns the index of the last matching element in this list, returns !-1 if no match. */",
E,"/** Replaces the element at specified index in this linked list with the specified element.  Returns the old element at specified index, otherwise returns null if index is invalid. */",
E,/** Main method - DO NOT CHANGE THIS CODE!!!! */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the DisRule wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOver wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameWon wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Life wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Message wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Quit wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Rules wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Story wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Timer wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOverScreen wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**   * Observes the value of any new tiles that was formed   *   * @return   */,
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,/**   * Draws Tiles in a square arrangement   */,
E,/**   * Draws Tiles in a square arrangement   */,
E,/** * Create the frame. */,
E,/** * method that returns the URL passed into this download frame * @return */,
E,/** * returns instance of this download frame * @return */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return musicpath */,
E,/** * this method should read the log file and return imagePath */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/**     * Create a byte array with a specific size filled with specified data.     *     * @param size the size of the byte array.     * @param data the data to put in the byte array.     * @return the JSON byte array.     */,
E,"/**     * Create a User.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which has a required relationship to the User entity.     */",
E,"/**     * Create an entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**     * Create an updated entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**    * Users can call this method to add new points to the plot for this graph.    * Once a point is added, it cannot be removed from the graph. The graph    * class uses lazy evaluation for all plotting functions so nothing will show    * up until a showGraph() method is called.    *     * @param newPoints    *           the array of new points to add to the graph    */",
E,/**    * this methods shows the graph with all of the current points and lines that    * the user added.    */,
E,/**    * this method reads all the data files for the bird names listed in the enum    * Birds and generates a corresponding processed file named:    * [birdName]_out.txt    */,
E,"/** If size = length of d, double the length of array d. <br> * The worst-case time is proportional to the length of d. */",
E,/** Return the size of this heap. <br> * This operation takes constant time. */,
E,"/** Return the shortest path from node v to node end <br>     * ---or the empty list if a path does not exist. <br>     * Note: The empty list is NOT ""null""; it is a list with 0 elements. */",
E,/** Return the direction. */,
E,/** Return a new point that is this point with p added to it. */,
E,/** Return a randomly determined gold value for a given tile. */,
E,"/** Given tiles t without edges and a supplier to return edge weights, <br> * add edges to the nodes between adjacent non-wall tiles. <br> * Precondition: all elements of {@code tiles} are non-null. */",
E,/** Generate a new random graph that fits within the grid and return the set of nodes. */,
E,/** Return the number of open floor tiles in this cavern <br> * (this is the size of the graph). */,
E,/** Return the number of rows in the grid. */,
E,/** Return the number of columns in the grid. */,
E,/** Return the set of all nodes in the graph. <br> * This is an umodifiable view of the graph. */,
E,/** Return the node corresponding to the entrance to the cavern. */,
E,"/** Return the Tile information for tile (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,"/** Return the node at the given (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,/** Return the Node on this edge that is not equal to n. <br> * Throw an IllegalArgumentException if n is not in this Edge. */,
E,/** Return the length of this Edge */,
E,/** Return the source of this edge. */,
E,/** Return destination of edge */,
E,"/** Run through the game, one step at a time. <br>     * Will run scram() only if hunt() succeeds. <br>     * Does not use a timeout and will wait as long as necessary. */",
E,"/** Return the Manhattan distance from (row, col) to the target */",
E,"/** Given seed, whether or not to use the GUI, and an instance <br>     * of a solution to use, run the game. */",
E,/** Return the number of elements in the priority queue.<br> * This operation takes constant time. */,
E,/* * Welcome function will print the greeting message to the screen. */,
E,/** * This Show Menu function will print list of options that user can choose from. */,
E,/** * This addMember function will allow the user to enter a new member. */,
E,/**     * @return the suite of tests being tested     */,
E,"/**    * You can also modify the body of this method to customize your error messages.    * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not    * of end-users concern, so you can return something like :     *    *     ""Internal Error : Please file a bug report .... ""    *    * from this method for such cases in the release version of your parser.    */",
E,/**    * Use this method to add FormatCommands to the command queue to be    * executed when the next token in the tree is visited.    */,
E,/**   * Generate a name for a parameter from the type of the parameter.   *   * @param className  the parameters type   * @return a more or less fitting name.   */,
E,/**   * Gets a container containing the signatures of the delegation   * methods.   *   * @return the value of signatures   */,
E,/**   * Gets the value of signatures   *   * @return the value of signatures   */,
E,/**     * Method that adds a new element to the stack.     *     * @param value - the value to be added     * @return - true if the value was inserted successfully and false otherwise     */,
E,/**     * Method that returns end removes the top element from the stack. Program will close if the stack is empty.     *     * @return - the top element from the stack     */,
E,/**     * @return - the top element from the stack without removing it.     */,
E,/**     * Method that checks if the stack is empty.     *     * @return - true if the stack is empty and false otherwise.     */,
E,/**     * Method that check if the stack is full.     *     * @return - true if the stack is full and false otherwise     */,
E,/**    @Deprecated    reason - we will not be using this anymore     */,
E,/*         * LIST - ordered collection of elements.         * Elements can be accessed by their index.         */,
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/** Puts an X or O mark at position i,j. */",
E,"/** Puts an X or O mark at position i,j. */",
E,/** Checks whether the board configuration is a win for the given player. */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/**     * This is the main swing application method.   It sets up and displays the     * initial GUI, and controls execution thereafter.  Everything else in     * this class is 'private', please read the code.     */",
E,/*     * usage A private static method to display usage information to     * the user before an error exit.     */,
E,"/*     * go This method reads the file, creates the table to display,     * the window to display it in, and displays the window.     * @param fileName the name of the file to read.     * @param tryLines An estimate of the number of lines in     * the file.     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date with the era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of era changed.     *     * @param yearOfEra  the year of era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of century field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of century changed.     *     * @param yearOfCentury  the year of century to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the month of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of year changed.     *     * @param dayOfYear  the day of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of month field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of week field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of week changed.     *     * @param dayOfWeek  the day of week to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Returns a copy of this date with a different chronology, potentially     * changing the day in unexpected ways.     * <p>     * This method creates a new DateMidnight using the midnight millisecond value     * and the new chronology. If the same or similar chronology is specified, but     * with a different time zone, the day may change. This occurs because the new     * DateMidnight rounds down the millisecond value to get to midnight, and the     * time zone change may result in a rounding down to a different day.     * <p>     * For example, changing time zone from London (+00:00) to Paris (+01:00) will     * retain the same day, but changing from Paris to London will change the day.     * (When its midnight in London its the same day in Paris, but when its midnight     * in Paris its still the previous day in London)     * <p>     * To avoid these unusual effects, use {@link #withZoneRetainFields(DateTimeZone)}     * to change time zones.     *     * @param newChronology",the new chronology     * @return a copy of this instant with a different chronology     */
E,"/**     * Returns a copy of this date with a different time zone, preserving the day     * The returned object will have a local time of midnight in the new zone on     * the same day as the original instant.     *     * @param newZone  the new time zone, null means default     * @return a copy of this instant with a different time zone     */",
E,"/**     * Returns a copy of this date with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>LocalDate</code> then the date fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this datetime with the era field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the year field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the hour of day field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * hour of day changed.     *     * @param hour  the hour of day to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the minute of hour updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * minute of hour changed.     *     * @param minute  the minute of hour to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the second of minute field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * second of minute changed.     *     * @param second  the second of minute to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Gets the field being used.         *          * @return the field         */,
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this         * DateTime.  If halfway, the ceiling is favored over the floor only if         * it makes this field's value even.         *         * @return a copy of the DateTime with the field value changed         */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,/**         * Gets the current time.         * @return the current time in millis         */,
E,"/**     * Gets the default time zone.     * <p>     * The default time zone is derived from the system property {@code user.timezone}.     * If that is {@code null} or is not a valid identifier, then the value of the     * JDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.     * <p>     * NOTE: If the {@code java.util.TimeZone} default is updated <i>after</i> calling this     * method, then the change will not be picked up here.     *      * @return the default datetime zone object     */",
E,/**     * Gets all the available IDs supported.     *      * @return an unmodifiable Set of String IDs     */,
E,/**     * Gets the zone provider factory.     * <p>     * The zone provider is a pluggable instance factory that supplies the     * actual instances of DateTimeZone.     *      * @return the provider     */,
E,"/**     * Sets the zone provider factory without performing the security check.     *      * @param provider  provider to use, or null for default     * @throws IllegalArgumentException if the provider is invalid     */",
E,/**     * Gets the name provider factory.     * <p>     * The name provider is a pluggable instance factory that supplies the     * names of each DateTimeZone.     *      * @return the provider     */,
E,/**     * Gets the default name provider.     * <p>     * Tries the system property <code>org.joda.time.DateTimeZone.NameProvider</code>.     * Then uses <code>DefaultNameProvider</code>.     *      * @return the default name provider     */,
E,"/**     * Converts an old style id to a new style id.     *      * @param id  the old style id     * @return the new style id, null if not found     */",
E,"/**     * Gets the duration field type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Gets the period type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Converts this period in minutes to a period in weeks assuming a     * 7 days week, 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all weeks are     * 7 days long, all days are 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole weeks for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in days assuming a     * 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all days are     * 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole days for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in hours assuming a     * 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all hours are     * 60 minutes long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of hours for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in seconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of seconds for this number of minutes     * @throws ArithmeticException if the number of seconds is too large to be represented     */",
E,"/**     * Converts this period in minutes to a duration in milliseconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert from a period to a duration.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long. This might not be true for an unusual chronology,     * for example one that takes leap seconds into account.     * However, the method is included as it is a useful operation for many     * applications and business rules.     *     * @return a duration equivalent to this number of minutes     */",
E,/**     * Gets the number of minutes that this period represents.     *     * @return the number of minutes in the period     */,
E,"/**     * Returns a new instance with the specified number of minutes added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to add, may be negative, null means zero     * @return the new period plus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of minutes taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to take away, may be negative, null means zero     * @return the new period minus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Is this minutes instance greater than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is greater than the specified one     */",
E,"/**     * Is this minutes instance less than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is less than the specified one     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Handle broken serialization from other tools.     * @return the resolved object, not null     */",
E,"/**     * Gets the number of fields in this partial, which is two.     * The supported fields are MonthOfYear and DayOfMonth.     * Note that only these fields may be queried.     *     * @return the field count, two     */",
E,/**         * Gets the field that this property uses.         *          * @return the field         */,
E,"/**     * Gets the field type at the specified index.     *     * @param index  the index to retrieve     * @return the field at the specified index, never null     * @throws IndexOutOfBoundsException if the index is invalid     */",
E,"/**     * Gets an array of the field type of each of the fields that this partial supports.     * <p>     * The fields are returned largest to smallest, Month, Day.     *     * @return the array of field types (cloned), largest to smallest, never null     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,/**     * Get the month of year field value.     *     * @return the month of year     */,
E,/**     * Get the day of month field value.     *     * @return the day of month     */,
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Gets the property object for the specified type, which contains     * many useful methods.     *     * @param type  the field type to get the property for     * @return the property object     * @throws IllegalArgumentException if the field is null or unsupported     */",
E,/**     * Get the month of year field property which provides access to advanced functionality.     *      * @return the month of year property     */,
E,/**     * Get the day of month field property which provides access to advanced functionality.     *      * @return the day of month property     */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the value of this field.         *          * @return the field value         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative, null means zero     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative, null means zero     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,/** * Returns * the title over the image * @return */,
N,/**     * @return the suite of tests being tested     */,
E,/* play a card */,
E,/* play a card */,
E,/* * Welcome function will print the greeting message to the screen. */,
E,/** * This Show Menu function will print list of options that user can choose from. */,
E,/** * This addMember function will allow the user to enter a new member. */,
E,/**     * @return the suite of tests being tested     */,
E,"/**    * You can also modify the body of this method to customize your error messages.    * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not    * of end-users concern, so you can return something like :     *    *     ""Internal Error : Please file a bug report .... ""    *    * from this method for such cases in the release version of your parser.    */",
E,/**    * Use this method to add FormatCommands to the command queue to be    * executed when the next token in the tree is visited.    */,
,/**     * Returns true if this object has buffered data for reading.     *     * @param context the context to be used     * @return true if there is data still available for reading.     */,
E,/**   * Generate a name for a parameter from the type of the parameter.   *   * @param className  the parameters type   * @return a more or less fitting name.   */,
h of the passed array, as it takes two characters to represent any given     * byte. An exception is thrown if the passed char array has an odd number of elements.     *     * @param data     *            An array of characters containing hexadecimal digits     * @return A byte array containing binary data decoded from the supplied char array.     * @throws DecoderException     *             Thrown if an odd number or illegal of characters is supplied     */",
E,/**   * Gets a container containing the signatures of the delegation   * methods.   *   * @return the value of signatures   */,
E,/**   * Gets the value of signatures   *   * @return the value of signatures   */,
E,/**     * Method that adds a new element to the stack.     *     * @param value - the value to be added     * @return - true if the value was inserted successfully and false otherwise     */,
E,/**     * Method that returns end removes the top element from the stack. Program will close if the stack is empty.     *     * @return - the top element from the stack     */,
E,/**     * @return - the top element from the stack without removing it.     */,
E,/**     * Method that checks if the stack is empty.     *     * @return - true if the stack is empty and false otherwise.     */,
E,/**     * Method that check if the stack is full.     *     * @return - true if the stack is full and false otherwise     */,
E,/**    @Deprecated    reason - we will not be using this anymore     */,
E,/*         * LIST - ordered collection of elements.         * Elements can be accessed by their index.         */,
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/** Puts an X or O mark at position i,j. */",
E,"/** Puts an X or O mark at position i,j. */",
E,/** Checks whether the board configuration is a win for the given player. */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/**     * This is the main swing application method.   It sets up and displays the     * initial GUI, and controls execution thereafter.  Everything else in     * this class is 'private', please read the code.     */",
E,/*     * usage A private static method to display usage information to     * the user before an error exit.     */,
E,"/*     * go This method reads the file, creates the table to display,     * the window to display it in, and displays the window.     * @param fileName the name of the file to read.     * @param tryLines An estimate of the number of lines in     * the file.     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
,"/*     * Returns whether the array contains the key, or not.     */",
,"/**         * Creates a new branch, identical to this branch.         *         * @return a new, identical branch         */",
E,"/**     * Returns a copy of this date with the era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
,"/**     * Handles 'A', 'E', 'I', 'O', 'U', and 'Y' cases.     */",
,/**     * Handles 'C' cases.     */,
E,"/**     * Returns a copy of this date with the year of era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of era changed.     *     * @param yearOfEra  the year of era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
,/**     * Handles 'CC' cases.     */,
E,"/**     * Returns a copy of this date with the year of century field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of century changed.     *     * @param yearOfCentury  the year of century to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
,/**     * Handles 'CH' cases.     */,
E,"/**     * Returns a copy of this date with the year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
,/**     * Handles 'D' cases.     */,
,/**     * Handles 'G' cases.     */,
,/**     * Handles 'H' cases.     */,
E,"/**     * Returns a copy of this date with the month of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/** True if the entry is expired. */,
with the day of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of year changed.     *     * @param dayOfYear  the day of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/** True if a refresh is needed from the original data source. */,
E,"/**     * Returns a copy of this date with the day of month field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of week field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of week changed.     *     * @param dayOfWeek  the day of week to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**         * For cacheable requests, if a request for the same cache key is already in flight, add it         * to a queue to wait for that in-flight request to finish.         *         * @return whether the request was queued. If false, we should continue issuing the request         *     over the network. If true, we should put the request on hold to be processed when the         *     in-flight request finishes.         */",
E,"/** Returns true if this policy has attempts remaining, false otherwise. */",
E,/**     * Creates a new network response for an OK response with no headers.     *     * @param data Response body     */,
E,"/**     * Creates a new request with the given method (one of the values from {@link Method}), URL, and     * error listener. Note that the normal response listener is not provided here as delivery of     * responses is provided by subclasses, who have a better idea of how to deliver an     * already-parsed response.     */",
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/** Return the method for this request. Can be one of the values in {@link Method}. */,
ht.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,/** Adds an event to this request's event log; for debugging. */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Sets the sequence number of this request. Used by {@link RequestQueue}.     *     * @return This Request object to allow for chaining.     */,
E,/** Reads the contents of an InputStream into a byte[]. */,
E,/**     * Combine cache headers with network response headers for an HTTP 304 response.     *     * <p>An HTTP 304 response does not have all header fields. We have to use the header fields     * from the cache entry plus the new ones from the response. See also:     * http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5     *     * @param responseHeaders Headers from the network response.     * @param entry The cached response.     * @return The combined list of headers.     */,
 rounding down to a different day.     * <p>     * For example, changing time zone from London (+00:00) to Paris (+01:00) will     * retain the same day, but changing from Paris to London will change the day.     * (When its midnight in London its the same day in Paris, but when its midnight     * in Paris its still the previous day in London)     * <p>     * To avoid these unusual effects, use {@link #withZoneRetainFields(DateTimeZone)}     * to change time zones.     *     * @param newChronology",the new chronology     * @return a copy of this instant with a different chronology     */
E,"/**     * Returns a copy of this date with a different time zone, preserving the day     * The returned object will have a local time of midnight in the new zone on     * the same day as the original instant.     *     * @param newZone  the new time zone, null means default     * @return a copy of this instant with a different time zone     */",
E,"/**     * Returns a copy of this date with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>LocalDate</code> then the date fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,/** Returns a file object for the given cache key. */,
E,/**     * Puts the entry with the specified key into the cache.     *     * @param key The key to identify the entry by.     * @param entry The entry to cache.     */,
E,/** Removes the entry identified by 'key' from the cache. */,
E,/** Creates a cache entry for the specified data. */,
E,/** Returns the HTTP status code of the response. */,
ed period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,/**     * Clear page history for the app.     */,
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**     * Determine if log level will be logged     *     * @param logLevel     * @return true if the parameter passed in is greater than or equal to the current log level     */,
    */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Combines and returns queued messages combined into a single string.     * Combines as many messages as possible, while staying under MAX_PAYLOAD_SIZE.     * Returns null if the queue is empty.     */",
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a plugin class that implements a service to the service entry table.     * This does not create the plugin object instance.     *     * @param entry             The plugin entry     */,
E,/**     * Called when the activity is becoming visible to the user.     */,
E,/**     * Called when the activity is no longer visible to the user.     */,
E,/**     * The final call you receive before your activity is destroyed.     */,
E,/**     * Called when the activity receives a new intent.     */,
E,"/**     * Called when the webview is going to request an external resource.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the resource to load,     *                  false to block the resource.     */",
E,"/**     * Called when the webview is going to change the URL of the loaded content.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the navigation,     *                  false to block the navigation.     */",
E,/**     * Called when the webview is requesting the exec() bridge be enabled.     */,
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Called when the URL of the webview changes.     *     * @param url               The URL that is being changed to.     * @return                  Return false to allow the URL to load, return true to prevent the URL from loading.     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,/**     * Create a plugin based on class name.     */,
E,/**     * Called by the system when the device configuration changes while your activity is running.     *     * @param newConfigThe new device configuration     */,
E,/**     * Determine if URL is in approved list of URLs to load.     *     * @param uri     * @return true if wide open or whitelisted     */,
E,/**     * Ask the host application for a custom progress view to show while     * a <video> is loading.     * @return View The progress view.     */,
E,/** Used when created via reflection. */,
E,/** * Create the frame. */,
E,/** * Launch the application. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
N,/**     * This function is run when the robot is first started up and should be     * used for any initialization code.     */,
E,/** * get a new vertex * @return named vertex */,
E,/** * reset to a neutral state */,
E,/** * string representation */,
E,"/** * compare edge to edge * from Comparable, to allow sorting edges by weight */",
E,/** * add edge to forest *  * @param e edge to be added */,
E,/** * remove a tree from the forest *  * @param t tree */,
E,/** Add a new element at the end of this list */,
E,/** Return true if this list contains no elements */,
E,/** Return the number of elements in this list */,
E,/** Remove the first occurrence of the element o from this list.   *  Shift any subsequent elements to the left.   *  Return true if the element is removed. */,
E,/** Create a default list */,
E,/** Create a list from an array of objects */,
E,/** Return the head element in the list */,
E,/** Return the last element in the list */,
E,"/**     * Returns a copy of this datetime with the era field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/** Add an element to the beginning of the list */,
E,/** Add an element to the end of the list */,
E,/** Add a new element at the specified index in this list     * The index of the head element is 0 */,
E,/** Remove the head node and     *  return the object that is contained in the removed node. */,
s immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/** Remove the last node and     * return the object that is contained in the removed node. */,
E,/** Remove the element at the specified position in this list.     *  Return the element that was removed from the list. */,
E,/** Clear the list */,
E,"/** Returns true if this linked list contains the element e, otherwise returns false     * @return .*/",
E,"/** Returns the element at specified index of this list, returns null if index is invalid. */",
E,"/** Returns the index of the first matching element in this linked list, return !-1 if no match. */",
E,"/** Returns the index of the last matching element in this list, returns !-1 if no match. */",
E,"/** Replaces the element at specified index in this linked list with the specified element.  Returns the old element at specified index, otherwise returns null if index is invalid. */",
E,"/**     * Returns a copy of this datetime with the hour of day field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * hour of day changed.     *     * @param hour  the hour of day to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the minute of hour updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * minute of hour changed.     *     * @param minute  the minute of hour to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the second of minute field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * second of minute changed.     *     * @param second  the second of minute to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Gets the field being used.         *          * @return the field         */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the DisRule wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOver wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,/**     * Act - do whatever the Life wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
value changed         */,
E,/**     * Act - do whatever the Message wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this         * DateTime.  If halfway, the ceiling is favored over the floor only if         * it makes this field's value even.         *         * @return a copy of the DateTime with the field value changed         */",
E,/**     * Act - do whatever the Quit wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Rules wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Story wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Timer wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOverScreen wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**   * Observes the value of any new tiles that was formed   *   * @return   */,
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,/**   * Draws Tiles in a square arrangement   */,
E,/**   * Draws Tiles in a square arrangement   */,
E,/** * Create the frame. */,
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,/** * returns instance of this download frame * @return */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/**         * Gets the current time.         * @return the current time in millis         */,
E,"/**     * Gets the default time zone.     * <p>     * The default time zone is derived from the system property {@code user.timezone}.     * If that is {@code null} or is not a valid identifier, then the value of the     * JDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.     * <p>     * NOTE: If the {@code java.util.TimeZone} default is updated <i>after</i> calling this     * method, then the change will not be picked up here.     *      * @return the default datetime zone object     */",
E,/** * this method should read the log file and return musicpath */,
E,/** * this method should read the log file and return imagePath */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should return the text of the log file */,
return an unmodifiable Set of String IDs     */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
instance factory that supplies the     * actual instances of DateTimeZone.     *      * @return the provider     */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,"/**     * Sets the zone provider factory without performing the security check.     *      * @param provider  provider to use, or null for default     * @throws IllegalArgumentException if the provider is invalid     */",
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/**     * Gets the name provider factory.     * <p>     * The name provider is a pluggable instance factory that supplies the     * names of each DateTimeZone.     *      * @return the provider     */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
rg.joda.time.DateTimeZone.NameProvider</code>.     * Then uses <code>DefaultNameProvider</code>.     *      * @return the default name provider     */,
E,"/**     * Converts an old style id to a new style id.     *      * @param id  the old style id     * @return the new style id, null if not found     */",
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the the text of the log file */,
E,"/**     * Gets the duration field type, which is <code>minutes</code>.     *     * @return the period type     */",
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,"/**     * Gets the period type, which is <code>minutes</code>.     *     * @return the period type     */",
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,"/**     * Converts this period in minutes to a period in weeks assuming a     * 7 days week, 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all weeks are     * 7 days long, all days are 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole weeks for this number of minutes     */",
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,"/**     * Converts this period in minutes to a period in days assuming a     * 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all days are     * 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole days for this number of minutes     */",
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,"/**     * Converts this period in minutes to a period in hours assuming a     * 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all hours are     * 60 minutes long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of hours for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in seconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of seconds for this number of minutes     * @throws ArithmeticException if the number of seconds is too large to be represented     */",
E,"/**     * Converts this period in minutes to a duration in milliseconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert from a period to a duration.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long. This might not be true for an unusual chronology,     * for example one that takes leap seconds into account.     * However, the method is included as it is a useful operation for many     * applications and business rules.     *     * @return a duration equivalent to this number of minutes     */",
E,/**     * Gets the number of minutes that this period represents.     *     * @return the number of minutes in the period     */,
E,"/**     * Returns a new instance with the specified number of minutes added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to add, may be negative, null means zero     * @return the new period plus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of minutes taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to take away, may be negative, null means zero     * @return the new period minus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Is this minutes instance greater than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is greater than the specified one     */",
E,/**     * Create a byte array with a specific size filled with specified data.     *     * @param size the size of the byte array.     * @param data the data to put in the byte array.     * @return the JSON byte array.     */,
E,"/**     * Is this minutes instance less than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is less than the specified one     */",
E,"/**     * Create a User.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which has a required relationship to the User entity.     */",
E,"/**     * Create an entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**     * Create an updated entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**    * Users can call this method to add new points to the plot for this graph.    * Once a point is added, it cannot be removed from the graph. The graph    * class uses lazy evaluation for all plotting functions so nothing will show    * up until a showGraph() method is called.    *     * @param newPoints    *           the array of new points to add to the graph    */",
E,/**    * this methods shows the graph with all of the current points and lines that    * the user added.    */,
E,/**    * this method reads all the data files for the bird names listed in the enum    * Birds and generates a corresponding processed file named:    * [birdName]_out.txt    */,
E,"/** If size = length of d, double the length of array d. <br> * The worst-case time is proportional to the length of d. */",
E,/** Return the size of this heap. <br> * This operation takes constant time. */,
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,"/** Return the shortest path from node v to node end <br>     * ---or the empty list if a path does not exist. <br>     * Note: The empty list is NOT ""null""; it is a list with 0 elements. */",
E,/** Return the direction. */,
E,/** Return a new point that is this point with p added to it. */,
E,/** Return a randomly determined gold value for a given tile. */,
field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/** Given tiles t without edges and a supplier to return edge weights, <br> * add edges to the nodes between adjacent non-wall tiles. <br> * Precondition: all elements of {@code tiles} are non-null. */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/** Generate a new random graph that fits within the grid and return the set of nodes. */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,/** Return the number of rows in the grid. */,
E,/** Return the number of columns in the grid. */,
E,/** Return the set of all nodes in the graph. <br> * This is an umodifiable view of the graph. */,
E,/** Return the node corresponding to the entrance to the cavern. */,
E,"/** Return the Tile information for tile (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,"/**     * Handle broken serialization from other tools.     * @return the resolved object, not null     */",
E,"/**     * Gets the number of fields in this partial, which is two.     * The supported fields are MonthOfYear and DayOfMonth.     * Note that only these fields may be queried.     *     * @return the field count, two     */",
E,/**         * Gets the field that this property uses.         *          * @return the field         */,
E,"/**     * Gets the field type at the specified index.     *     * @param index  the index to retrieve     * @return the field at the specified index, never null     * @throws IndexOutOfBoundsException if the index is invalid     */",
E,/** Return the Node on this edge that is not equal to n. <br> * Throw an IllegalArgumentException if n is not in this Edge. */,
E,/** Return the length of this Edge */,
E,"/**     * Gets an array of the field type of each of the fields that this partial supports.     * <p>     * The fields are returned largest to smallest, Month, Day.     *     * @return the array of field types (cloned), largest to smallest, never null     */",
E,/** Return the source of this edge. */,
E,/** Return destination of edge */,
E,"/** Run through the game, one step at a time. <br>     * Will run scram() only if hunt() succeeds. <br>     * Does not use a timeout and will wait as long as necessary. */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,"/** Given seed, whether or not to use the GUI, and an instance <br>     * of a solution to use, run the game. */",
E,/** Return the number of elements in the priority queue.<br> * This operation takes constant time. */,
E,/**     * Get the month of year field value.     *     * @return the month of year     */,
E,/**     * Get the day of month field value.     *     * @return the day of month     */,
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Gets the property object for the specified type, which contains     * many useful methods.     *     * @param type  the field type to get the property for     * @return the property object     * @throws IllegalArgumentException if the field is null or unsupported     */",
E,/**     * Get the month of year field property which provides access to advanced functionality.     *      * @return the month of year property     */,
E,/**     * Get the day of month field property which provides access to advanced functionality.     *      * @return the day of month property     */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the value of this field.         *          * @return the field value         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative, null means zero     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative, null means zero     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,/** * Returns * the title over the image * @return */,
N,/**     * @return the suite of tests being tested     */,
E,/* play a card */,
E,/* play a card */,
,/**     * Returns true if this object has buffered data for reading.     *     * @param context the context to be used     * @return true if there is data still available for reading.     */,
,"/**     * Converts an array of characters representing hexadecimal values into an array of bytes of those same values. The     * returned array will be half the length of the passed array, as it takes two characters to represent any given     * byte. An exception is thrown if the passed char array has an odd number of elements.     *     * @param data     *            An array of characters containing hexadecimal digits     * @return A byte array containing binary data decoded from the supplied char array.     * @throws DecoderException     *             Thrown if an odd number or illegal of characters is supplied     */",
,"/*     * Returns whether the array contains the key, or not.     */",
,"/**         * Creates a new branch, identical to this branch.         *         * @return a new, identical branch         */",
,"/**     * Handles 'A', 'E', 'I', 'O', 'U', and 'Y' cases.     */",
,/**     * Handles 'C' cases.     */,
,/**     * Handles 'CC' cases.     */,
,/**     * Handles 'CH' cases.     */,
,/**     * Handles 'D' cases.     */,
,/**     * Handles 'G' cases.     */,
,/**     * Handles 'H' cases.     */,
,/**     * Handles 'J' cases.     */,
E,/** True if the entry is expired. */,
E,/** True if a refresh is needed from the original data source. */,
E,"/**     * Forces this dispatcher to quit immediately. If any requests are still in the queue, they are     * not guaranteed to be processed.     */",
E,"/**         * For cacheable requests, if a request for the same cache key is already in flight, add it         * to a queue to wait for that in-flight request to finish.         *         * @return whether the request was queued. If false, we should continue issuing the request         *     over the network. If true, we should put the request on hold to be processed when the         *     in-flight request finishes.         */",
E,"/** Returns true if this policy has attempts remaining, false otherwise. */",
E,/**     * Creates a new network response for an OK response with no headers.     *     * @param data Response body     */,
E,"/**     * Creates a new request with the given method (one of the values from {@link Method}), URL, and     * error listener. Note that the normal response listener is not provided here as delivery of     * responses is provided by subclasses, who have a better idea of how to deliver an     * already-parsed response.     */",
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/** Return the method for this request. Can be one of the values in {@link Method}. */,
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/** Adds an event to this request's event log; for debugging. */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Sets the sequence number of this request. Used by {@link RequestQueue}.     *     * @return This Request object to allow for chaining.     */,
E,/** Reads the contents of an InputStream into a byte[]. */,
E,/**     * Combine cache headers with network response headers for an HTTP 304 response.     *     * <p>An HTTP 304 response does not have all header fields. We have to use the header fields     * from the cache entry plus the new ones from the response. See also:     * http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5     *     * @param responseHeaders Headers from the network response.     * @param entry The cached response.     * @return The combined list of headers.     */,
E,"/**     * Returns a buffer from the pool if one is available in the requested size, or allocates a new     * one if a pooled one is not available.     *     * @param len the minimum size, in bytes, of the requested buffer. The returned buffer may be     *     larger.     * @return a byte[] buffer is always returned.     */",
E,/** Returns a file object for the given cache key. */,
E,/**     * Puts the entry with the specified key into the cache.     *     * @param key The key to identify the entry by.     * @param entry The entry to cache.     */,
E,/** Removes the entry identified by 'key' from the cache. */,
E,/** Creates a cache entry for the specified data. */,
E,/** Returns the HTTP status code of the response. */,
E,/**     * Clear page history for the app.     */,
E,/**     * Determine if log level will be logged     *     * @param logLevel     * @return true if the parameter passed in is greater than or equal to the current log level     */,
E,/**     * Changes the bridge mode.     */,
E,"/**     * Combines and returns queued messages combined into a single string.     * Combines as many messages as possible, while staying under MAX_PAYLOAD_SIZE.     * Returns null if the queue is empty.     */",
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a plugin class that implements a service to the service entry table.     * This does not create the plugin object instance.     *     * @param entry             The plugin entry     */,
E,/**     * Called when the activity is becoming visible to the user.     */,
E,/**     * Called when the activity is no longer visible to the user.     */,
E,/**     * The final call you receive before your activity is destroyed.     */,
E,/**     * Called when the activity receives a new intent.     */,
E,"/**     * Called when the webview is going to request an external resource.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the resource to load,     *                  false to block the resource.     */",
E,"/**     * Called when the webview is going to change the URL of the loaded content.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the navigation,     *                  false to block the navigation.     */",
E,/**     * Called when the webview is requesting the exec() bridge be enabled.     */,
E,"/**     * Called when the webview is going not going to navigate, but may launch     * an Intent for an URL.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the URL to launch an intent,     *                  false to block the intent.     */",
E,"/**     * Called when the URL of the webview changes.     *     * @param url               The URL that is being changed to.     * @return                  Return false to allow the URL to load, return true to prevent the URL from loading.     */",
E,/**     * Create a plugin based on class name.     */,
E,/**     * Called by the system when the device configuration changes while your activity is running.     *     * @param newConfigThe new device configuration     */,
E,/**     * Determine if URL is in approved list of URLs to load.     *     * @param uri     * @return true if wide open or whitelisted     */,
E,/**     * Ask the host application for a custom progress view to show while     * a <video> is loading.     * @return View The progress view.     */,
E,/** Used when created via reflection. */,
E,/** * Create the frame. */,
E,/** * Launch the application. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
N,/**     * This function is run when the robot is first started up and should be     * used for any initialization code.     */,
E,/** * get a new vertex * @return named vertex */,
E,/** * reset to a neutral state */,
E,/** * string representation */,
E,"/** * compare edge to edge * from Comparable, to allow sorting edges by weight */",
E,/** * add edge to forest *  * @param e edge to be added */,
E,/** * remove a tree from the forest *  * @param t tree */,
E,/** Add a new element at the end of this list */,
E,/** Return true if this list contains no elements */,
E,/** Return the number of elements in this list */,
E,/** Remove the first occurrence of the element o from this list.   *  Shift any subsequent elements to the left.   *  Return true if the element is removed. */,
E,/** Create a default list */,
E,/** Create a list from an array of objects */,
E,/** Return the head element in the list */,
E,/** Return the last element in the list */,
E,/** Add an element to the beginning of the list */,
E,/** Add an element to the end of the list */,
E,/** Add a new element at the specified index in this list     * The index of the head element is 0 */,
E,/** Remove the head node and     *  return the object that is contained in the removed node. */,
E,/** Remove the last node and     * return the object that is contained in the removed node. */,
E,/** Remove the element at the specified position in this list.     *  Return the element that was removed from the list. */,
E,/** Clear the list */,
E,"/** Returns true if this linked list contains the element e, otherwise returns false     * @return .*/",
E,"/** Returns the element at specified index of this list, returns null if index is invalid. */",
E,"/** Returns the index of the first matching element in this linked list, return !-1 if no match. */",
E,"/** Returns the index of the last matching element in this list, returns !-1 if no match. */",
E,"/** Replaces the element at specified index in this linked list with the specified element.  Returns the old element at specified index, otherwise returns null if index is invalid. */",
E,/** Main method - DO NOT CHANGE THIS CODE!!!! */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the DisRule wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOver wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameWon wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Life wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Message wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Quit wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Rules wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Story wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Timer wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOverScreen wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**   * Observes the value of any new tiles that was formed   *   * @return   */,
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,/**   * Draws Tiles in a square arrangement   */,
E,/**   * Draws Tiles in a square arrangement   */,
E,/** * Create the frame. */,
E,/** * method that returns the URL passed into this download frame * @return */,
E,/** * returns instance of this download frame * @return */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return musicpath */,
E,/** * this method should read the log file and return imagePath */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/**     * Create a byte array with a specific size filled with specified data.     *     * @param size the size of the byte array.     * @param data the data to put in the byte array.     * @return the JSON byte array.     */,
E,"/**     * Create a User.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which has a required relationship to the User entity.     */",
E,"/**     * Create an entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**     * Create an updated entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**    * Users can call this method to add new points to the plot for this graph.    * Once a point is added, it cannot be removed from the graph. The graph    * class uses lazy evaluation for all plotting functions so nothing will show    * up until a showGraph() method is called.    *     * @param newPoints    *           the array of new points to add to the graph    */",
E,/**    * this methods shows the graph with all of the current points and lines that    * the user added.    */,
E,/**    * this method reads all the data files for the bird names listed in the enum    * Birds and generates a corresponding processed file named:    * [birdName]_out.txt    */,
E,"/** If size = length of d, double the length of array d. <br> * The worst-case time is proportional to the length of d. */",
E,/** Return the size of this heap. <br> * This operation takes constant time. */,
E,"/** Return the shortest path from node v to node end <br>     * ---or the empty list if a path does not exist. <br>     * Note: The empty list is NOT ""null""; it is a list with 0 elements. */",
E,/** Return the direction. */,
E,/** Return a new point that is this point with p added to it. */,
E,/** Return a randomly determined gold value for a given tile. */,
E,"/** Given tiles t without edges and a supplier to return edge weights, <br> * add edges to the nodes between adjacent non-wall tiles. <br> * Precondition: all elements of {@code tiles} are non-null. */",
E,/** Generate a new random graph that fits within the grid and return the set of nodes. */,
E,/** Return the number of open floor tiles in this cavern <br> * (this is the size of the graph). */,
E,/** Return the number of rows in the grid. */,
E,/** Return the number of columns in the grid. */,
E,/** Return the set of all nodes in the graph. <br> * This is an umodifiable view of the graph. */,
E,/** Return the node corresponding to the entrance to the cavern. */,
E,"/** Return the Tile information for tile (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,"/** Return the node at the given (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,/** Return the Node on this edge that is not equal to n. <br> * Throw an IllegalArgumentException if n is not in this Edge. */,
E,/** Return the length of this Edge */,
E,/** Return the source of this edge. */,
E,/** Return destination of edge */,
E,"/** Run through the game, one step at a time. <br>     * Will run scram() only if hunt() succeeds. <br>     * Does not use a timeout and will wait as long as necessary. */",
E,"/** Return the Manhattan distance from (row, col) to the target */",
E,"/** Given seed, whether or not to use the GUI, and an instance <br>     * of a solution to use, run the game. */",
E,/** Return the number of elements in the priority queue.<br> * This operation takes constant time. */,
E,/* * Welcome function will print the greeting message to the screen. */,
E,/** * This Show Menu function will print list of options that user can choose from. */,
E,/** * This addMember function will allow the user to enter a new member. */,
E,/**     * @return the suite of tests being tested     */,
E,"/**    * You can also modify the body of this method to customize your error messages.    * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not    * of end-users concern, so you can return something like :     *    *     ""Internal Error : Please file a bug report .... ""    *    * from this method for such cases in the release version of your parser.    */",
E,/**    * Use this method to add FormatCommands to the command queue to be    * executed when the next token in the tree is visited.    */,
E,/**   * Generate a name for a parameter from the type of the parameter.   *   * @param className  the parameters type   * @return a more or less fitting name.   */,
E,/**   * Gets a container containing the signatures of the delegation   * methods.   *   * @return the value of signatures   */,
E,/**   * Gets the value of signatures   *   * @return the value of signatures   */,
E,/**     * Method that adds a new element to the stack.     *     * @param value - the value to be added     * @return - true if the value was inserted successfully and false otherwise     */,
E,/**     * Method that returns end removes the top element from the stack. Program will close if the stack is empty.     *     * @return - the top element from the stack     */,
E,/**     * @return - the top element from the stack without removing it.     */,
E,/**     * Method that checks if the stack is empty.     *     * @return - true if the stack is empty and false otherwise.     */,
E,/**     * Method that check if the stack is full.     *     * @return - true if the stack is full and false otherwise     */,
E,/**    @Deprecated    reason - we will not be using this anymore     */,
E,/*         * LIST - ordered collection of elements.         * Elements can be accessed by their index.         */,
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/** Puts an X or O mark at position i,j. */",
E,"/** Puts an X or O mark at position i,j. */",
E,/** Checks whether the board configuration is a win for the given player. */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/**     * This is the main swing application method.   It sets up and displays the     * initial GUI, and controls execution thereafter.  Everything else in     * this class is 'private', please read the code.     */",
E,/*     * usage A private static method to display usage information to     * the user before an error exit.     */,
E,"/*     * go This method reads the file, creates the table to display,     * the window to display it in, and displays the window.     * @param fileName the name of the file to read.     * @param tryLines An estimate of the number of lines in     * the file.     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date with the era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of era changed.     *     * @param yearOfEra  the year of era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of century field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of century changed.     *     * @param yearOfCentury  the year of century to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the month of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of year changed.     *     * @param dayOfYear  the day of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of month field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of week field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of week changed.     *     * @param dayOfWeek  the day of week to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Returns a copy of this date with a different chronology, potentially     * changing the day in unexpected ways.     * <p>     * This method creates a new DateMidnight using the midnight millisecond value     * and the new chronology. If the same or similar chronology is specified, but     * with a different time zone, the day may change. This occurs because the new     * DateMidnight rounds down the millisecond value to get to midnight, and the     * time zone change may result in a rounding down to a different day.     * <p>     * For example, changing time zone from London (+00:00) to Paris (+01:00) will     * retain the same day, but changing from Paris to London will change the day.     * (When its midnight in London its the same day in Paris, but when its midnight     * in Paris its still the previous day in London)     * <p>     * To avoid these unusual effects, use {@link #withZoneRetainFields(DateTimeZone)}     * to change time zones.     *     * @param newChronology",the new chronology     * @return a copy of this instant with a different chronology     */
E,"/**     * Returns a copy of this date with a different time zone, preserving the day     * The returned object will have a local time of midnight in the new zone on     * the same day as the original instant.     *     * @param newZone  the new time zone, null means default     * @return a copy of this instant with a different time zone     */",
E,"/**     * Returns a copy of this date with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>LocalDate</code> then the date fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this datetime with the era field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the year field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the hour of day field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * hour of day changed.     *     * @param hour  the hour of day to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the minute of hour updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * minute of hour changed.     *     * @param minute  the minute of hour to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the second of minute field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * second of minute changed.     *     * @param second  the second of minute to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Gets the field being used.         *          * @return the field         */,
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this         * DateTime.  If halfway, the ceiling is favored over the floor only if         * it makes this field's value even.         *         * @return a copy of the DateTime with the field value changed         */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,/**         * Gets the current time.         * @return the current time in millis         */,
E,"/**     * Gets the default time zone.     * <p>     * The default time zone is derived from the system property {@code user.timezone}.     * If that is {@code null} or is not a valid identifier, then the value of the     * JDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.     * <p>     * NOTE: If the {@code java.util.TimeZone} default is updated <i>after</i> calling this     * method, then the change will not be picked up here.     *      * @return the default datetime zone object     */",
E,/**     * Gets all the available IDs supported.     *      * @return an unmodifiable Set of String IDs     */,
E,/**     * Gets the zone provider factory.     * <p>     * The zone provider is a pluggable instance factory that supplies the     * actual instances of DateTimeZone.     *      * @return the provider     */,
E,"/**     * Sets the zone provider factory without performing the security check.     *      * @param provider  provider to use, or null for default     * @throws IllegalArgumentException if the provider is invalid     */",
E,/**     * Gets the name provider factory.     * <p>     * The name provider is a pluggable instance factory that supplies the     * names of each DateTimeZone.     *      * @return the provider     */,
E,/**     * Gets the default name provider.     * <p>     * Tries the system property <code>org.joda.time.DateTimeZone.NameProvider</code>.     * Then uses <code>DefaultNameProvider</code>.     *      * @return the default name provider     */,
E,"/**     * Converts an old style id to a new style id.     *      * @param id  the old style id     * @return the new style id, null if not found     */",
E,"/**     * Gets the duration field type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Gets the period type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Converts this period in minutes to a period in weeks assuming a     * 7 days week, 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all weeks are     * 7 days long, all days are 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole weeks for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in days assuming a     * 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all days are     * 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole days for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in hours assuming a     * 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all hours are     * 60 minutes long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of hours for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in seconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of seconds for this number of minutes     * @throws ArithmeticException if the number of seconds is too large to be represented     */",
E,"/**     * Converts this period in minutes to a duration in milliseconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert from a period to a duration.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long. This might not be true for an unusual chronology,     * for example one that takes leap seconds into account.     * However, the method is included as it is a useful operation for many     * applications and business rules.     *     * @return a duration equivalent to this number of minutes     */",
E,/**     * Gets the number of minutes that this period represents.     *     * @return the number of minutes in the period     */,
E,"/**     * Returns a new instance with the specified number of minutes added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to add, may be negative, null means zero     * @return the new period plus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of minutes taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to take away, may be negative, null means zero     * @return the new period minus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Is this minutes instance greater than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is greater than the specified one     */",
E,"/**     * Is this minutes instance less than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is less than the specified one     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Handle broken serialization from other tools.     * @return the resolved object, not null     */",
E,"/**     * Gets the number of fields in this partial, which is two.     * The supported fields are MonthOfYear and DayOfMonth.     * Note that only these fields may be queried.     *     * @return the field count, two     */",
E,/**         * Gets the field that this property uses.         *          * @return the field         */,
E,"/**     * Gets the field type at the specified index.     *     * @param index  the index to retrieve     * @return the field at the specified index, never null     * @throws IndexOutOfBoundsException if the index is invalid     */",
E,"/**     * Gets an array of the field type of each of the fields that this partial supports.     * <p>     * The fields are returned largest to smallest, Month, Day.     *     * @return the array of field types (cloned), largest to smallest, never null     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,/**     * Get the month of year field value.     *     * @return the month of year     */,
E,/**     * Get the day of month field value.     *     * @return the day of month     */,
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Gets the property object for the specified type, which contains     * many useful methods.     *     * @param type  the field type to get the property for     * @return the property object     * @throws IllegalArgumentException if the field is null or unsupported     */",
E,/**     * Get the month of year field property which provides access to advanced functionality.     *      * @return the month of year property     */,
E,/**     * Get the day of month field property which provides access to advanced functionality.     *      * @return the day of month property     */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the value of this field.         *          * @return the field value         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative, null means zero     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative, null means zero     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,/** * Returns * the title over the image * @return */,
N,/**     * @return the suite of tests being tested     */,
E,/* play a card */,
E,/* play a card */,
,/**     * Returns true if this object has buffered data for reading.     *     * @param context the context to be used     * @return true if there is data still available for reading.     */,
,"/**     * Converts an array of characters representing hexadecimal values into an array of bytes of those same values. The     * returned array will be half the length of the passed array, as it takes two characters to represent any given     * byte. An exception is thrown if the passed char array has an odd number of elements.     *     * @param data     *            An array of characters containing hexadecimal digits     * @return A byte array containing binary data decoded from the supplied char array.     * @throws DecoderException     *             Thrown if an odd number or illegal of characters is supplied     */",
,"/*     * Returns whether the array contains the key, or not.     */",
,"/**         * Creates a new branch, identical to this branch.         *         * @return a new, identical branch         */",
,"/**     * Handles 'A', 'E', 'I', 'O', 'U', and 'Y' cases.     */",
,/**     * Handles 'C' cases.     */,
,/**     * Handles 'CC' cases.     */,
,/**     * Handles 'CH' cases.     */,
,/**     * Handles 'D' cases.     */,
,/**     * Handles 'G' cases.     */,
,/**     * Handles 'H' cases.     */,
,/**     * Handles 'J' cases.     */,
E,/** True if the entry is expired. */,
E,/** True if a refresh is needed from the original data source. */,
E,"/**     * Forces this dispatcher to quit immediately. If any requests are still in the queue, they are     * not guaranteed to be processed.     */",
E,"/**         * For cacheable requests, if a request for the same cache key is already in flight, add it         * to a queue to wait for that in-flight request to finish.         *         * @return whether the request was queued. If false, we should continue issuing the request         *     over the network. If true, we should put the request on hold to be processed when the         *     in-flight request finishes.         */",
E,"/** Returns true if this policy has attempts remaining, false otherwise. */",
E,/**     * Creates a new network response for an OK response with no headers.     *     * @param data Response body     */,
E,"/**     * Creates a new request with the given method (one of the values from {@link Method}), URL, and     * error listener. Note that the normal response listener is not provided here as delivery of     * responses is provided by subclasses, who have a better idea of how to deliver an     * already-parsed response.     */",
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/** Return the method for this request. Can be one of the values in {@link Method}. */,
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/** Adds an event to this request's event log; for debugging. */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Sets the sequence number of this request. Used by {@link RequestQueue}.     *     * @return This Request object to allow for chaining.     */,
E,/** Reads the contents of an InputStream into a byte[]. */,
E,/**     * Combine cache headers with network response headers for an HTTP 304 response.     *     * <p>An HTTP 304 response does not have all header fields. We have to use the header fields     * from the cache entry plus the new ones from the response. See also:     * http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5     *     * @param responseHeaders Headers from the network response.     * @param entry The cached response.     * @return The combined list of headers.     */,
E,"/**     * Returns a buffer from the pool if one is available in the requested size, or allocates a new     * one if a pooled one is not available.     *     * @param len the minimum size, in bytes, of the requested buffer. The returned buffer may be     *     larger.     * @return a byte[] buffer is always returned.     */",
E,/** Returns a file object for the given cache key. */,
E,/**     * Puts the entry with the specified key into the cache.     *     * @param key The key to identify the entry by.     * @param entry The entry to cache.     */,
E,/** Removes the entry identified by 'key' from the cache. */,
E,/** Creates a cache entry for the specified data. */,
E,/** Returns the HTTP status code of the response. */,
E,/**     * Clear page history for the app.     */,
E,/**     * Determine if log level will be logged     *     * @param logLevel     * @return true if the parameter passed in is greater than or equal to the current log level     */,
E,/**     * Changes the bridge mode.     */,
E,"/**     * Combines and returns queued messages combined into a single string.     * Combines as many messages as possible, while staying under MAX_PAYLOAD_SIZE.     * Returns null if the queue is empty.     */",
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a plugin class that implements a service to the service entry table.     * This does not create the plugin object instance.     *     * @param entry             The plugin entry     */,
E,/**     * Called when the activity is becoming visible to the user.     */,
E,/**     * Called when the activity is no longer visible to the user.     */,
E,/**     * The final call you receive before your activity is destroyed.     */,
E,/**     * Called when the activity receives a new intent.     */,
E,"/**     * Called when the webview is going to request an external resource.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the resource to load,     *                  false to block the resource.     */",
E,"/**     * Called when the webview is going to change the URL of the loaded content.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the navigation,     *                  false to block the navigation.     */",
E,/**     * Called when the webview is requesting the exec() bridge be enabled.     */,
E,"/**     * Called when the webview is going not going to navigate, but may launch     * an Intent for an URL.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the URL to launch an intent,     *                  false to block the intent.     */",
E,"/**     * Called when the URL of the webview changes.     *     * @param url               The URL that is being changed to.     * @return                  Return false to allow the URL to load, return true to prevent the URL from loading.     */",
E,/**     * Create a plugin based on class name.     */,
E,/**     * Called by the system when the device configuration changes while your activity is running.     *     * @param newConfigThe new device configuration     */,
E,/**     * Determine if URL is in approved list of URLs to load.     *     * @param uri     * @return true if wide open or whitelisted     */,
E,/**     * Ask the host application for a custom progress view to show while     * a <video> is loading.     * @return View The progress view.     */,
E,/** Used when created via reflection. */,
E,/** * Create the frame. */,
E,/** * Launch the application. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
N,/**     * This function is run when the robot is first started up and should be     * used for any initialization code.     */,
E,/** * get a new vertex * @return named vertex */,
E,/** * reset to a neutral state */,
E,/** * string representation */,
E,"/** * compare edge to edge * from Comparable, to allow sorting edges by weight */",
E,/** * add edge to forest *  * @param e edge to be added */,
E,/** * remove a tree from the forest *  * @param t tree */,
E,/** Add a new element at the end of this list */,
E,/** Return true if this list contains no elements */,
E,/** Return the number of elements in this list */,
E,/** Remove the first occurrence of the element o from this list.   *  Shift any subsequent elements to the left.   *  Return true if the element is removed. */,
E,/** Create a default list */,
E,/** Create a list from an array of objects */,
E,/** Return the head element in the list */,
E,/** Return the last element in the list */,
E,/** Add an element to the beginning of the list */,
E,/** Add an element to the end of the list */,
E,/** Add a new element at the specified index in this list     * The index of the head element is 0 */,
E,/** Remove the head node and     *  return the object that is contained in the removed node. */,
E,/** Remove the last node and     * return the object that is contained in the removed node. */,
E,/** Remove the element at the specified position in this list.     *  Return the element that was removed from the list. */,
E,/** Clear the list */,
E,"/** Returns true if this linked list contains the element e, otherwise returns false     * @return .*/",
E,"/** Returns the element at specified index of this list, returns null if index is invalid. */",
E,"/** Returns the index of the first matching element in this linked list, return !-1 if no match. */",
E,"/** Returns the index of the last matching element in this list, returns !-1 if no match. */",
E,"/** Replaces the element at specified index in this linked list with the specified element.  Returns the old element at specified index, otherwise returns null if index is invalid. */",
E,/** Main method - DO NOT CHANGE THIS CODE!!!! */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the DisRule wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOver wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameWon wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Life wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Message wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Quit wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Rules wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Story wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Timer wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOverScreen wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**   * Observes the value of any new tiles that was formed   *   * @return   */,
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,/**   * Draws Tiles in a square arrangement   */,
E,/**   * Draws Tiles in a square arrangement   */,
E,/** * Create the frame. */,
E,/** * method that returns the URL passed into this download frame * @return */,
E,/** * returns instance of this download frame * @return */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return musicpath */,
E,/** * this method should read the log file and return imagePath */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/**     * Create a byte array with a specific size filled with specified data.     *     * @param size the size of the byte array.     * @param data the data to put in the byte array.     * @return the JSON byte array.     */,
E,"/**     * Create a User.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which has a required relationship to the User entity.     */",
E,"/**     * Create an entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**     * Create an updated entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**    * Users can call this method to add new points to the plot for this graph.    * Once a point is added, it cannot be removed from the graph. The graph    * class uses lazy evaluation for all plotting functions so nothing will show    * up until a showGraph() method is called.    *     * @param newPoints    *           the array of new points to add to the graph    */",
E,/**    * this methods shows the graph with all of the current points and lines that    * the user added.    */,
E,/**    * this method reads all the data files for the bird names listed in the enum    * Birds and generates a corresponding processed file named:    * [birdName]_out.txt    */,
E,"/** If size = length of d, double the length of array d. <br> * The worst-case time is proportional to the length of d. */",
E,/** Return the size of this heap. <br> * This operation takes constant time. */,
E,"/** Return the shortest path from node v to node end <br>     * ---or the empty list if a path does not exist. <br>     * Note: The empty list is NOT ""null""; it is a list with 0 elements. */",
E,/** Return the direction. */,
E,/** Return a new point that is this point with p added to it. */,
E,/** Return a randomly determined gold value for a given tile. */,
E,"/** Given tiles t without edges and a supplier to return edge weights, <br> * add edges to the nodes between adjacent non-wall tiles. <br> * Precondition: all elements of {@code tiles} are non-null. */",
E,/** Generate a new random graph that fits within the grid and return the set of nodes. */,
E,/** Return the number of open floor tiles in this cavern <br> * (this is the size of the graph). */,
E,/** Return the number of rows in the grid. */,
E,/** Return the number of columns in the grid. */,
E,/** Return the set of all nodes in the graph. <br> * This is an umodifiable view of the graph. */,
E,/** Return the node corresponding to the entrance to the cavern. */,
E,"/** Return the Tile information for tile (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,"/** Return the node at the given (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,/** Return the Node on this edge that is not equal to n. <br> * Throw an IllegalArgumentException if n is not in this Edge. */,
E,/** Return the length of this Edge */,
E,/** Return the source of this edge. */,
E,/** Return destination of edge */,
E,"/** Run through the game, one step at a time. <br>     * Will run scram() only if hunt() succeeds. <br>     * Does not use a timeout and will wait as long as necessary. */",
E,"/** Return the Manhattan distance from (row, col) to the target */",
E,"/** Given seed, whether or not to use the GUI, and an instance <br>     * of a solution to use, run the game. */",
E,/** Return the number of elements in the priority queue.<br> * This operation takes constant time. */,
E,/* * Welcome function will print the greeting message to the screen. */,
E,/** * This Show Menu function will print list of options that user can choose from. */,
E,/** * This addMember function will allow the user to enter a new member. */,
E,/**     * @return the suite of tests being tested     */,
E,"/**    * You can also modify the body of this method to customize your error messages.    * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not    * of end-users concern, so you can return something like :     *    *     ""Internal Error : Please file a bug report .... ""    *    * from this method for such cases in the release version of your parser.    */",
E,/**    * Use this method to add FormatCommands to the command queue to be    * executed when the next token in the tree is visited.    */,
E,/**   * Generate a name for a parameter from the type of the parameter.   *   * @param className  the parameters type   * @return a more or less fitting name.   */,
E,/**   * Gets a container containing the signatures of the delegation   * methods.   *   * @return the value of signatures   */,
E,/**   * Gets the value of signatures   *   * @return the value of signatures   */,
E,/**     * Method that adds a new element to the stack.     *     * @param value - the value to be added     * @return - true if the value was inserted successfully and false otherwise     */,
E,/**     * Method that returns end removes the top element from the stack. Program will close if the stack is empty.     *     * @return - the top element from the stack     */,
E,/**     * @return - the top element from the stack without removing it.     */,
E,/**     * Method that checks if the stack is empty.     *     * @return - true if the stack is empty and false otherwise.     */,
E,/**     * Method that check if the stack is full.     *     * @return - true if the stack is full and false otherwise     */,
E,/**    @Deprecated    reason - we will not be using this anymore     */,
E,/*         * LIST - ordered collection of elements.         * Elements can be accessed by their index.         */,
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/** Puts an X or O mark at position i,j. */",
E,"/** Puts an X or O mark at position i,j. */",
E,/** Checks whether the board configuration is a win for the given player. */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/**     * This is the main swing application method.   It sets up and displays the     * initial GUI, and controls execution thereafter.  Everything else in     * this class is 'private', please read the code.     */",
E,/*     * usage A private static method to display usage information to     * the user before an error exit.     */,
E,"/*     * go This method reads the file, creates the table to display,     * the window to display it in, and displays the window.     * @param fileName the name of the file to read.     * @param tryLines An estimate of the number of lines in     * the file.     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date with the era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of era changed.     *     * @param yearOfEra  the year of era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of century field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of century changed.     *     * @param yearOfCentury  the year of century to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the month of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of year changed.     *     * @param dayOfYear  the day of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of month field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of week field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of week changed.     *     * @param dayOfWeek  the day of week to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Returns a copy of this date with a different chronology, potentially     * changing the day in unexpected ways.     * <p>     * This method creates a new DateMidnight using the midnight millisecond value     * and the new chronology. If the same or similar chronology is specified, but     * with a different time zone, the day may change. This occurs because the new     * DateMidnight rounds down the millisecond value to get to midnight, and the     * time zone change may result in a rounding down to a different day.     * <p>     * For example, changing time zone from London (+00:00) to Paris (+01:00) will     * retain the same day, but changing from Paris to London will change the day.     * (When its midnight in London its the same day in Paris, but when its midnight     * in Paris its still the previous day in London)     * <p>     * To avoid these unusual effects, use {@link #withZoneRetainFields(DateTimeZone)}     * to change time zones.     *     * @param newChronology",the new chronology     * @return a copy of this instant with a different chronology     */
E,"/**     * Returns a copy of this date with a different time zone, preserving the day     * The returned object will have a local time of midnight in the new zone on     * the same day as the original instant.     *     * @param newZone  the new time zone, null means default     * @return a copy of this instant with a different time zone     */",
E,"/**     * Returns a copy of this date with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>LocalDate</code> then the date fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this datetime with the era field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the year field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the hour of day field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * hour of day changed.     *     * @param hour  the hour of day to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the minute of hour updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * minute of hour changed.     *     * @param minute  the minute of hour to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the second of minute field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * second of minute changed.     *     * @param second  the second of minute to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Gets the field being used.         *          * @return the field         */,
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this         * DateTime.  If halfway, the ceiling is favored over the floor only if         * it makes this field's value even.         *         * @return a copy of the DateTime with the field value changed         */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,/**         * Gets the current time.         * @return the current time in millis         */,
E,"/**     * Gets the default time zone.     * <p>     * The default time zone is derived from the system property {@code user.timezone}.     * If that is {@code null} or is not a valid identifier, then the value of the     * JDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.     * <p>     * NOTE: If the {@code java.util.TimeZone} default is updated <i>after</i> calling this     * method, then the change will not be picked up here.     *      * @return the default datetime zone object     */",
E,/**     * Gets all the available IDs supported.     *      * @return an unmodifiable Set of String IDs     */,
E,/**     * Gets the zone provider factory.     * <p>     * The zone provider is a pluggable instance factory that supplies the     * actual instances of DateTimeZone.     *      * @return the provider     */,
E,"/**     * Sets the zone provider factory without performing the security check.     *      * @param provider  provider to use, or null for default     * @throws IllegalArgumentException if the provider is invalid     */",
E,/**     * Gets the name provider factory.     * <p>     * The name provider is a pluggable instance factory that supplies the     * names of each DateTimeZone.     *      * @return the provider     */,
E,/**     * Gets the default name provider.     * <p>     * Tries the system property <code>org.joda.time.DateTimeZone.NameProvider</code>.     * Then uses <code>DefaultNameProvider</code>.     *      * @return the default name provider     */,
E,"/**     * Converts an old style id to a new style id.     *      * @param id  the old style id     * @return the new style id, null if not found     */",
E,"/**     * Gets the duration field type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Gets the period type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Converts this period in minutes to a period in weeks assuming a     * 7 days week, 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all weeks are     * 7 days long, all days are 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole weeks for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in days assuming a     * 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all days are     * 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole days for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in hours assuming a     * 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all hours are     * 60 minutes long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of hours for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in seconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of seconds for this number of minutes     * @throws ArithmeticException if the number of seconds is too large to be represented     */",
E,"/**     * Converts this period in minutes to a duration in milliseconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert from a period to a duration.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long. This might not be true for an unusual chronology,     * for example one that takes leap seconds into account.     * However, the method is included as it is a useful operation for many     * applications and business rules.     *     * @return a duration equivalent to this number of minutes     */",
E,/**     * Gets the number of minutes that this period represents.     *     * @return the number of minutes in the period     */,
E,"/**     * Returns a new instance with the specified number of minutes added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to add, may be negative, null means zero     * @return the new period plus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of minutes taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to take away, may be negative, null means zero     * @return the new period minus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Is this minutes instance greater than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is greater than the specified one     */",
E,"/**     * Is this minutes instance less than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is less than the specified one     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Handle broken serialization from other tools.     * @return the resolved object, not null     */",
E,"/**     * Gets the number of fields in this partial, which is two.     * The supported fields are MonthOfYear and DayOfMonth.     * Note that only these fields may be queried.     *     * @return the field count, two     */",
E,/**         * Gets the field that this property uses.         *          * @return the field         */,
E,"/**     * Gets the field type at the specified index.     *     * @param index  the index to retrieve     * @return the field at the specified index, never null     * @throws IndexOutOfBoundsException if the index is invalid     */",
E,"/**     * Gets an array of the field type of each of the fields that this partial supports.     * <p>     * The fields are returned largest to smallest, Month, Day.     *     * @return the array of field types (cloned), largest to smallest, never null     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,/**     * Get the month of year field value.     *     * @return the month of year     */,
E,/**     * Get the day of month field value.     *     * @return the day of month     */,
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Gets the property object for the specified type, which contains     * many useful methods.     *     * @param type  the field type to get the property for     * @return the property object     * @throws IllegalArgumentException if the field is null or unsupported     */",
E,/**     * Get the month of year field property which provides access to advanced functionality.     *      * @return the month of year property     */,
E,/**     * Get the day of month field property which provides access to advanced functionality.     *      * @return the day of month property     */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the value of this field.         *          * @return the field value         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative, null means zero     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative, null means zero     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,/** * Returns * the title over the image * @return */,
N,/**     * @return the suite of tests being tested     */,
E,/* play a card */,
E,/* play a card */,
,/**     * Returns true if this object has buffered data for reading.     *     * @param context the context to be used     * @return true if there is data still available for reading.     */,
,"/**     * Converts an array of characters representing hexadecimal values into an array of bytes of those same values. The     * returned array will be half the length of the passed array, as it takes two characters to represent any given     * byte. An exception is thrown if the passed char array has an odd number of elements.     *     * @param data     *            An array of characters containing hexadecimal digits     * @return A byte array containing binary data decoded from the supplied char array.     * @throws DecoderException     *             Thrown if an odd number or illegal of characters is supplied     */",
,"/*     * Returns whether the array contains the key, or not.     */",
,"/**         * Creates a new branch, identical to this branch.         *         * @return a new, identical branch         */",
,"/**     * Handles 'A', 'E', 'I', 'O', 'U', and 'Y' cases.     */",
,/**     * Handles 'C' cases.     */,
,/**     * Handles 'CC' cases.     */,
,/**     * Handles 'CH' cases.     */,
,/**     * Handles 'D' cases.     */,
,/**     * Handles 'G' cases.     */,
,/**     * Handles 'H' cases.     */,
,/**     * Handles 'J' cases.     */,
E,/** True if the entry is expired. */,
E,/** True if a refresh is needed from the original data source. */,
E,"/**     * Forces this dispatcher to quit immediately. If any requests are still in the queue, they are     * not guaranteed to be processed.     */",
E,"/**         * For cacheable requests, if a request for the same cache key is already in flight, add it         * to a queue to wait for that in-flight request to finish.         *         * @return whether the request was queued. If false, we should continue issuing the request         *     over the network. If true, we should put the request on hold to be processed when the         *     in-flight request finishes.         */",
E,"/** Returns true if this policy has attempts remaining, false otherwise. */",
E,/**     * Creates a new network response for an OK response with no headers.     *     * @param data Response body     */,
E,"/**     * Creates a new request with the given method (one of the values from {@link Method}), URL, and     * error listener. Note that the normal response listener is not provided here as delivery of     * responses is provided by subclasses, who have a better idea of how to deliver an     * already-parsed response.     */",
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/** Return the method for this request. Can be one of the values in {@link Method}. */,
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/** Adds an event to this request's event log; for debugging. */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Sets the sequence number of this request. Used by {@link RequestQueue}.     *     * @return This Request object to allow for chaining.     */,
E,/** Reads the contents of an InputStream into a byte[]. */,
E,/**     * Combine cache headers with network response headers for an HTTP 304 response.     *     * <p>An HTTP 304 response does not have all header fields. We have to use the header fields     * from the cache entry plus the new ones from the response. See also:     * http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5     *     * @param responseHeaders Headers from the network response.     * @param entry The cached response.     * @return The combined list of headers.     */,
E,"/**     * Returns a buffer from the pool if one is available in the requested size, or allocates a new     * one if a pooled one is not available.     *     * @param len the minimum size, in bytes, of the requested buffer. The returned buffer may be     *     larger.     * @return a byte[] buffer is always returned.     */",
E,/** Returns a file object for the given cache key. */,
E,/**     * Puts the entry with the specified key into the cache.     *     * @param key The key to identify the entry by.     * @param entry The entry to cache.     */,
E,/** Removes the entry identified by 'key' from the cache. */,
E,/** Creates a cache entry for the specified data. */,
E,/** Returns the HTTP status code of the response. */,
E,/**     * Clear page history for the app.     */,
E,/**     * Determine if log level will be logged     *     * @param logLevel     * @return true if the parameter passed in is greater than or equal to the current log level     */,
E,/**     * Changes the bridge mode.     */,
E,"/**     * Combines and returns queued messages combined into a single string.     * Combines as many messages as possible, while staying under MAX_PAYLOAD_SIZE.     * Returns null if the queue is empty.     */",
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a plugin class that implements a service to the service entry table.     * This does not create the plugin object instance.     *     * @param entry             The plugin entry     */,
E,/**     * Called when the activity is becoming visible to the user.     */,
E,/**     * Called when the activity is no longer visible to the user.     */,
E,/**     * The final call you receive before your activity is destroyed.     */,
E,/**     * Called when the activity receives a new intent.     */,
E,"/**     * Called when the webview is going to request an external resource.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the resource to load,     *                  false to block the resource.     */",
E,"/**     * Called when the webview is going to change the URL of the loaded content.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the navigation,     *                  false to block the navigation.     */",
E,/**     * Called when the webview is requesting the exec() bridge be enabled.     */,
E,"/**     * Called when the webview is going not going to navigate, but may launch     * an Intent for an URL.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the URL to launch an intent,     *                  false to block the intent.     */",
E,"/**     * Called when the URL of the webview changes.     *     * @param url               The URL that is being changed to.     * @return                  Return false to allow the URL to load, return true to prevent the URL from loading.     */",
E,/**     * Create a plugin based on class name.     */,
E,/**     * Called by the system when the device configuration changes while your activity is running.     *     * @param newConfigThe new device configuration     */,
E,/**     * Determine if URL is in approved list of URLs to load.     *     * @param uri     * @return true if wide open or whitelisted     */,
E,/**     * Ask the host application for a custom progress view to show while     * a <video> is loading.     * @return View The progress view.     */,
E,/** Used when created via reflection. */,
E,/** * Create the frame. */,
E,/** * Launch the application. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
N,/**     * This function is run when the robot is first started up and should be     * used for any initialization code.     */,
E,/** * get a new vertex * @return named vertex */,
E,/** * reset to a neutral state */,
E,/** * string representation */,
E,"/** * compare edge to edge * from Comparable, to allow sorting edges by weight */",
E,/** * add edge to forest *  * @param e edge to be added */,
E,/** * remove a tree from the forest *  * @param t tree */,
E,/** Add a new element at the end of this list */,
E,/** Return true if this list contains no elements */,
E,/** Return the number of elements in this list */,
E,/** Remove the first occurrence of the element o from this list.   *  Shift any subsequent elements to the left.   *  Return true if the element is removed. */,
E,/** Create a default list */,
E,/** Create a list from an array of objects */,
E,/** Return the head element in the list */,
E,/** Return the last element in the list */,
E,/** Add an element to the beginning of the list */,
E,/** Add an element to the end of the list */,
E,/** Add a new element at the specified index in this list     * The index of the head element is 0 */,
E,/** Remove the head node and     *  return the object that is contained in the removed node. */,
E,/** Remove the last node and     * return the object that is contained in the removed node. */,
E,/** Remove the element at the specified position in this list.     *  Return the element that was removed from the list. */,
E,/** Clear the list */,
E,"/** Returns true if this linked list contains the element e, otherwise returns false     * @return .*/",
E,"/** Returns the element at specified index of this list, returns null if index is invalid. */",
E,"/** Returns the index of the first matching element in this linked list, return !-1 if no match. */",
E,"/** Returns the index of the last matching element in this list, returns !-1 if no match. */",
E,"/** Replaces the element at specified index in this linked list with the specified element.  Returns the old element at specified index, otherwise returns null if index is invalid. */",
E,/** Main method - DO NOT CHANGE THIS CODE!!!! */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the DisRule wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOver wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameWon wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Life wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Message wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Quit wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Rules wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Story wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Timer wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOverScreen wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**   * Observes the value of any new tiles that was formed   *   * @return   */,
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,/**   * Draws Tiles in a square arrangement   */,
E,/**   * Draws Tiles in a square arrangement   */,
E,/** * Create the frame. */,
E,/** * method that returns the URL passed into this download frame * @return */,
E,/** * returns instance of this download frame * @return */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return musicpath */,
E,/** * this method should read the log file and return imagePath */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/**     * Create a byte array with a specific size filled with specified data.     *     * @param size the size of the byte array.     * @param data the data to put in the byte array.     * @return the JSON byte array.     */,
E,"/**     * Create a User.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which has a required relationship to the User entity.     */",
E,"/**     * Create an entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**     * Create an updated entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**    * Users can call this method to add new points to the plot for this graph.    * Once a point is added, it cannot be removed from the graph. The graph    * class uses lazy evaluation for all plotting functions so nothing will show    * up until a showGraph() method is called.    *     * @param newPoints    *           the array of new points to add to the graph    */",
E,/**    * this methods shows the graph with all of the current points and lines that    * the user added.    */,
E,/**    * this method reads all the data files for the bird names listed in the enum    * Birds and generates a corresponding processed file named:    * [birdName]_out.txt    */,
E,"/** If size = length of d, double the length of array d. <br> * The worst-case time is proportional to the length of d. */",
E,/** Return the size of this heap. <br> * This operation takes constant time. */,
E,"/** Return the shortest path from node v to node end <br>     * ---or the empty list if a path does not exist. <br>     * Note: The empty list is NOT ""null""; it is a list with 0 elements. */",
E,/** Return the direction. */,
E,/** Return a new point that is this point with p added to it. */,
E,/** Return a randomly determined gold value for a given tile. */,
E,"/** Given tiles t without edges and a supplier to return edge weights, <br> * add edges to the nodes between adjacent non-wall tiles. <br> * Precondition: all elements of {@code tiles} are non-null. */",
E,/** Generate a new random graph that fits within the grid and return the set of nodes. */,
E,/** Return the number of open floor tiles in this cavern <br> * (this is the size of the graph). */,
E,/** Return the number of rows in the grid. */,
E,/** Return the number of columns in the grid. */,
E,/** Return the set of all nodes in the graph. <br> * This is an umodifiable view of the graph. */,
E,/** Return the node corresponding to the entrance to the cavern. */,
E,"/** Return the Tile information for tile (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,"/** Return the node at the given (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,/** Return the Node on this edge that is not equal to n. <br> * Throw an IllegalArgumentException if n is not in this Edge. */,
E,/** Return the length of this Edge */,
E,/** Return the source of this edge. */,
E,/** Return destination of edge */,
E,"/** Run through the game, one step at a time. <br>     * Will run scram() only if hunt() succeeds. <br>     * Does not use a timeout and will wait as long as necessary. */",
E,"/** Return the Manhattan distance from (row, col) to the target */",
E,"/** Given seed, whether or not to use the GUI, and an instance <br>     * of a solution to use, run the game. */",
E,/** Return the number of elements in the priority queue.<br> * This operation takes constant time. */,
E,/* * Welcome function will print the greeting message to the screen. */,
E,/** * This Show Menu function will print list of options that user can choose from. */,
E,/** * This addMember function will allow the user to enter a new member. */,
E,/**     * @return the suite of tests being tested     */,
E,"/**    * You can also modify the body of this method to customize your error messages.    * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not    * of end-users concern, so you can return something like :     *    *     ""Internal Error : Please file a bug report .... ""    *    * from this method for such cases in the release version of your parser.    */",
E,/**    * Use this method to add FormatCommands to the command queue to be    * executed when the next token in the tree is visited.    */,
E,/**   * Generate a name for a parameter from the type of the parameter.   *   * @param className  the parameters type   * @return a more or less fitting name.   */,
E,/**   * Gets a container containing the signatures of the delegation   * methods.   *   * @return the value of signatures   */,
E,/**   * Gets the value of signatures   *   * @return the value of signatures   */,
E,/**     * Method that adds a new element to the stack.     *     * @param value - the value to be added     * @return - true if the value was inserted successfully and false otherwise     */,
E,/**     * Method that returns end removes the top element from the stack. Program will close if the stack is empty.     *     * @return - the top element from the stack     */,
E,/**     * @return - the top element from the stack without removing it.     */,
E,/**     * Method that checks if the stack is empty.     *     * @return - true if the stack is empty and false otherwise.     */,
E,/**     * Method that check if the stack is full.     *     * @return - true if the stack is full and false otherwise     */,
E,/**    @Deprecated    reason - we will not be using this anymore     */,
E,/*         * LIST - ordered collection of elements.         * Elements can be accessed by their index.         */,
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/** Puts an X or O mark at position i,j. */",
E,"/** Puts an X or O mark at position i,j. */",
E,/** Checks whether the board configuration is a win for the given player. */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/**     * This is the main swing application method.   It sets up and displays the     * initial GUI, and controls execution thereafter.  Everything else in     * this class is 'private', please read the code.     */",
E,/*     * usage A private static method to display usage information to     * the user before an error exit.     */,
E,"/*     * go This method reads the file, creates the table to display,     * the window to display it in, and displays the window.     * @param fileName the name of the file to read.     * @param tryLines An estimate of the number of lines in     * the file.     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date with the era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of era changed.     *     * @param yearOfEra  the year of era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of century field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of century changed.     *     * @param yearOfCentury  the year of century to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the month of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of year changed.     *     * @param dayOfYear  the day of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of month field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of week field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of week changed.     *     * @param dayOfWeek  the day of week to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Returns a copy of this date with a different chronology, potentially     * changing the day in unexpected ways.     * <p>     * This method creates a new DateMidnight using the midnight millisecond value     * and the new chronology. If the same or similar chronology is specified, but     * with a different time zone, the day may change. This occurs because the new     * DateMidnight rounds down the millisecond value to get to midnight, and the     * time zone change may result in a rounding down to a different day.     * <p>     * For example, changing time zone from London (+00:00) to Paris (+01:00) will     * retain the same day, but changing from Paris to London will change the day.     * (When its midnight in London its the same day in Paris, but when its midnight     * in Paris its still the previous day in London)     * <p>     * To avoid these unusual effects, use {@link #withZoneRetainFields(DateTimeZone)}     * to change time zones.     *     * @param newChronology",the new chronology     * @return a copy of this instant with a different chronology     */
E,"/**     * Returns a copy of this date with a different time zone, preserving the day     * The returned object will have a local time of midnight in the new zone on     * the same day as the original instant.     *     * @param newZone  the new time zone, null means default     * @return a copy of this instant with a different time zone     */",
E,"/**     * Returns a copy of this date with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>LocalDate</code> then the date fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this datetime with the era field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the year field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the hour of day field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * hour of day changed.     *     * @param hour  the hour of day to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the minute of hour updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * minute of hour changed.     *     * @param minute  the minute of hour to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the second of minute field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * second of minute changed.     *     * @param second  the second of minute to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Gets the field being used.         *          * @return the field         */,
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this         * DateTime.  If halfway, the ceiling is favored over the floor only if         * it makes this field's value even.         *         * @return a copy of the DateTime with the field value changed         */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,/**         * Gets the current time.         * @return the current time in millis         */,
E,"/**     * Gets the default time zone.     * <p>     * The default time zone is derived from the system property {@code user.timezone}.     * If that is {@code null} or is not a valid identifier, then the value of the     * JDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.     * <p>     * NOTE: If the {@code java.util.TimeZone} default is updated <i>after</i> calling this     * method, then the change will not be picked up here.     *      * @return the default datetime zone object     */",
E,/**     * Gets all the available IDs supported.     *      * @return an unmodifiable Set of String IDs     */,
E,/**     * Gets the zone provider factory.     * <p>     * The zone provider is a pluggable instance factory that supplies the     * actual instances of DateTimeZone.     *      * @return the provider     */,
E,"/**     * Sets the zone provider factory without performing the security check.     *      * @param provider  provider to use, or null for default     * @throws IllegalArgumentException if the provider is invalid     */",
E,/**     * Gets the name provider factory.     * <p>     * The name provider is a pluggable instance factory that supplies the     * names of each DateTimeZone.     *      * @return the provider     */,
E,/**     * Gets the default name provider.     * <p>     * Tries the system property <code>org.joda.time.DateTimeZone.NameProvider</code>.     * Then uses <code>DefaultNameProvider</code>.     *      * @return the default name provider     */,
E,"/**     * Converts an old style id to a new style id.     *      * @param id  the old style id     * @return the new style id, null if not found     */",
E,"/**     * Gets the duration field type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Gets the period type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Converts this period in minutes to a period in weeks assuming a     * 7 days week, 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all weeks are     * 7 days long, all days are 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole weeks for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in days assuming a     * 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all days are     * 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole days for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in hours assuming a     * 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all hours are     * 60 minutes long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of hours for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in seconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of seconds for this number of minutes     * @throws ArithmeticException if the number of seconds is too large to be represented     */",
E,"/**     * Converts this period in minutes to a duration in milliseconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert from a period to a duration.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long. This might not be true for an unusual chronology,     * for example one that takes leap seconds into account.     * However, the method is included as it is a useful operation for many     * applications and business rules.     *     * @return a duration equivalent to this number of minutes     */",
E,/**     * Gets the number of minutes that this period represents.     *     * @return the number of minutes in the period     */,
E,"/**     * Returns a new instance with the specified number of minutes added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to add, may be negative, null means zero     * @return the new period plus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of minutes taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to take away, may be negative, null means zero     * @return the new period minus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Is this minutes instance greater than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is greater than the specified one     */",
E,"/**     * Is this minutes instance less than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is less than the specified one     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Handle broken serialization from other tools.     * @return the resolved object, not null     */",
E,"/**     * Gets the number of fields in this partial, which is two.     * The supported fields are MonthOfYear and DayOfMonth.     * Note that only these fields may be queried.     *     * @return the field count, two     */",
E,/**         * Gets the field that this property uses.         *          * @return the field         */,
E,"/**     * Gets the field type at the specified index.     *     * @param index  the index to retrieve     * @return the field at the specified index, never null     * @throws IndexOutOfBoundsException if the index is invalid     */",
E,"/**     * Gets an array of the field type of each of the fields that this partial supports.     * <p>     * The fields are returned largest to smallest, Month, Day.     *     * @return the array of field types (cloned), largest to smallest, never null     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,/**     * Get the month of year field value.     *     * @return the month of year     */,
E,/**     * Get the day of month field value.     *     * @return the day of month     */,
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Gets the property object for the specified type, which contains     * many useful methods.     *     * @param type  the field type to get the property for     * @return the property object     * @throws IllegalArgumentException if the field is null or unsupported     */",
E,/**     * Get the month of year field property which provides access to advanced functionality.     *      * @return the month of year property     */,
E,/**     * Get the day of month field property which provides access to advanced functionality.     *      * @return the day of month property     */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the value of this field.         *          * @return the field value         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative, null means zero     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative, null means zero     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,/** * Returns * the title over the image * @return */,
N,/**     * @return the suite of tests being tested     */,
E,/* play a card */,
E,/* play a card */,
,/**     * Returns true if this object has buffered data for reading.     *     * @param context the context to be used     * @return true if there is data still available for reading.     */,
,"/**     * Converts an array of characters representing hexadecimal values into an array of bytes of those same values. The     * returned array will be half the length of the passed array, as it takes two characters to represent any given     * byte. An exception is thrown if the passed char array has an odd number of elements.     *     * @param data     *            An array of characters containing hexadecimal digits     * @return A byte array containing binary data decoded from the supplied char array.     * @throws DecoderException     *             Thrown if an odd number or illegal of characters is supplied     */",
,"/*     * Returns whether the array contains the key, or not.     */",
,"/**         * Creates a new branch, identical to this branch.         *         * @return a new, identical branch         */",
,"/**     * Handles 'A', 'E', 'I', 'O', 'U', and 'Y' cases.     */",
,/**     * Handles 'C' cases.     */,
,/**     * Handles 'CC' cases.     */,
,/**     * Handles 'CH' cases.     */,
,/**     * Handles 'D' cases.     */,
,/**     * Handles 'G' cases.     */,
,/**     * Handles 'H' cases.     */,
,/**     * Handles 'J' cases.     */,
E,/** True if the entry is expired. */,
E,/** True if a refresh is needed from the original data source. */,
E,"/**     * Forces this dispatcher to quit immediately. If any requests are still in the queue, they are     * not guaranteed to be processed.     */",
E,"/**         * For cacheable requests, if a request for the same cache key is already in flight, add it         * to a queue to wait for that in-flight request to finish.         *         * @return whether the request was queued. If false, we should continue issuing the request         *     over the network. If true, we should put the request on hold to be processed when the         *     in-flight request finishes.         */",
E,"/** Returns true if this policy has attempts remaining, false otherwise. */",
E,/**     * Creates a new network response for an OK response with no headers.     *     * @param data Response body     */,
E,"/**     * Creates a new request with the given method (one of the values from {@link Method}), URL, and     * error listener. Note that the normal response listener is not provided here as delivery of     * responses is provided by subclasses, who have a better idea of how to deliver an     * already-parsed response.     */",
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/** Return the method for this request. Can be one of the values in {@link Method}. */,
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/** Adds an event to this request's event log; for debugging. */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Sets the sequence number of this request. Used by {@link RequestQueue}.     *     * @return This Request object to allow for chaining.     */,
E,/** Reads the contents of an InputStream into a byte[]. */,
E,/**     * Combine cache headers with network response headers for an HTTP 304 response.     *     * <p>An HTTP 304 response does not have all header fields. We have to use the header fields     * from the cache entry plus the new ones from the response. See also:     * http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5     *     * @param responseHeaders Headers from the network response.     * @param entry The cached response.     * @return The combined list of headers.     */,
E,"/**     * Returns a buffer from the pool if one is available in the requested size, or allocates a new     * one if a pooled one is not available.     *     * @param len the minimum size, in bytes, of the requested buffer. The returned buffer may be     *     larger.     * @return a byte[] buffer is always returned.     */",
E,/** Returns a file object for the given cache key. */,
E,/**     * Puts the entry with the specified key into the cache.     *     * @param key The key to identify the entry by.     * @param entry The entry to cache.     */,
E,/** Removes the entry identified by 'key' from the cache. */,
E,/** Creates a cache entry for the specified data. */,
E,/** Returns the HTTP status code of the response. */,
E,/**     * Clear page history for the app.     */,
E,/**     * Determine if log level will be logged     *     * @param logLevel     * @return true if the parameter passed in is greater than or equal to the current log level     */,
E,/**     * Changes the bridge mode.     */,
E,"/**     * Combines and returns queued messages combined into a single string.     * Combines as many messages as possible, while staying under MAX_PAYLOAD_SIZE.     * Returns null if the queue is empty.     */",
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a plugin class that implements a service to the service entry table.     * This does not create the plugin object instance.     *     * @param entry             The plugin entry     */,
E,/**     * Called when the activity is becoming visible to the user.     */,
E,/**     * Called when the activity is no longer visible to the user.     */,
E,/**     * The final call you receive before your activity is destroyed.     */,
E,/**     * Called when the activity receives a new intent.     */,
E,"/**     * Called when the webview is going to request an external resource.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the resource to load,     *                  false to block the resource.     */",
E,"/**     * Called when the webview is going to change the URL of the loaded content.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the navigation,     *                  false to block the navigation.     */",
E,/**     * Called when the webview is requesting the exec() bridge be enabled.     */,
E,"/**     * Called when the webview is going not going to navigate, but may launch     * an Intent for an URL.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the URL to launch an intent,     *                  false to block the intent.     */",
E,"/**     * Called when the URL of the webview changes.     *     * @param url               The URL that is being changed to.     * @return                  Return false to allow the URL to load, return true to prevent the URL from loading.     */",
E,/**     * Create a plugin based on class name.     */,
E,/**     * Called by the system when the device configuration changes while your activity is running.     *     * @param newConfigThe new device configuration     */,
E,/**     * Determine if URL is in approved list of URLs to load.     *     * @param uri     * @return true if wide open or whitelisted     */,
E,/**     * Ask the host application for a custom progress view to show while     * a <video> is loading.     * @return View The progress view.     */,
E,/** Used when created via reflection. */,
E,/** * Create the frame. */,
E,/** * Launch the application. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
N,/**     * This function is run when the robot is first started up and should be     * used for any initialization code.     */,
E,/** * get a new vertex * @return named vertex */,
E,/** * reset to a neutral state */,
E,/** * string representation */,
E,"/** * compare edge to edge * from Comparable, to allow sorting edges by weight */",
E,/** * add edge to forest *  * @param e edge to be added */,
E,/** * remove a tree from the forest *  * @param t tree */,
E,/** Add a new element at the end of this list */,
E,/** Return true if this list contains no elements */,
E,/** Return the number of elements in this list */,
E,/** Remove the first occurrence of the element o from this list.   *  Shift any subsequent elements to the left.   *  Return true if the element is removed. */,
E,/** Create a default list */,
E,/** Create a list from an array of objects */,
E,/** Return the head element in the list */,
E,/** Return the last element in the list */,
E,/** Add an element to the beginning of the list */,
E,/** Add an element to the end of the list */,
E,/** Add a new element at the specified index in this list     * The index of the head element is 0 */,
E,/** Remove the head node and     *  return the object that is contained in the removed node. */,
E,/** Remove the last node and     * return the object that is contained in the removed node. */,
E,/** Remove the element at the specified position in this list.     *  Return the element that was removed from the list. */,
E,/** Clear the list */,
E,"/** Returns true if this linked list contains the element e, otherwise returns false     * @return .*/",
E,"/** Returns the element at specified index of this list, returns null if index is invalid. */",
E,"/** Returns the index of the first matching element in this linked list, return !-1 if no match. */",
E,"/** Returns the index of the last matching element in this list, returns !-1 if no match. */",
E,"/** Replaces the element at specified index in this linked list with the specified element.  Returns the old element at specified index, otherwise returns null if index is invalid. */",
E,/** Main method - DO NOT CHANGE THIS CODE!!!! */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the DisRule wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOver wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameWon wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Life wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Message wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Quit wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Rules wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Story wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Timer wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOverScreen wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**   * Observes the value of any new tiles that was formed   *   * @return   */,
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,/**   * Draws Tiles in a square arrangement   */,
E,/**   * Draws Tiles in a square arrangement   */,
E,/** * Create the frame. */,
E,/** * method that returns the URL passed into this download frame * @return */,
E,/** * returns instance of this download frame * @return */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return musicpath */,
E,/** * this method should read the log file and return imagePath */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/**     * Create a byte array with a specific size filled with specified data.     *     * @param size the size of the byte array.     * @param data the data to put in the byte array.     * @return the JSON byte array.     */,
E,"/**     * Create a User.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which has a required relationship to the User entity.     */",
E,"/**     * Create an entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**     * Create an updated entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**    * Users can call this method to add new points to the plot for this graph.    * Once a point is added, it cannot be removed from the graph. The graph    * class uses lazy evaluation for all plotting functions so nothing will show    * up until a showGraph() method is called.    *     * @param newPoints    *           the array of new points to add to the graph    */",
E,/**    * this methods shows the graph with all of the current points and lines that    * the user added.    */,
E,/**    * this method reads all the data files for the bird names listed in the enum    * Birds and generates a corresponding processed file named:    * [birdName]_out.txt    */,
E,"/** If size = length of d, double the length of array d. <br> * The worst-case time is proportional to the length of d. */",
E,/** Return the size of this heap. <br> * This operation takes constant time. */,
E,"/** Return the shortest path from node v to node end <br>     * ---or the empty list if a path does not exist. <br>     * Note: The empty list is NOT ""null""; it is a list with 0 elements. */",
E,/** Return the direction. */,
E,/** Return a new point that is this point with p added to it. */,
E,/** Return a randomly determined gold value for a given tile. */,
E,"/** Given tiles t without edges and a supplier to return edge weights, <br> * add edges to the nodes between adjacent non-wall tiles. <br> * Precondition: all elements of {@code tiles} are non-null. */",
E,/** Generate a new random graph that fits within the grid and return the set of nodes. */,
E,/** Return the number of open floor tiles in this cavern <br> * (this is the size of the graph). */,
E,/** Return the number of rows in the grid. */,
E,/** Return the number of columns in the grid. */,
E,/** Return the set of all nodes in the graph. <br> * This is an umodifiable view of the graph. */,
E,/** Return the node corresponding to the entrance to the cavern. */,
E,"/** Return the Tile information for tile (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,"/** Return the node at the given (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,/** Return the Node on this edge that is not equal to n. <br> * Throw an IllegalArgumentException if n is not in this Edge. */,
E,/** Return the length of this Edge */,
E,/** Return the source of this edge. */,
E,/** Return destination of edge */,
E,"/** Run through the game, one step at a time. <br>     * Will run scram() only if hunt() succeeds. <br>     * Does not use a timeout and will wait as long as necessary. */",
E,"/** Return the Manhattan distance from (row, col) to the target */",
E,"/** Given seed, whether or not to use the GUI, and an instance <br>     * of a solution to use, run the game. */",
E,/** Return the number of elements in the priority queue.<br> * This operation takes constant time. */,
E,/* * Welcome function will print the greeting message to the screen. */,
E,/** * This Show Menu function will print list of options that user can choose from. */,
E,/** * This addMember function will allow the user to enter a new member. */,
E,/**     * @return the suite of tests being tested     */,
E,"/**    * You can also modify the body of this method to customize your error messages.    * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not    * of end-users concern, so you can return something like :     *    *     ""Internal Error : Please file a bug report .... ""    *    * from this method for such cases in the release version of your parser.    */",
E,/**    * Use this method to add FormatCommands to the command queue to be    * executed when the next token in the tree is visited.    */,
E,/**   * Generate a name for a parameter from the type of the parameter.   *   * @param className  the parameters type   * @return a more or less fitting name.   */,
E,/**   * Gets a container containing the signatures of the delegation   * methods.   *   * @return the value of signatures   */,
E,/**   * Gets the value of signatures   *   * @return the value of signatures   */,
E,/**     * Method that adds a new element to the stack.     *     * @param value - the value to be added     * @return - true if the value was inserted successfully and false otherwise     */,
E,/**     * Method that returns end removes the top element from the stack. Program will close if the stack is empty.     *     * @return - the top element from the stack     */,
E,/**     * @return - the top element from the stack without removing it.     */,
E,/**     * Method that checks if the stack is empty.     *     * @return - true if the stack is empty and false otherwise.     */,
E,/**     * Method that check if the stack is full.     *     * @return - true if the stack is full and false otherwise     */,
E,/**    @Deprecated    reason - we will not be using this anymore     */,
E,/*         * LIST - ordered collection of elements.         * Elements can be accessed by their index.         */,
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/** Puts an X or O mark at position i,j. */",
E,"/** Puts an X or O mark at position i,j. */",
E,/** Checks whether the board configuration is a win for the given player. */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/**     * This is the main swing application method.   It sets up and displays the     * initial GUI, and controls execution thereafter.  Everything else in     * this class is 'private', please read the code.     */",
E,/*     * usage A private static method to display usage information to     * the user before an error exit.     */,
E,"/*     * go This method reads the file, creates the table to display,     * the window to display it in, and displays the window.     * @param fileName the name of the file to read.     * @param tryLines An estimate of the number of lines in     * the file.     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date with the era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of era changed.     *     * @param yearOfEra  the year of era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of century field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of century changed.     *     * @param yearOfCentury  the year of century to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the month of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of year changed.     *     * @param dayOfYear  the day of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of month field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of week field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of week changed.     *     * @param dayOfWeek  the day of week to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Returns a copy of this date with a different chronology, potentially     * changing the day in unexpected ways.     * <p>     * This method creates a new DateMidnight using the midnight millisecond value     * and the new chronology. If the same or similar chronology is specified, but     * with a different time zone, the day may change. This occurs because the new     * DateMidnight rounds down the millisecond value to get to midnight, and the     * time zone change may result in a rounding down to a different day.     * <p>     * For example, changing time zone from London (+00:00) to Paris (+01:00) will     * retain the same day, but changing from Paris to London will change the day.     * (When its midnight in London its the same day in Paris, but when its midnight     * in Paris its still the previous day in London)     * <p>     * To avoid these unusual effects, use {@link #withZoneRetainFields(DateTimeZone)}     * to change time zones.     *     * @param newChronology",the new chronology     * @return a copy of this instant with a different chronology     */
E,"/**     * Returns a copy of this date with a different time zone, preserving the day     * The returned object will have a local time of midnight in the new zone on     * the same day as the original instant.     *     * @param newZone  the new time zone, null means default     * @return a copy of this instant with a different time zone     */",
E,"/**     * Returns a copy of this date with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>LocalDate</code> then the date fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this datetime with the era field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the year field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the hour of day field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * hour of day changed.     *     * @param hour  the hour of day to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the minute of hour updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * minute of hour changed.     *     * @param minute  the minute of hour to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the second of minute field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * second of minute changed.     *     * @param second  the second of minute to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Gets the field being used.         *          * @return the field         */,
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this         * DateTime.  If halfway, the ceiling is favored over the floor only if         * it makes this field's value even.         *         * @return a copy of the DateTime with the field value changed         */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,/**         * Gets the current time.         * @return the current time in millis         */,
E,"/**     * Gets the default time zone.     * <p>     * The default time zone is derived from the system property {@code user.timezone}.     * If that is {@code null} or is not a valid identifier, then the value of the     * JDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.     * <p>     * NOTE: If the {@code java.util.TimeZone} default is updated <i>after</i> calling this     * method, then the change will not be picked up here.     *      * @return the default datetime zone object     */",
E,/**     * Gets all the available IDs supported.     *      * @return an unmodifiable Set of String IDs     */,
E,/**     * Gets the zone provider factory.     * <p>     * The zone provider is a pluggable instance factory that supplies the     * actual instances of DateTimeZone.     *      * @return the provider     */,
E,"/**     * Sets the zone provider factory without performing the security check.     *      * @param provider  provider to use, or null for default     * @throws IllegalArgumentException if the provider is invalid     */",
E,/**     * Gets the name provider factory.     * <p>     * The name provider is a pluggable instance factory that supplies the     * names of each DateTimeZone.     *      * @return the provider     */,
E,/**     * Gets the default name provider.     * <p>     * Tries the system property <code>org.joda.time.DateTimeZone.NameProvider</code>.     * Then uses <code>DefaultNameProvider</code>.     *      * @return the default name provider     */,
E,"/**     * Converts an old style id to a new style id.     *      * @param id  the old style id     * @return the new style id, null if not found     */",
E,"/**     * Gets the duration field type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Gets the period type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Converts this period in minutes to a period in weeks assuming a     * 7 days week, 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all weeks are     * 7 days long, all days are 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole weeks for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in days assuming a     * 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all days are     * 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole days for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in hours assuming a     * 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all hours are     * 60 minutes long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of hours for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in seconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of seconds for this number of minutes     * @throws ArithmeticException if the number of seconds is too large to be represented     */",
E,"/**     * Converts this period in minutes to a duration in milliseconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert from a period to a duration.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long. This might not be true for an unusual chronology,     * for example one that takes leap seconds into account.     * However, the method is included as it is a useful operation for many     * applications and business rules.     *     * @return a duration equivalent to this number of minutes     */",
E,/**     * Gets the number of minutes that this period represents.     *     * @return the number of minutes in the period     */,
E,"/**     * Returns a new instance with the specified number of minutes added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to add, may be negative, null means zero     * @return the new period plus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of minutes taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to take away, may be negative, null means zero     * @return the new period minus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Is this minutes instance greater than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is greater than the specified one     */",
E,"/**     * Is this minutes instance less than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is less than the specified one     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Handle broken serialization from other tools.     * @return the resolved object, not null     */",
E,"/**     * Gets the number of fields in this partial, which is two.     * The supported fields are MonthOfYear and DayOfMonth.     * Note that only these fields may be queried.     *     * @return the field count, two     */",
E,/**         * Gets the field that this property uses.         *          * @return the field         */,
E,"/**     * Gets the field type at the specified index.     *     * @param index  the index to retrieve     * @return the field at the specified index, never null     * @throws IndexOutOfBoundsException if the index is invalid     */",
E,"/**     * Gets an array of the field type of each of the fields that this partial supports.     * <p>     * The fields are returned largest to smallest, Month, Day.     *     * @return the array of field types (cloned), largest to smallest, never null     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,/**     * Get the month of year field value.     *     * @return the month of year     */,
E,/**     * Get the day of month field value.     *     * @return the day of month     */,
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Gets the property object for the specified type, which contains     * many useful methods.     *     * @param type  the field type to get the property for     * @return the property object     * @throws IllegalArgumentException if the field is null or unsupported     */",
E,/**     * Get the month of year field property which provides access to advanced functionality.     *      * @return the month of year property     */,
E,/**     * Get the day of month field property which provides access to advanced functionality.     *      * @return the day of month property     */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the value of this field.         *          * @return the field value         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative, null means zero     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative, null means zero     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,/** * Returns * the title over the image * @return */,
N,/**     * @return the suite of tests being tested     */,
E,/* play a card */,
E,/* play a card */,
,/**     * Returns true if this object has buffered data for reading.     *     * @param context the context to be used     * @return true if there is data still available for reading.     */,
,"/**     * Converts an array of characters representing hexadecimal values into an array of bytes of those same values. The     * returned array will be half the length of the passed array, as it takes two characters to represent any given     * byte. An exception is thrown if the passed char array has an odd number of elements.     *     * @param data     *            An array of characters containing hexadecimal digits     * @return A byte array containing binary data decoded from the supplied char array.     * @throws DecoderException     *             Thrown if an odd number or illegal of characters is supplied     */",
,"/*     * Returns whether the array contains the key, or not.     */",
,"/**         * Creates a new branch, identical to this branch.         *         * @return a new, identical branch         */",
,"/**     * Handles 'A', 'E', 'I', 'O', 'U', and 'Y' cases.     */",
,/**     * Handles 'C' cases.     */,
,/**     * Handles 'CC' cases.     */,
,/**     * Handles 'CH' cases.     */,
,/**     * Handles 'D' cases.     */,
,/**     * Handles 'G' cases.     */,
,/**     * Handles 'H' cases.     */,
,/**     * Handles 'J' cases.     */,
E,/** True if the entry is expired. */,
E,/** True if a refresh is needed from the original data source. */,
E,"/**     * Forces this dispatcher to quit immediately. If any requests are still in the queue, they are     * not guaranteed to be processed.     */",
E,"/**         * For cacheable requests, if a request for the same cache key is already in flight, add it         * to a queue to wait for that in-flight request to finish.         *         * @return whether the request was queued. If false, we should continue issuing the request         *     over the network. If true, we should put the request on hold to be processed when the         *     in-flight request finishes.         */",
E,"/** Returns true if this policy has attempts remaining, false otherwise. */",
E,/**     * Creates a new network response for an OK response with no headers.     *     * @param data Response body     */,
E,"/**     * Creates a new request with the given method (one of the values from {@link Method}), URL, and     * error listener. Note that the normal response listener is not provided here as delivery of     * responses is provided by subclasses, who have a better idea of how to deliver an     * already-parsed response.     */",
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/** Return the method for this request. Can be one of the values in {@link Method}. */,
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/** Adds an event to this request's event log; for debugging. */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Sets the sequence number of this request. Used by {@link RequestQueue}.     *     * @return This Request object to allow for chaining.     */,
E,/** Reads the contents of an InputStream into a byte[]. */,
E,/**     * Combine cache headers with network response headers for an HTTP 304 response.     *     * <p>An HTTP 304 response does not have all header fields. We have to use the header fields     * from the cache entry plus the new ones from the response. See also:     * http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5     *     * @param responseHeaders Headers from the network response.     * @param entry The cached response.     * @return The combined list of headers.     */,
E,"/**     * Returns a buffer from the pool if one is available in the requested size, or allocates a new     * one if a pooled one is not available.     *     * @param len the minimum size, in bytes, of the requested buffer. The returned buffer may be     *     larger.     * @return a byte[] buffer is always returned.     */",
E,/** Returns a file object for the given cache key. */,
E,/**     * Puts the entry with the specified key into the cache.     *     * @param key The key to identify the entry by.     * @param entry The entry to cache.     */,
E,/** Removes the entry identified by 'key' from the cache. */,
E,/** Creates a cache entry for the specified data. */,
E,/** Returns the HTTP status code of the response. */,
E,/**     * Clear page history for the app.     */,
E,/**     * Determine if log level will be logged     *     * @param logLevel     * @return true if the parameter passed in is greater than or equal to the current log level     */,
E,/**     * Changes the bridge mode.     */,
E,"/**     * Combines and returns queued messages combined into a single string.     * Combines as many messages as possible, while staying under MAX_PAYLOAD_SIZE.     * Returns null if the queue is empty.     */",
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a plugin class that implements a service to the service entry table.     * This does not create the plugin object instance.     *     * @param entry             The plugin entry     */,
E,/**     * Called when the activity is becoming visible to the user.     */,
E,/**     * Called when the activity is no longer visible to the user.     */,
E,/**     * The final call you receive before your activity is destroyed.     */,
E,/**     * Called when the activity receives a new intent.     */,
E,"/**     * Called when the webview is going to request an external resource.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the resource to load,     *                  false to block the resource.     */",
E,"/**     * Called when the webview is going to change the URL of the loaded content.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the navigation,     *                  false to block the navigation.     */",
E,/**     * Called when the webview is requesting the exec() bridge be enabled.     */,
E,"/**     * Called when the webview is going not going to navigate, but may launch     * an Intent for an URL.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the URL to launch an intent,     *                  false to block the intent.     */",
E,"/**     * Called when the URL of the webview changes.     *     * @param url               The URL that is being changed to.     * @return                  Return false to allow the URL to load, return true to prevent the URL from loading.     */",
E,/**     * Create a plugin based on class name.     */,
E,/**     * Called by the system when the device configuration changes while your activity is running.     *     * @param newConfigThe new device configuration     */,
E,/**     * Determine if URL is in approved list of URLs to load.     *     * @param uri     * @return true if wide open or whitelisted     */,
E,/**     * Ask the host application for a custom progress view to show while     * a <video> is loading.     * @return View The progress view.     */,
E,/** Used when created via reflection. */,
E,/** * Create the frame. */,
E,/** * Launch the application. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
N,/**     * This function is run when the robot is first started up and should be     * used for any initialization code.     */,
E,/** * get a new vertex * @return named vertex */,
E,/** * reset to a neutral state */,
E,/** * string representation */,
E,"/** * compare edge to edge * from Comparable, to allow sorting edges by weight */",
E,/** * add edge to forest *  * @param e edge to be added */,
E,/** * remove a tree from the forest *  * @param t tree */,
E,/** Add a new element at the end of this list */,
E,/** Return true if this list contains no elements */,
E,/** Return the number of elements in this list */,
E,/** Remove the first occurrence of the element o from this list.   *  Shift any subsequent elements to the left.   *  Return true if the element is removed. */,
E,/** Create a default list */,
E,/** Create a list from an array of objects */,
E,/** Return the head element in the list */,
E,/** Return the last element in the list */,
E,/** Add an element to the beginning of the list */,
E,/** Add an element to the end of the list */,
E,/** Add a new element at the specified index in this list     * The index of the head element is 0 */,
E,/** Remove the head node and     *  return the object that is contained in the removed node. */,
E,/** Remove the last node and     * return the object that is contained in the removed node. */,
E,/** Remove the element at the specified position in this list.     *  Return the element that was removed from the list. */,
E,/** Clear the list */,
E,"/** Returns true if this linked list contains the element e, otherwise returns false     * @return .*/",
E,"/** Returns the element at specified index of this list, returns null if index is invalid. */",
E,"/** Returns the index of the first matching element in this linked list, return !-1 if no match. */",
E,"/** Returns the index of the last matching element in this list, returns !-1 if no match. */",
E,"/** Replaces the element at specified index in this linked list with the specified element.  Returns the old element at specified index, otherwise returns null if index is invalid. */",
E,/** Main method - DO NOT CHANGE THIS CODE!!!! */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the DisRule wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOver wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameWon wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Life wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Message wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Quit wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Rules wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Story wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Timer wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOverScreen wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**   * Observes the value of any new tiles that was formed   *   * @return   */,
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,/**   * Draws Tiles in a square arrangement   */,
E,/**   * Draws Tiles in a square arrangement   */,
E,/** * Create the frame. */,
E,/** * method that returns the URL passed into this download frame * @return */,
E,/** * returns instance of this download frame * @return */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return musicpath */,
E,/** * this method should read the log file and return imagePath */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/**     * Create a byte array with a specific size filled with specified data.     *     * @param size the size of the byte array.     * @param data the data to put in the byte array.     * @return the JSON byte array.     */,
E,"/**     * Create a User.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which has a required relationship to the User entity.     */",
E,"/**     * Create an entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**     * Create an updated entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**    * Users can call this method to add new points to the plot for this graph.    * Once a point is added, it cannot be removed from the graph. The graph    * class uses lazy evaluation for all plotting functions so nothing will show    * up until a showGraph() method is called.    *     * @param newPoints    *           the array of new points to add to the graph    */",
E,/**    * this methods shows the graph with all of the current points and lines that    * the user added.    */,
E,/**    * this method reads all the data files for the bird names listed in the enum    * Birds and generates a corresponding processed file named:    * [birdName]_out.txt    */,
E,"/** If size = length of d, double the length of array d. <br> * The worst-case time is proportional to the length of d. */",
E,/** Return the size of this heap. <br> * This operation takes constant time. */,
E,"/** Return the shortest path from node v to node end <br>     * ---or the empty list if a path does not exist. <br>     * Note: The empty list is NOT ""null""; it is a list with 0 elements. */",
E,/** Return the direction. */,
E,/** Return a new point that is this point with p added to it. */,
E,/** Return a randomly determined gold value for a given tile. */,
E,"/** Given tiles t without edges and a supplier to return edge weights, <br> * add edges to the nodes between adjacent non-wall tiles. <br> * Precondition: all elements of {@code tiles} are non-null. */",
E,/** Generate a new random graph that fits within the grid and return the set of nodes. */,
E,/** Return the number of open floor tiles in this cavern <br> * (this is the size of the graph). */,
E,/** Return the number of rows in the grid. */,
E,/** Return the number of columns in the grid. */,
E,/** Return the set of all nodes in the graph. <br> * This is an umodifiable view of the graph. */,
E,/** Return the node corresponding to the entrance to the cavern. */,
E,"/** Return the Tile information for tile (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,"/** Return the node at the given (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,/** Return the Node on this edge that is not equal to n. <br> * Throw an IllegalArgumentException if n is not in this Edge. */,
E,/** Return the length of this Edge */,
E,/** Return the source of this edge. */,
E,/** Return destination of edge */,
E,"/** Run through the game, one step at a time. <br>     * Will run scram() only if hunt() succeeds. <br>     * Does not use a timeout and will wait as long as necessary. */",
E,"/** Return the Manhattan distance from (row, col) to the target */",
E,"/** Given seed, whether or not to use the GUI, and an instance <br>     * of a solution to use, run the game. */",
E,/** Return the number of elements in the priority queue.<br> * This operation takes constant time. */,
E,/* * Welcome function will print the greeting message to the screen. */,
E,/** * This Show Menu function will print list of options that user can choose from. */,
E,/** * This addMember function will allow the user to enter a new member. */,
E,/**     * @return the suite of tests being tested     */,
E,"/**    * You can also modify the body of this method to customize your error messages.    * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not    * of end-users concern, so you can return something like :     *    *     ""Internal Error : Please file a bug report .... ""    *    * from this method for such cases in the release version of your parser.    */",
E,/**    * Use this method to add FormatCommands to the command queue to be    * executed when the next token in the tree is visited.    */,
E,/**   * Generate a name for a parameter from the type of the parameter.   *   * @param className  the parameters type   * @return a more or less fitting name.   */,
E,/**   * Gets a container containing the signatures of the delegation   * methods.   *   * @return the value of signatures   */,
E,/**   * Gets the value of signatures   *   * @return the value of signatures   */,
E,/**     * Method that adds a new element to the stack.     *     * @param value - the value to be added     * @return - true if the value was inserted successfully and false otherwise     */,
E,/**     * Method that returns end removes the top element from the stack. Program will close if the stack is empty.     *     * @return - the top element from the stack     */,
E,/**     * @return - the top element from the stack without removing it.     */,
E,/**     * Method that checks if the stack is empty.     *     * @return - true if the stack is empty and false otherwise.     */,
E,/**     * Method that check if the stack is full.     *     * @return - true if the stack is full and false otherwise     */,
E,/**    @Deprecated    reason - we will not be using this anymore     */,
E,/*         * LIST - ordered collection of elements.         * Elements can be accessed by their index.         */,
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/** Puts an X or O mark at position i,j. */",
E,"/** Puts an X or O mark at position i,j. */",
E,/** Checks whether the board configuration is a win for the given player. */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/**     * This is the main swing application method.   It sets up and displays the     * initial GUI, and controls execution thereafter.  Everything else in     * this class is 'private', please read the code.     */",
E,/*     * usage A private static method to display usage information to     * the user before an error exit.     */,
E,"/*     * go This method reads the file, creates the table to display,     * the window to display it in, and displays the window.     * @param fileName the name of the file to read.     * @param tryLines An estimate of the number of lines in     * the file.     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date with the era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of era changed.     *     * @param yearOfEra  the year of era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of century field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of century changed.     *     * @param yearOfCentury  the year of century to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the month of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of year changed.     *     * @param dayOfYear  the day of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of month field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of week field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of week changed.     *     * @param dayOfWeek  the day of week to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Returns a copy of this date with a different chronology, potentially     * changing the day in unexpected ways.     * <p>     * This method creates a new DateMidnight using the midnight millisecond value     * and the new chronology. If the same or similar chronology is specified, but     * with a different time zone, the day may change. This occurs because the new     * DateMidnight rounds down the millisecond value to get to midnight, and the     * time zone change may result in a rounding down to a different day.     * <p>     * For example, changing time zone from London (+00:00) to Paris (+01:00) will     * retain the same day, but changing from Paris to London will change the day.     * (When its midnight in London its the same day in Paris, but when its midnight     * in Paris its still the previous day in London)     * <p>     * To avoid these unusual effects, use {@link #withZoneRetainFields(DateTimeZone)}     * to change time zones.     *     * @param newChronology",the new chronology     * @return a copy of this instant with a different chronology     */
E,"/**     * Returns a copy of this date with a different time zone, preserving the day     * The returned object will have a local time of midnight in the new zone on     * the same day as the original instant.     *     * @param newZone  the new time zone, null means default     * @return a copy of this instant with a different time zone     */",
E,"/**     * Returns a copy of this date with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>LocalDate</code> then the date fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this datetime with the era field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the year field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the hour of day field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * hour of day changed.     *     * @param hour  the hour of day to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the minute of hour updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * minute of hour changed.     *     * @param minute  the minute of hour to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the second of minute field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * second of minute changed.     *     * @param second  the second of minute to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Gets the field being used.         *          * @return the field         */,
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this         * DateTime.  If halfway, the ceiling is favored over the floor only if         * it makes this field's value even.         *         * @return a copy of the DateTime with the field value changed         */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,/**         * Gets the current time.         * @return the current time in millis         */,
E,"/**     * Gets the default time zone.     * <p>     * The default time zone is derived from the system property {@code user.timezone}.     * If that is {@code null} or is not a valid identifier, then the value of the     * JDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.     * <p>     * NOTE: If the {@code java.util.TimeZone} default is updated <i>after</i> calling this     * method, then the change will not be picked up here.     *      * @return the default datetime zone object     */",
E,/**     * Gets all the available IDs supported.     *      * @return an unmodifiable Set of String IDs     */,
E,/**     * Gets the zone provider factory.     * <p>     * The zone provider is a pluggable instance factory that supplies the     * actual instances of DateTimeZone.     *      * @return the provider     */,
E,"/**     * Sets the zone provider factory without performing the security check.     *      * @param provider  provider to use, or null for default     * @throws IllegalArgumentException if the provider is invalid     */",
E,/**     * Gets the name provider factory.     * <p>     * The name provider is a pluggable instance factory that supplies the     * names of each DateTimeZone.     *      * @return the provider     */,
E,/**     * Gets the default name provider.     * <p>     * Tries the system property <code>org.joda.time.DateTimeZone.NameProvider</code>.     * Then uses <code>DefaultNameProvider</code>.     *      * @return the default name provider     */,
E,"/**     * Converts an old style id to a new style id.     *      * @param id  the old style id     * @return the new style id, null if not found     */",
E,"/**     * Gets the duration field type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Gets the period type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Converts this period in minutes to a period in weeks assuming a     * 7 days week, 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all weeks are     * 7 days long, all days are 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole weeks for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in days assuming a     * 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all days are     * 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole days for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in hours assuming a     * 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all hours are     * 60 minutes long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of hours for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in seconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of seconds for this number of minutes     * @throws ArithmeticException if the number of seconds is too large to be represented     */",
E,"/**     * Converts this period in minutes to a duration in milliseconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert from a period to a duration.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long. This might not be true for an unusual chronology,     * for example one that takes leap seconds into account.     * However, the method is included as it is a useful operation for many     * applications and business rules.     *     * @return a duration equivalent to this number of minutes     */",
E,/**     * Gets the number of minutes that this period represents.     *     * @return the number of minutes in the period     */,
E,"/**     * Returns a new instance with the specified number of minutes added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to add, may be negative, null means zero     * @return the new period plus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of minutes taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to take away, may be negative, null means zero     * @return the new period minus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Is this minutes instance greater than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is greater than the specified one     */",
E,"/**     * Is this minutes instance less than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is less than the specified one     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Handle broken serialization from other tools.     * @return the resolved object, not null     */",
E,"/**     * Gets the number of fields in this partial, which is two.     * The supported fields are MonthOfYear and DayOfMonth.     * Note that only these fields may be queried.     *     * @return the field count, two     */",
E,/**         * Gets the field that this property uses.         *          * @return the field         */,
E,"/**     * Gets the field type at the specified index.     *     * @param index  the index to retrieve     * @return the field at the specified index, never null     * @throws IndexOutOfBoundsException if the index is invalid     */",
E,"/**     * Gets an array of the field type of each of the fields that this partial supports.     * <p>     * The fields are returned largest to smallest, Month, Day.     *     * @return the array of field types (cloned), largest to smallest, never null     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,/**     * Get the month of year field value.     *     * @return the month of year     */,
E,/**     * Get the day of month field value.     *     * @return the day of month     */,
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Gets the property object for the specified type, which contains     * many useful methods.     *     * @param type  the field type to get the property for     * @return the property object     * @throws IllegalArgumentException if the field is null or unsupported     */",
E,/**     * Get the month of year field property which provides access to advanced functionality.     *      * @return the month of year property     */,
E,/**     * Get the day of month field property which provides access to advanced functionality.     *      * @return the day of month property     */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the value of this field.         *          * @return the field value         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative, null means zero     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative, null means zero     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,/** * Returns * the title over the image * @return */,
N,/**     * @return the suite of tests being tested     */,
E,/* play a card */,
E,/* play a card */,
,/**     * Returns true if this object has buffered data for reading.     *     * @param context the context to be used     * @return true if there is data still available for reading.     */,
,"/**     * Converts an array of characters representing hexadecimal values into an array of bytes of those same values. The     * returned array will be half the length of the passed array, as it takes two characters to represent any given     * byte. An exception is thrown if the passed char array has an odd number of elements.     *     * @param data     *            An array of characters containing hexadecimal digits     * @return A byte array containing binary data decoded from the supplied char array.     * @throws DecoderException     *             Thrown if an odd number or illegal of characters is supplied     */",
,"/*     * Returns whether the array contains the key, or not.     */",
,"/**         * Creates a new branch, identical to this branch.         *         * @return a new, identical branch         */",
,"/**     * Handles 'A', 'E', 'I', 'O', 'U', and 'Y' cases.     */",
,/**     * Handles 'C' cases.     */,
,/**     * Handles 'CC' cases.     */,
,/**     * Handles 'CH' cases.     */,
,/**     * Handles 'D' cases.     */,
,/**     * Handles 'G' cases.     */,
,/**     * Handles 'H' cases.     */,
,/**     * Handles 'J' cases.     */,
E,/** True if the entry is expired. */,
E,/** True if a refresh is needed from the original data source. */,
E,"/**     * Forces this dispatcher to quit immediately. If any requests are still in the queue, they are     * not guaranteed to be processed.     */",
E,"/**         * For cacheable requests, if a request for the same cache key is already in flight, add it         * to a queue to wait for that in-flight request to finish.         *         * @return whether the request was queued. If false, we should continue issuing the request         *     over the network. If true, we should put the request on hold to be processed when the         *     in-flight request finishes.         */",
E,"/** Returns true if this policy has attempts remaining, false otherwise. */",
E,/**     * Creates a new network response for an OK response with no headers.     *     * @param data Response body     */,
E,"/**     * Creates a new request with the given method (one of the values from {@link Method}), URL, and     * error listener. Note that the normal response listener is not provided here as delivery of     * responses is provided by subclasses, who have a better idea of how to deliver an     * already-parsed response.     */",
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/** Return the method for this request. Can be one of the values in {@link Method}. */,
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/** Adds an event to this request's event log; for debugging. */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Sets the sequence number of this request. Used by {@link RequestQueue}.     *     * @return This Request object to allow for chaining.     */,
E,/** Reads the contents of an InputStream into a byte[]. */,
E,/**     * Combine cache headers with network response headers for an HTTP 304 response.     *     * <p>An HTTP 304 response does not have all header fields. We have to use the header fields     * from the cache entry plus the new ones from the response. See also:     * http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5     *     * @param responseHeaders Headers from the network response.     * @param entry The cached response.     * @return The combined list of headers.     */,
E,"/**     * Returns a buffer from the pool if one is available in the requested size, or allocates a new     * one if a pooled one is not available.     *     * @param len the minimum size, in bytes, of the requested buffer. The returned buffer may be     *     larger.     * @return a byte[] buffer is always returned.     */",
E,/** Returns a file object for the given cache key. */,
E,/**     * Puts the entry with the specified key into the cache.     *     * @param key The key to identify the entry by.     * @param entry The entry to cache.     */,
E,/** Removes the entry identified by 'key' from the cache. */,
E,/** Creates a cache entry for the specified data. */,
E,/** Returns the HTTP status code of the response. */,
E,/**     * Clear page history for the app.     */,
E,/**     * Determine if log level will be logged     *     * @param logLevel     * @return true if the parameter passed in is greater than or equal to the current log level     */,
E,/**     * Changes the bridge mode.     */,
E,"/**     * Combines and returns queued messages combined into a single string.     * Combines as many messages as possible, while staying under MAX_PAYLOAD_SIZE.     * Returns null if the queue is empty.     */",
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a plugin class that implements a service to the service entry table.     * This does not create the plugin object instance.     *     * @param entry             The plugin entry     */,
E,/**     * Called when the activity is becoming visible to the user.     */,
E,/**     * Called when the activity is no longer visible to the user.     */,
E,/**     * The final call you receive before your activity is destroyed.     */,
E,/**     * Called when the activity receives a new intent.     */,
E,"/**     * Called when the webview is going to request an external resource.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the resource to load,     *                  false to block the resource.     */",
E,"/**     * Called when the webview is going to change the URL of the loaded content.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the navigation,     *                  false to block the navigation.     */",
E,/**     * Called when the webview is requesting the exec() bridge be enabled.     */,
E,"/**     * Called when the webview is going not going to navigate, but may launch     * an Intent for an URL.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the URL to launch an intent,     *                  false to block the intent.     */",
E,"/**     * Called when the URL of the webview changes.     *     * @param url               The URL that is being changed to.     * @return                  Return false to allow the URL to load, return true to prevent the URL from loading.     */",
E,/**     * Create a plugin based on class name.     */,
E,/**     * Called by the system when the device configuration changes while your activity is running.     *     * @param newConfigThe new device configuration     */,
E,/**     * Determine if URL is in approved list of URLs to load.     *     * @param uri     * @return true if wide open or whitelisted     */,
E,/**     * Ask the host application for a custom progress view to show while     * a <video> is loading.     * @return View The progress view.     */,
E,/** Used when created via reflection. */,
E,/** * Create the frame. */,
E,/** * Launch the application. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
N,/**     * This function is run when the robot is first started up and should be     * used for any initialization code.     */,
E,/** * get a new vertex * @return named vertex */,
E,/** * reset to a neutral state */,
E,/** * string representation */,
E,"/** * compare edge to edge * from Comparable, to allow sorting edges by weight */",
E,/** * add edge to forest *  * @param e edge to be added */,
E,/** * remove a tree from the forest *  * @param t tree */,
E,/** Add a new element at the end of this list */,
E,/** Return true if this list contains no elements */,
E,/** Return the number of elements in this list */,
E,/** Remove the first occurrence of the element o from this list.   *  Shift any subsequent elements to the left.   *  Return true if the element is removed. */,
E,/** Create a default list */,
E,/** Create a list from an array of objects */,
E,/** Return the head element in the list */,
E,/** Return the last element in the list */,
E,/** Add an element to the beginning of the list */,
E,/** Add an element to the end of the list */,
E,/** Add a new element at the specified index in this list     * The index of the head element is 0 */,
E,/** Remove the head node and     *  return the object that is contained in the removed node. */,
E,/** Remove the last node and     * return the object that is contained in the removed node. */,
E,/** Remove the element at the specified position in this list.     *  Return the element that was removed from the list. */,
E,/** Clear the list */,
E,"/** Returns true if this linked list contains the element e, otherwise returns false     * @return .*/",
E,"/** Returns the element at specified index of this list, returns null if index is invalid. */",
E,"/** Returns the index of the first matching element in this linked list, return !-1 if no match. */",
E,"/** Returns the index of the last matching element in this list, returns !-1 if no match. */",
E,"/** Replaces the element at specified index in this linked list with the specified element.  Returns the old element at specified index, otherwise returns null if index is invalid. */",
E,/** Main method - DO NOT CHANGE THIS CODE!!!! */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the DisRule wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOver wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameWon wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Life wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Message wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Quit wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Rules wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Story wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Timer wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOverScreen wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**   * Observes the value of any new tiles that was formed   *   * @return   */,
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,/**   * Draws Tiles in a square arrangement   */,
E,/**   * Draws Tiles in a square arrangement   */,
E,/** * Create the frame. */,
E,/** * method that returns the URL passed into this download frame * @return */,
E,/** * returns instance of this download frame * @return */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return musicpath */,
E,/** * this method should read the log file and return imagePath */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/**     * Create a byte array with a specific size filled with specified data.     *     * @param size the size of the byte array.     * @param data the data to put in the byte array.     * @return the JSON byte array.     */,
E,"/**     * Create a User.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which has a required relationship to the User entity.     */",
E,"/**     * Create an entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**     * Create an updated entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**    * Users can call this method to add new points to the plot for this graph.    * Once a point is added, it cannot be removed from the graph. The graph    * class uses lazy evaluation for all plotting functions so nothing will show    * up until a showGraph() method is called.    *     * @param newPoints    *           the array of new points to add to the graph    */",
E,/**    * this methods shows the graph with all of the current points and lines that    * the user added.    */,
E,/**    * this method reads all the data files for the bird names listed in the enum    * Birds and generates a corresponding processed file named:    * [birdName]_out.txt    */,
E,"/** If size = length of d, double the length of array d. <br> * The worst-case time is proportional to the length of d. */",
E,/** Return the size of this heap. <br> * This operation takes constant time. */,
E,"/** Return the shortest path from node v to node end <br>     * ---or the empty list if a path does not exist. <br>     * Note: The empty list is NOT ""null""; it is a list with 0 elements. */",
E,/** Return the direction. */,
E,/** Return a new point that is this point with p added to it. */,
E,/** Return a randomly determined gold value for a given tile. */,
E,"/** Given tiles t without edges and a supplier to return edge weights, <br> * add edges to the nodes between adjacent non-wall tiles. <br> * Precondition: all elements of {@code tiles} are non-null. */",
E,/** Generate a new random graph that fits within the grid and return the set of nodes. */,
E,/** Return the number of open floor tiles in this cavern <br> * (this is the size of the graph). */,
E,/** Return the number of rows in the grid. */,
E,/** Return the number of columns in the grid. */,
E,/** Return the set of all nodes in the graph. <br> * This is an umodifiable view of the graph. */,
E,/** Return the node corresponding to the entrance to the cavern. */,
E,"/** Return the Tile information for tile (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,"/** Return the node at the given (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,/** Return the Node on this edge that is not equal to n. <br> * Throw an IllegalArgumentException if n is not in this Edge. */,
E,/** Return the length of this Edge */,
E,/** Return the source of this edge. */,
E,/** Return destination of edge */,
E,"/** Run through the game, one step at a time. <br>     * Will run scram() only if hunt() succeeds. <br>     * Does not use a timeout and will wait as long as necessary. */",
E,"/** Return the Manhattan distance from (row, col) to the target */",
E,"/** Given seed, whether or not to use the GUI, and an instance <br>     * of a solution to use, run the game. */",
E,/** Return the number of elements in the priority queue.<br> * This operation takes constant time. */,
E,/* * Welcome function will print the greeting message to the screen. */,
E,/** * This Show Menu function will print list of options that user can choose from. */,
E,/** * This addMember function will allow the user to enter a new member. */,
E,/**     * @return the suite of tests being tested     */,
E,"/**    * You can also modify the body of this method to customize your error messages.    * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not    * of end-users concern, so you can return something like :     *    *     ""Internal Error : Please file a bug report .... ""    *    * from this method for such cases in the release version of your parser.    */",
E,/**    * Use this method to add FormatCommands to the command queue to be    * executed when the next token in the tree is visited.    */,
E,/**   * Generate a name for a parameter from the type of the parameter.   *   * @param className  the parameters type   * @return a more or less fitting name.   */,
E,/**   * Gets a container containing the signatures of the delegation   * methods.   *   * @return the value of signatures   */,
E,/**   * Gets the value of signatures   *   * @return the value of signatures   */,
E,/**     * Method that adds a new element to the stack.     *     * @param value - the value to be added     * @return - true if the value was inserted successfully and false otherwise     */,
E,/**     * Method that returns end removes the top element from the stack. Program will close if the stack is empty.     *     * @return - the top element from the stack     */,
E,/**     * @return - the top element from the stack without removing it.     */,
E,/**     * Method that checks if the stack is empty.     *     * @return - true if the stack is empty and false otherwise.     */,
E,/**     * Method that check if the stack is full.     *     * @return - true if the stack is full and false otherwise     */,
E,/**    @Deprecated    reason - we will not be using this anymore     */,
E,/*         * LIST - ordered collection of elements.         * Elements can be accessed by their index.         */,
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/** Puts an X or O mark at position i,j. */",
E,"/** Puts an X or O mark at position i,j. */",
E,/** Checks whether the board configuration is a win for the given player. */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/**     * This is the main swing application method.   It sets up and displays the     * initial GUI, and controls execution thereafter.  Everything else in     * this class is 'private', please read the code.     */",
E,/*     * usage A private static method to display usage information to     * the user before an error exit.     */,
E,"/*     * go This method reads the file, creates the table to display,     * the window to display it in, and displays the window.     * @param fileName the name of the file to read.     * @param tryLines An estimate of the number of lines in     * the file.     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date with the era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of era changed.     *     * @param yearOfEra  the year of era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of century field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of century changed.     *     * @param yearOfCentury  the year of century to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the month of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of year changed.     *     * @param dayOfYear  the day of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of month field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of week field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of week changed.     *     * @param dayOfWeek  the day of week to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Returns a copy of this date with a different chronology, potentially     * changing the day in unexpected ways.     * <p>     * This method creates a new DateMidnight using the midnight millisecond value     * and the new chronology. If the same or similar chronology is specified, but     * with a different time zone, the day may change. This occurs because the new     * DateMidnight rounds down the millisecond value to get to midnight, and the     * time zone change may result in a rounding down to a different day.     * <p>     * For example, changing time zone from London (+00:00) to Paris (+01:00) will     * retain the same day, but changing from Paris to London will change the day.     * (When its midnight in London its the same day in Paris, but when its midnight     * in Paris its still the previous day in London)     * <p>     * To avoid these unusual effects, use {@link #withZoneRetainFields(DateTimeZone)}     * to change time zones.     *     * @param newChronology",the new chronology     * @return a copy of this instant with a different chronology     */
E,"/**     * Returns a copy of this date with a different time zone, preserving the day     * The returned object will have a local time of midnight in the new zone on     * the same day as the original instant.     *     * @param newZone  the new time zone, null means default     * @return a copy of this instant with a different time zone     */",
E,"/**     * Returns a copy of this date with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>LocalDate</code> then the date fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this datetime with the era field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the year field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the hour of day field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * hour of day changed.     *     * @param hour  the hour of day to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the minute of hour updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * minute of hour changed.     *     * @param minute  the minute of hour to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the second of minute field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * second of minute changed.     *     * @param second  the second of minute to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Gets the field being used.         *          * @return the field         */,
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this         * DateTime.  If halfway, the ceiling is favored over the floor only if         * it makes this field's value even.         *         * @return a copy of the DateTime with the field value changed         */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,/**         * Gets the current time.         * @return the current time in millis         */,
E,"/**     * Gets the default time zone.     * <p>     * The default time zone is derived from the system property {@code user.timezone}.     * If that is {@code null} or is not a valid identifier, then the value of the     * JDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.     * <p>     * NOTE: If the {@code java.util.TimeZone} default is updated <i>after</i> calling this     * method, then the change will not be picked up here.     *      * @return the default datetime zone object     */",
E,/**     * Gets all the available IDs supported.     *      * @return an unmodifiable Set of String IDs     */,
E,/**     * Gets the zone provider factory.     * <p>     * The zone provider is a pluggable instance factory that supplies the     * actual instances of DateTimeZone.     *      * @return the provider     */,
E,"/**     * Sets the zone provider factory without performing the security check.     *      * @param provider  provider to use, or null for default     * @throws IllegalArgumentException if the provider is invalid     */",
E,/**     * Gets the name provider factory.     * <p>     * The name provider is a pluggable instance factory that supplies the     * names of each DateTimeZone.     *      * @return the provider     */,
E,/**     * Gets the default name provider.     * <p>     * Tries the system property <code>org.joda.time.DateTimeZone.NameProvider</code>.     * Then uses <code>DefaultNameProvider</code>.     *      * @return the default name provider     */,
E,"/**     * Converts an old style id to a new style id.     *      * @param id  the old style id     * @return the new style id, null if not found     */",
E,"/**     * Gets the duration field type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Gets the period type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Converts this period in minutes to a period in weeks assuming a     * 7 days week, 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all weeks are     * 7 days long, all days are 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole weeks for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in days assuming a     * 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all days are     * 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole days for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in hours assuming a     * 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all hours are     * 60 minutes long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of hours for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in seconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of seconds for this number of minutes     * @throws ArithmeticException if the number of seconds is too large to be represented     */",
E,"/**     * Converts this period in minutes to a duration in milliseconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert from a period to a duration.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long. This might not be true for an unusual chronology,     * for example one that takes leap seconds into account.     * However, the method is included as it is a useful operation for many     * applications and business rules.     *     * @return a duration equivalent to this number of minutes     */",
E,/**     * Gets the number of minutes that this period represents.     *     * @return the number of minutes in the period     */,
E,"/**     * Returns a new instance with the specified number of minutes added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to add, may be negative, null means zero     * @return the new period plus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of minutes taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to take away, may be negative, null means zero     * @return the new period minus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Is this minutes instance greater than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is greater than the specified one     */",
E,"/**     * Is this minutes instance less than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is less than the specified one     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Handle broken serialization from other tools.     * @return the resolved object, not null     */",
E,"/**     * Gets the number of fields in this partial, which is two.     * The supported fields are MonthOfYear and DayOfMonth.     * Note that only these fields may be queried.     *     * @return the field count, two     */",
E,/**         * Gets the field that this property uses.         *          * @return the field         */,
E,"/**     * Gets the field type at the specified index.     *     * @param index  the index to retrieve     * @return the field at the specified index, never null     * @throws IndexOutOfBoundsException if the index is invalid     */",
E,"/**     * Gets an array of the field type of each of the fields that this partial supports.     * <p>     * The fields are returned largest to smallest, Month, Day.     *     * @return the array of field types (cloned), largest to smallest, never null     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,/**     * Get the month of year field value.     *     * @return the month of year     */,
E,/**     * Get the day of month field value.     *     * @return the day of month     */,
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Gets the property object for the specified type, which contains     * many useful methods.     *     * @param type  the field type to get the property for     * @return the property object     * @throws IllegalArgumentException if the field is null or unsupported     */",
E,/**     * Get the month of year field property which provides access to advanced functionality.     *      * @return the month of year property     */,
E,/**     * Get the day of month field property which provides access to advanced functionality.     *      * @return the day of month property     */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the value of this field.         *          * @return the field value         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative, null means zero     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative, null means zero     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,/** * Returns * the title over the image * @return */,
N,/**     * @return the suite of tests being tested     */,
E,/* play a card */,
E,/* play a card */,
E,/**     * Returns true if this object has buffered data for reading.     *     * @param context the context to be used     * @return true if there is data still available for reading.     */,
E,"/**     * Converts an array of characters representing hexadecimal values into an array of bytes of those same values. The     * returned array will be half the length of the passed array, as it takes two characters to represent any given     * byte. An exception is thrown if the passed char array has an odd number of elements.     *     * @param data     *            An array of characters containing hexadecimal digits     * @return A byte array containing binary data decoded from the supplied char array.     * @throws DecoderException     *             Thrown if an odd number or illegal of characters is supplied     */",
E,"/*     * Returns whether the array contains the key, or not.     */",
E,"/**         * Creates a new branch, identical to this branch.         *         * @return a new, identical branch         */",
E,"/**     * Handles 'A', 'E', 'I', 'O', 'U', and 'Y' cases.     */",
E,/**     * Handles 'C' cases.     */,
E,/**     * Handles 'CC' cases.     */,
E,/**     * Handles 'CH' cases.     */,
E,/**     * Handles 'D' cases.     */,
E,/**     * Handles 'G' cases.     */,
E,/**     * Handles 'H' cases.     */,
E,/**     * Handles 'J' cases.     */,
E,/** True if the entry is expired. */,
E,/** True if a refresh is needed from the original data source. */,
E,"/**     * Forces this dispatcher to quit immediately. If any requests are still in the queue, they are     * not guaranteed to be processed.     */",
E,"/**         * For cacheable requests, if a request for the same cache key is already in flight, add it         * to a queue to wait for that in-flight request to finish.         *         * @return whether the request was queued. If false, we should continue issuing the request         *     over the network. If true, we should put the request on hold to be processed when the         *     in-flight request finishes.         */",
E,"/** Returns true if this policy has attempts remaining, false otherwise. */",
E,/**     * Creates a new network response for an OK response with no headers.     *     * @param data Response body     */,
E,"/**     * Creates a new request with the given method (one of the values from {@link Method}), URL, and     * error listener. Note that the normal response listener is not provided here as delivery of     * responses is provided by subclasses, who have a better idea of how to deliver an     * already-parsed response.     */",
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/** Return the method for this request. Can be one of the values in {@link Method}. */,
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/** Adds an event to this request's event log; for debugging. */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Sets the sequence number of this request. Used by {@link RequestQueue}.     *     * @return This Request object to allow for chaining.     */,
E,/** Reads the contents of an InputStream into a byte[]. */,
E,/**     * Combine cache headers with network response headers for an HTTP 304 response.     *     * <p>An HTTP 304 response does not have all header fields. We have to use the header fields     * from the cache entry plus the new ones from the response. See also:     * http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5     *     * @param responseHeaders Headers from the network response.     * @param entry The cached response.     * @return The combined list of headers.     */,
E,"/**     * Returns a buffer from the pool if one is available in the requested size, or allocates a new     * one if a pooled one is not available.     *     * @param len the minimum size, in bytes, of the requested buffer. The returned buffer may be     *     larger.     * @return a byte[] buffer is always returned.     */",
E,/** Returns a file object for the given cache key. */,
E,/**     * Puts the entry with the specified key into the cache.     *     * @param key The key to identify the entry by.     * @param entry The entry to cache.     */,
E,/** Removes the entry identified by 'key' from the cache. */,
E,/** Creates a cache entry for the specified data. */,
E,/** Returns the HTTP status code of the response. */,
E,/**     * Clear page history for the app.     */,
E,/**     * Determine if log level will be logged     *     * @param logLevel     * @return true if the parameter passed in is greater than or equal to the current log level     */,
E,/**     * Changes the bridge mode.     */,
E,"/**     * Combines and returns queued messages combined into a single string.     * Combines as many messages as possible, while staying under MAX_PAYLOAD_SIZE.     * Returns null if the queue is empty.     */",
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a plugin class that implements a service to the service entry table.     * This does not create the plugin object instance.     *     * @param entry             The plugin entry     */,
E,/**     * Called when the activity is becoming visible to the user.     */,
E,/**     * Called when the activity is no longer visible to the user.     */,
E,/**     * The final call you receive before your activity is destroyed.     */,
E,/**     * Called when the activity receives a new intent.     */,
E,"/**     * Called when the webview is going to request an external resource.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the resource to load,     *                  false to block the resource.     */",
E,"/**     * Called when the webview is going to change the URL of the loaded content.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the navigation,     *                  false to block the navigation.     */",
E,/**     * Called when the webview is requesting the exec() bridge be enabled.     */,
E,"/**     * Called when the webview is going not going to navigate, but may launch     * an Intent for an URL.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the URL to launch an intent,     *                  false to block the intent.     */",
E,"/**     * Called when the URL of the webview changes.     *     * @param url               The URL that is being changed to.     * @return                  Return false to allow the URL to load, return true to prevent the URL from loading.     */",
E,/**     * Create a plugin based on class name.     */,
E,/**     * Called by the system when the device configuration changes while your activity is running.     *     * @param newConfigThe new device configuration     */,
E,/**     * Determine if URL is in approved list of URLs to load.     *     * @param uri     * @return true if wide open or whitelisted     */,
E,/**     * Ask the host application for a custom progress view to show while     * a <video> is loading.     * @return View The progress view.     */,
E,/** Used when created via reflection. */,
E,/** * Create the frame. */,
E,/** * Launch the application. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
N,/**     * This function is run when the robot is first started up and should be     * used for any initialization code.     */,
E,/** * get a new vertex * @return named vertex */,
E,/** * reset to a neutral state */,
E,/** * string representation */,
E,"/** * compare edge to edge * from Comparable, to allow sorting edges by weight */",
E,/** * add edge to forest *  * @param e edge to be added */,
E,/** * remove a tree from the forest *  * @param t tree */,
E,/** Add a new element at the end of this list */,
E,/** Return true if this list contains no elements */,
E,/** Return the number of elements in this list */,
E,/** Remove the first occurrence of the element o from this list.   *  Shift any subsequent elements to the left.   *  Return true if the element is removed. */,
E,/** Create a default list */,
E,/** Create a list from an array of objects */,
E,/** Return the head element in the list */,
E,/** Return the last element in the list */,
E,/** Add an element to the beginning of the list */,
E,/** Add an element to the end of the list */,
E,/** Add a new element at the specified index in this list     * The index of the head element is 0 */,
E,/** Remove the head node and     *  return the object that is contained in the removed node. */,
E,/** Remove the last node and     * return the object that is contained in the removed node. */,
E,/** Remove the element at the specified position in this list.     *  Return the element that was removed from the list. */,
E,/** Clear the list */,
E,"/** Returns true if this linked list contains the element e, otherwise returns false     * @return .*/",
E,"/** Returns the element at specified index of this list, returns null if index is invalid. */",
E,"/** Returns the index of the first matching element in this linked list, return !-1 if no match. */",
E,"/** Returns the index of the last matching element in this list, returns !-1 if no match. */",
E,"/** Replaces the element at specified index in this linked list with the specified element.  Returns the old element at specified index, otherwise returns null if index is invalid. */",
E,/** Main method - DO NOT CHANGE THIS CODE!!!! */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the DisRule wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOver wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameWon wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Life wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Message wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Quit wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Rules wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Story wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Timer wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOverScreen wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**   * Observes the value of any new tiles that was formed   *   * @return   */,
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,/**   * Draws Tiles in a square arrangement   */,
E,/**   * Draws Tiles in a square arrangement   */,
E,/** * Create the frame. */,
E,/** * method that returns the URL passed into this download frame * @return */,
E,/** * returns instance of this download frame * @return */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return musicpath */,
E,/** * this method should read the log file and return imagePath */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/**     * Create a byte array with a specific size filled with specified data.     *     * @param size the size of the byte array.     * @param data the data to put in the byte array.     * @return the JSON byte array.     */,
E,"/**     * Create a User.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which has a required relationship to the User entity.     */",
E,"/**     * Create an entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**     * Create an updated entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**    * Users can call this method to add new points to the plot for this graph.    * Once a point is added, it cannot be removed from the graph. The graph    * class uses lazy evaluation for all plotting functions so nothing will show    * up until a showGraph() method is called.    *     * @param newPoints    *           the array of new points to add to the graph    */",
E,/**    * this methods shows the graph with all of the current points and lines that    * the user added.    */,
E,/**    * this method reads all the data files for the bird names listed in the enum    * Birds and generates a corresponding processed file named:    * [birdName]_out.txt    */,
E,"/** If size = length of d, double the length of array d. <br> * The worst-case time is proportional to the length of d. */",
E,/** Return the size of this heap. <br> * This operation takes constant time. */,
E,"/** Return the shortest path from node v to node end <br>     * ---or the empty list if a path does not exist. <br>     * Note: The empty list is NOT ""null""; it is a list with 0 elements. */",
E,/** Return the direction. */,
E,/** Return a new point that is this point with p added to it. */,
E,/** Return a randomly determined gold value for a given tile. */,
E,"/** Given tiles t without edges and a supplier to return edge weights, <br> * add edges to the nodes between adjacent non-wall tiles. <br> * Precondition: all elements of {@code tiles} are non-null. */",
E,/** Generate a new random graph that fits within the grid and return the set of nodes. */,
E,/** Return the number of open floor tiles in this cavern <br> * (this is the size of the graph). */,
E,/** Return the number of rows in the grid. */,
E,/** Return the number of columns in the grid. */,
E,/** Return the set of all nodes in the graph. <br> * This is an umodifiable view of the graph. */,
E,/** Return the node corresponding to the entrance to the cavern. */,
E,"/** Return the Tile information for tile (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,"/** Return the node at the given (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,/** Return the Node on this edge that is not equal to n. <br> * Throw an IllegalArgumentException if n is not in this Edge. */,
E,/** Return the length of this Edge */,
E,/** Return the source of this edge. */,
E,/** Return destination of edge */,
E,"/** Run through the game, one step at a time. <br>     * Will run scram() only if hunt() succeeds. <br>     * Does not use a timeout and will wait as long as necessary. */",
E,"/** Return the Manhattan distance from (row, col) to the target */",
E,"/** Given seed, whether or not to use the GUI, and an instance <br>     * of a solution to use, run the game. */",
E,/** Return the number of elements in the priority queue.<br> * This operation takes constant time. */,
E,/* * Welcome function will print the greeting message to the screen. */,
E,/** * This Show Menu function will print list of options that user can choose from. */,
E,/** * This addMember function will allow the user to enter a new member. */,
E,/**     * @return the suite of tests being tested     */,
E,"/**    * You can also modify the body of this method to customize your error messages.    * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not    * of end-users concern, so you can return something like :     *    *     ""Internal Error : Please file a bug report .... ""    *    * from this method for such cases in the release version of your parser.    */",
E,/**    * Use this method to add FormatCommands to the command queue to be    * executed when the next token in the tree is visited.    */,
E,/**   * Generate a name for a parameter from the type of the parameter.   *   * @param className  the parameters type   * @return a more or less fitting name.   */,
E,/**   * Gets a container containing the signatures of the delegation   * methods.   *   * @return the value of signatures   */,
E,/**   * Gets the value of signatures   *   * @return the value of signatures   */,
E,/**     * Method that adds a new element to the stack.     *     * @param value - the value to be added     * @return - true if the value was inserted successfully and false otherwise     */,
E,/**     * Method that returns end removes the top element from the stack. Program will close if the stack is empty.     *     * @return - the top element from the stack     */,
E,/**     * @return - the top element from the stack without removing it.     */,
E,/**     * Method that checks if the stack is empty.     *     * @return - true if the stack is empty and false otherwise.     */,
E,/**     * Method that check if the stack is full.     *     * @return - true if the stack is full and false otherwise     */,
E,/**    @Deprecated    reason - we will not be using this anymore     */,
E,/*         * LIST - ordered collection of elements.         * Elements can be accessed by their index.         */,
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/** Puts an X or O mark at position i,j. */",
E,"/** Puts an X or O mark at position i,j. */",
E,/** Checks whether the board configuration is a win for the given player. */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/**     * This is the main swing application method.   It sets up and displays the     * initial GUI, and controls execution thereafter.  Everything else in     * this class is 'private', please read the code.     */",
E,/*     * usage A private static method to display usage information to     * the user before an error exit.     */,
E,"/*     * go This method reads the file, creates the table to display,     * the window to display it in, and displays the window.     * @param fileName the name of the file to read.     * @param tryLines An estimate of the number of lines in     * the file.     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date with the era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of era changed.     *     * @param yearOfEra  the year of era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of century field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of century changed.     *     * @param yearOfCentury  the year of century to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the month of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of year changed.     *     * @param dayOfYear  the day of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of month field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of week field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of week changed.     *     * @param dayOfWeek  the day of week to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Returns a copy of this date with a different chronology, potentially     * changing the day in unexpected ways.     * <p>     * This method creates a new DateMidnight using the midnight millisecond value     * and the new chronology. If the same or similar chronology is specified, but     * with a different time zone, the day may change. This occurs because the new     * DateMidnight rounds down the millisecond value to get to midnight, and the     * time zone change may result in a rounding down to a different day.     * <p>     * For example, changing time zone from London (+00:00) to Paris (+01:00) will     * retain the same day, but changing from Paris to London will change the day.     * (When its midnight in London its the same day in Paris, but when its midnight     * in Paris its still the previous day in London)     * <p>     * To avoid these unusual effects, use {@link #withZoneRetainFields(DateTimeZone)}     * to change time zones.     *     * @param newChronology",the new chronology     * @return a copy of this instant with a different chronology     */
E,"/**     * Returns a copy of this date with a different time zone, preserving the day     * The returned object will have a local time of midnight in the new zone on     * the same day as the original instant.     *     * @param newZone  the new time zone, null means default     * @return a copy of this instant with a different time zone     */",
E,"/**     * Returns a copy of this date with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>LocalDate</code> then the date fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this datetime with the era field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the year field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the hour of day field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * hour of day changed.     *     * @param hour  the hour of day to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the minute of hour updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * minute of hour changed.     *     * @param minute  the minute of hour to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the second of minute field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * second of minute changed.     *     * @param second  the second of minute to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Gets the field being used.         *          * @return the field         */,
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this         * DateTime.  If halfway, the ceiling is favored over the floor only if         * it makes this field's value even.         *         * @return a copy of the DateTime with the field value changed         */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,/**         * Gets the current time.         * @return the current time in millis         */,
E,"/**     * Gets the default time zone.     * <p>     * The default time zone is derived from the system property {@code user.timezone}.     * If that is {@code null} or is not a valid identifier, then the value of the     * JDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.     * <p>     * NOTE: If the {@code java.util.TimeZone} default is updated <i>after</i> calling this     * method, then the change will not be picked up here.     *      * @return the default datetime zone object     */",
E,/**     * Gets all the available IDs supported.     *      * @return an unmodifiable Set of String IDs     */,
E,/**     * Gets the zone provider factory.     * <p>     * The zone provider is a pluggable instance factory that supplies the     * actual instances of DateTimeZone.     *      * @return the provider     */,
E,"/**     * Sets the zone provider factory without performing the security check.     *      * @param provider  provider to use, or null for default     * @throws IllegalArgumentException if the provider is invalid     */",
E,/**     * Gets the name provider factory.     * <p>     * The name provider is a pluggable instance factory that supplies the     * names of each DateTimeZone.     *      * @return the provider     */,
E,/**     * Gets the default name provider.     * <p>     * Tries the system property <code>org.joda.time.DateTimeZone.NameProvider</code>.     * Then uses <code>DefaultNameProvider</code>.     *      * @return the default name provider     */,
E,"/**     * Converts an old style id to a new style id.     *      * @param id  the old style id     * @return the new style id, null if not found     */",
E,"/**     * Gets the duration field type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Gets the period type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Converts this period in minutes to a period in weeks assuming a     * 7 days week, 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all weeks are     * 7 days long, all days are 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole weeks for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in days assuming a     * 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all days are     * 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole days for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in hours assuming a     * 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all hours are     * 60 minutes long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of hours for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in seconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of seconds for this number of minutes     * @throws ArithmeticException if the number of seconds is too large to be represented     */",
E,"/**     * Converts this period in minutes to a duration in milliseconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert from a period to a duration.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long. This might not be true for an unusual chronology,     * for example one that takes leap seconds into account.     * However, the method is included as it is a useful operation for many     * applications and business rules.     *     * @return a duration equivalent to this number of minutes     */",
E,/**     * Gets the number of minutes that this period represents.     *     * @return the number of minutes in the period     */,
E,"/**     * Returns a new instance with the specified number of minutes added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to add, may be negative, null means zero     * @return the new period plus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of minutes taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to take away, may be negative, null means zero     * @return the new period minus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Is this minutes instance greater than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is greater than the specified one     */",
E,"/**     * Is this minutes instance less than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is less than the specified one     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Handle broken serialization from other tools.     * @return the resolved object, not null     */",
E,"/**     * Gets the number of fields in this partial, which is two.     * The supported fields are MonthOfYear and DayOfMonth.     * Note that only these fields may be queried.     *     * @return the field count, two     */",
E,/**         * Gets the field that this property uses.         *          * @return the field         */,
E,"/**     * Gets the field type at the specified index.     *     * @param index  the index to retrieve     * @return the field at the specified index, never null     * @throws IndexOutOfBoundsException if the index is invalid     */",
E,"/**     * Gets an array of the field type of each of the fields that this partial supports.     * <p>     * The fields are returned largest to smallest, Month, Day.     *     * @return the array of field types (cloned), largest to smallest, never null     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,/**     * Get the month of year field value.     *     * @return the month of year     */,
E,/**     * Get the day of month field value.     *     * @return the day of month     */,
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Gets the property object for the specified type, which contains     * many useful methods.     *     * @param type  the field type to get the property for     * @return the property object     * @throws IllegalArgumentException if the field is null or unsupported     */",
E,/**     * Get the month of year field property which provides access to advanced functionality.     *      * @return the month of year property     */,
E,/**     * Get the day of month field property which provides access to advanced functionality.     *      * @return the day of month property     */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the value of this field.         *          * @return the field value         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative, null means zero     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative, null means zero     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,/** * Returns * the title over the image * @return */,
N,/**     * @return the suite of tests being tested     */,
E,/* play a card */,
E,/* play a card */,
E,/**     * Returns true if this object has buffered data for reading.     *     * @param context the context to be used     * @return true if there is data still available for reading.     */,
E,"/**     * Converts an array of characters representing hexadecimal values into an array of bytes of those same values. The     * returned array will be half the length of the passed array, as it takes two characters to represent any given     * byte. An exception is thrown if the passed char array has an odd number of elements.     *     * @param data     *            An array of characters containing hexadecimal digits     * @return A byte array containing binary data decoded from the supplied char array.     * @throws DecoderException     *             Thrown if an odd number or illegal of characters is supplied     */",
E,"/*     * Returns whether the array contains the key, or not.     */",
E,"/**         * Creates a new branch, identical to this branch.         *         * @return a new, identical branch         */",
E,"/**     * Handles 'A', 'E', 'I', 'O', 'U', and 'Y' cases.     */",
E,/**     * Handles 'C' cases.     */,
E,/**     * Handles 'CC' cases.     */,
E,/**     * Handles 'CH' cases.     */,
E,/**     * Handles 'D' cases.     */,
E,/**     * Handles 'G' cases.     */,
E,/**     * Handles 'H' cases.     */,
E,/**     * Handles 'J' cases.     */,
E,/** True if the entry is expired. */,
E,/** True if a refresh is needed from the original data source. */,
E,"/**     * Forces this dispatcher to quit immediately. If any requests are still in the queue, they are     * not guaranteed to be processed.     */",
E,"/**         * For cacheable requests, if a request for the same cache key is already in flight, add it         * to a queue to wait for that in-flight request to finish.         *         * @return whether the request was queued. If false, we should continue issuing the request         *     over the network. If true, we should put the request on hold to be processed when the         *     in-flight request finishes.         */",
E,"/** Returns true if this policy has attempts remaining, false otherwise. */",
E,/**     * Creates a new network response for an OK response with no headers.     *     * @param data Response body     */,
E,"/**     * Creates a new request with the given method (one of the values from {@link Method}), URL, and     * error listener. Note that the normal response listener is not provided here as delivery of     * responses is provided by subclasses, who have a better idea of how to deliver an     * already-parsed response.     */",
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/** Return the method for this request. Can be one of the values in {@link Method}. */,
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/** Adds an event to this request's event log; for debugging. */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Sets the sequence number of this request. Used by {@link RequestQueue}.     *     * @return This Request object to allow for chaining.     */,
E,/** Reads the contents of an InputStream into a byte[]. */,
E,/**     * Combine cache headers with network response headers for an HTTP 304 response.     *     * <p>An HTTP 304 response does not have all header fields. We have to use the header fields     * from the cache entry plus the new ones from the response. See also:     * http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5     *     * @param responseHeaders Headers from the network response.     * @param entry The cached response.     * @return The combined list of headers.     */,
E,"/**     * Returns a buffer from the pool if one is available in the requested size, or allocates a new     * one if a pooled one is not available.     *     * @param len the minimum size, in bytes, of the requested buffer. The returned buffer may be     *     larger.     * @return a byte[] buffer is always returned.     */",
E,/** Returns a file object for the given cache key. */,
E,/**     * Puts the entry with the specified key into the cache.     *     * @param key The key to identify the entry by.     * @param entry The entry to cache.     */,
E,/** Removes the entry identified by 'key' from the cache. */,
E,/** Creates a cache entry for the specified data. */,
E,/** Returns the HTTP status code of the response. */,
E,/**     * Clear page history for the app.     */,
E,/**     * Determine if log level will be logged     *     * @param logLevel     * @return true if the parameter passed in is greater than or equal to the current log level     */,
E,/**     * Changes the bridge mode.     */,
E,"/**     * Combines and returns queued messages combined into a single string.     * Combines as many messages as possible, while staying under MAX_PAYLOAD_SIZE.     * Returns null if the queue is empty.     */",
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a plugin class that implements a service to the service entry table.     * This does not create the plugin object instance.     *     * @param entry             The plugin entry     */,
E,/**     * Called when the activity is becoming visible to the user.     */,
E,/**     * Called when the activity is no longer visible to the user.     */,
E,/**     * The final call you receive before your activity is destroyed.     */,
E,/**     * Called when the activity receives a new intent.     */,
E,"/**     * Called when the webview is going to request an external resource.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the resource to load,     *                  false to block the resource.     */",
E,"/**     * Called when the webview is going to change the URL of the loaded content.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the navigation,     *                  false to block the navigation.     */",
E,/**     * Called when the webview is requesting the exec() bridge be enabled.     */,
E,"/**     * Called when the webview is going not going to navigate, but may launch     * an Intent for an URL.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the URL to launch an intent,     *                  false to block the intent.     */",
E,"/**     * Called when the URL of the webview changes.     *     * @param url               The URL that is being changed to.     * @return                  Return false to allow the URL to load, return true to prevent the URL from loading.     */",
E,/**     * Create a plugin based on class name.     */,
E,/**     * Called by the system when the device configuration changes while your activity is running.     *     * @param newConfigThe new device configuration     */,
E,/**     * Determine if URL is in approved list of URLs to load.     *     * @param uri     * @return true if wide open or whitelisted     */,
E,/**     * Ask the host application for a custom progress view to show while     * a <video> is loading.     * @return View The progress view.     */,
E,/** Used when created via reflection. */,
E,/** * Create the frame. */,
E,/** * Launch the application. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
N,/**     * This function is run when the robot is first started up and should be     * used for any initialization code.     */,
E,/** * get a new vertex * @return named vertex */,
E,/** * reset to a neutral state */,
E,/** * string representation */,
E,"/** * compare edge to edge * from Comparable, to allow sorting edges by weight */",
E,/** * add edge to forest *  * @param e edge to be added */,
E,/** * remove a tree from the forest *  * @param t tree */,
E,/** Add a new element at the end of this list */,
E,/** Return true if this list contains no elements */,
E,/** Return the number of elements in this list */,
E,/** Remove the first occurrence of the element o from this list.   *  Shift any subsequent elements to the left.   *  Return true if the element is removed. */,
E,/** Create a default list */,
E,/** Create a list from an array of objects */,
E,/** Return the head element in the list */,
E,/** Return the last element in the list */,
E,/** Add an element to the beginning of the list */,
E,/** Add an element to the end of the list */,
E,/** Add a new element at the specified index in this list     * The index of the head element is 0 */,
E,/** Remove the head node and     *  return the object that is contained in the removed node. */,
E,/** Remove the last node and     * return the object that is contained in the removed node. */,
E,/** Remove the element at the specified position in this list.     *  Return the element that was removed from the list. */,
E,/** Clear the list */,
E,"/** Returns true if this linked list contains the element e, otherwise returns false     * @return .*/",
E,"/** Returns the element at specified index of this list, returns null if index is invalid. */",
E,"/** Returns the index of the first matching element in this linked list, return !-1 if no match. */",
E,"/** Returns the index of the last matching element in this list, returns !-1 if no match. */",
E,"/** Replaces the element at specified index in this linked list with the specified element.  Returns the old element at specified index, otherwise returns null if index is invalid. */",
E,/** Main method - DO NOT CHANGE THIS CODE!!!! */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the DisRule wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOver wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameWon wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Life wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Message wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Quit wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Rules wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Story wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Timer wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOverScreen wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**   * Observes the value of any new tiles that was formed   *   * @return   */,
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,/**   * Draws Tiles in a square arrangement   */,
E,/**   * Draws Tiles in a square arrangement   */,
E,/** * Create the frame. */,
E,/** * method that returns the URL passed into this download frame * @return */,
E,/** * returns instance of this download frame * @return */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return musicpath */,
E,/** * this method should read the log file and return imagePath */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/**     * Create a byte array with a specific size filled with specified data.     *     * @param size the size of the byte array.     * @param data the data to put in the byte array.     * @return the JSON byte array.     */,
E,"/**     * Create a User.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which has a required relationship to the User entity.     */",
E,"/**     * Create an entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**     * Create an updated entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**    * Users can call this method to add new points to the plot for this graph.    * Once a point is added, it cannot be removed from the graph. The graph    * class uses lazy evaluation for all plotting functions so nothing will show    * up until a showGraph() method is called.    *     * @param newPoints    *           the array of new points to add to the graph    */",
E,/**    * this methods shows the graph with all of the current points and lines that    * the user added.    */,
E,/**    * this method reads all the data files for the bird names listed in the enum    * Birds and generates a corresponding processed file named:    * [birdName]_out.txt    */,
E,"/** If size = length of d, double the length of array d. <br> * The worst-case time is proportional to the length of d. */",
E,/** Return the size of this heap. <br> * This operation takes constant time. */,
E,"/** Return the shortest path from node v to node end <br>     * ---or the empty list if a path does not exist. <br>     * Note: The empty list is NOT ""null""; it is a list with 0 elements. */",
E,/** Return the direction. */,
E,/** Return a new point that is this point with p added to it. */,
E,/** Return a randomly determined gold value for a given tile. */,
E,"/** Given tiles t without edges and a supplier to return edge weights, <br> * add edges to the nodes between adjacent non-wall tiles. <br> * Precondition: all elements of {@code tiles} are non-null. */",
E,/** Generate a new random graph that fits within the grid and return the set of nodes. */,
E,/** Return the number of open floor tiles in this cavern <br> * (this is the size of the graph). */,
E,/** Return the number of rows in the grid. */,
E,/** Return the number of columns in the grid. */,
E,/** Return the set of all nodes in the graph. <br> * This is an umodifiable view of the graph. */,
E,/** Return the node corresponding to the entrance to the cavern. */,
E,"/** Return the Tile information for tile (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,"/** Return the node at the given (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,/** Return the Node on this edge that is not equal to n. <br> * Throw an IllegalArgumentException if n is not in this Edge. */,
E,/** Return the length of this Edge */,
E,/** Return the source of this edge. */,
E,/** Return destination of edge */,
E,"/** Run through the game, one step at a time. <br>     * Will run scram() only if hunt() succeeds. <br>     * Does not use a timeout and will wait as long as necessary. */",
E,"/** Return the Manhattan distance from (row, col) to the target */",
E,"/** Given seed, whether or not to use the GUI, and an instance <br>     * of a solution to use, run the game. */",
E,/** Return the number of elements in the priority queue.<br> * This operation takes constant time. */,
E,/* * Welcome function will print the greeting message to the screen. */,
E,/** * This Show Menu function will print list of options that user can choose from. */,
E,/** * This addMember function will allow the user to enter a new member. */,
E,/**     * @return the suite of tests being tested     */,
E,"/**    * You can also modify the body of this method to customize your error messages.    * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not    * of end-users concern, so you can return something like :     *    *     ""Internal Error : Please file a bug report .... ""    *    * from this method for such cases in the release version of your parser.    */",
E,/**    * Use this method to add FormatCommands to the command queue to be    * executed when the next token in the tree is visited.    */,
E,/**   * Generate a name for a parameter from the type of the parameter.   *   * @param className  the parameters type   * @return a more or less fitting name.   */,
E,/**   * Gets a container containing the signatures of the delegation   * methods.   *   * @return the value of signatures   */,
E,/**   * Gets the value of signatures   *   * @return the value of signatures   */,
E,/**     * Method that adds a new element to the stack.     *     * @param value - the value to be added     * @return - true if the value was inserted successfully and false otherwise     */,
E,/**     * Method that returns end removes the top element from the stack. Program will close if the stack is empty.     *     * @return - the top element from the stack     */,
E,/**     * @return - the top element from the stack without removing it.     */,
E,/**     * Method that checks if the stack is empty.     *     * @return - true if the stack is empty and false otherwise.     */,
E,/**     * Method that check if the stack is full.     *     * @return - true if the stack is full and false otherwise     */,
E,/**    @Deprecated    reason - we will not be using this anymore     */,
E,/*         * LIST - ordered collection of elements.         * Elements can be accessed by their index.         */,
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/** Puts an X or O mark at position i,j. */",
E,"/** Puts an X or O mark at position i,j. */",
E,/** Checks whether the board configuration is a win for the given player. */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/**     * This is the main swing application method.   It sets up and displays the     * initial GUI, and controls execution thereafter.  Everything else in     * this class is 'private', please read the code.     */",
E,/*     * usage A private static method to display usage information to     * the user before an error exit.     */,
E,"/*     * go This method reads the file, creates the table to display,     * the window to display it in, and displays the window.     * @param fileName the name of the file to read.     * @param tryLines An estimate of the number of lines in     * the file.     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date with the era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of era changed.     *     * @param yearOfEra  the year of era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of century field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of century changed.     *     * @param yearOfCentury  the year of century to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the month of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of year changed.     *     * @param dayOfYear  the day of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of month field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of week field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of week changed.     *     * @param dayOfWeek  the day of week to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Returns a copy of this date with a different chronology, potentially     * changing the day in unexpected ways.     * <p>     * This method creates a new DateMidnight using the midnight millisecond value     * and the new chronology. If the same or similar chronology is specified, but     * with a different time zone, the day may change. This occurs because the new     * DateMidnight rounds down the millisecond value to get to midnight, and the     * time zone change may result in a rounding down to a different day.     * <p>     * For example, changing time zone from London (+00:00) to Paris (+01:00) will     * retain the same day, but changing from Paris to London will change the day.     * (When its midnight in London its the same day in Paris, but when its midnight     * in Paris its still the previous day in London)     * <p>     * To avoid these unusual effects, use {@link #withZoneRetainFields(DateTimeZone)}     * to change time zones.     *     * @param newChronology",the new chronology     * @return a copy of this instant with a different chronology     */
E,"/**     * Returns a copy of this date with a different time zone, preserving the day     * The returned object will have a local time of midnight in the new zone on     * the same day as the original instant.     *     * @param newZone  the new time zone, null means default     * @return a copy of this instant with a different time zone     */",
E,"/**     * Returns a copy of this date with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>LocalDate</code> then the date fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this datetime with the era field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the year field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the hour of day field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * hour of day changed.     *     * @param hour  the hour of day to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the minute of hour updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * minute of hour changed.     *     * @param minute  the minute of hour to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the second of minute field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * second of minute changed.     *     * @param second  the second of minute to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Gets the field being used.         *          * @return the field         */,
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this         * DateTime.  If halfway, the ceiling is favored over the floor only if         * it makes this field's value even.         *         * @return a copy of the DateTime with the field value changed         */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,/**         * Gets the current time.         * @return the current time in millis         */,
E,"/**     * Gets the default time zone.     * <p>     * The default time zone is derived from the system property {@code user.timezone}.     * If that is {@code null} or is not a valid identifier, then the value of the     * JDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.     * <p>     * NOTE: If the {@code java.util.TimeZone} default is updated <i>after</i> calling this     * method, then the change will not be picked up here.     *      * @return the default datetime zone object     */",
E,/**     * Gets all the available IDs supported.     *      * @return an unmodifiable Set of String IDs     */,
E,/**     * Gets the zone provider factory.     * <p>     * The zone provider is a pluggable instance factory that supplies the     * actual instances of DateTimeZone.     *      * @return the provider     */,
E,"/**     * Sets the zone provider factory without performing the security check.     *      * @param provider  provider to use, or null for default     * @throws IllegalArgumentException if the provider is invalid     */",
E,/**     * Gets the name provider factory.     * <p>     * The name provider is a pluggable instance factory that supplies the     * names of each DateTimeZone.     *      * @return the provider     */,
E,/**     * Gets the default name provider.     * <p>     * Tries the system property <code>org.joda.time.DateTimeZone.NameProvider</code>.     * Then uses <code>DefaultNameProvider</code>.     *      * @return the default name provider     */,
E,"/**     * Converts an old style id to a new style id.     *      * @param id  the old style id     * @return the new style id, null if not found     */",
E,"/**     * Gets the duration field type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Gets the period type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Converts this period in minutes to a period in weeks assuming a     * 7 days week, 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all weeks are     * 7 days long, all days are 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole weeks for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in days assuming a     * 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all days are     * 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole days for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in hours assuming a     * 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all hours are     * 60 minutes long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of hours for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in seconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of seconds for this number of minutes     * @throws ArithmeticException if the number of seconds is too large to be represented     */",
E,"/**     * Converts this period in minutes to a duration in milliseconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert from a period to a duration.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long. This might not be true for an unusual chronology,     * for example one that takes leap seconds into account.     * However, the method is included as it is a useful operation for many     * applications and business rules.     *     * @return a duration equivalent to this number of minutes     */",
E,/**     * Gets the number of minutes that this period represents.     *     * @return the number of minutes in the period     */,
E,"/**     * Returns a new instance with the specified number of minutes added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to add, may be negative, null means zero     * @return the new period plus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of minutes taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to take away, may be negative, null means zero     * @return the new period minus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Is this minutes instance greater than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is greater than the specified one     */",
E,"/**     * Is this minutes instance less than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is less than the specified one     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Handle broken serialization from other tools.     * @return the resolved object, not null     */",
E,"/**     * Gets the number of fields in this partial, which is two.     * The supported fields are MonthOfYear and DayOfMonth.     * Note that only these fields may be queried.     *     * @return the field count, two     */",
E,/**         * Gets the field that this property uses.         *          * @return the field         */,
E,"/**     * Gets the field type at the specified index.     *     * @param index  the index to retrieve     * @return the field at the specified index, never null     * @throws IndexOutOfBoundsException if the index is invalid     */",
E,"/**     * Gets an array of the field type of each of the fields that this partial supports.     * <p>     * The fields are returned largest to smallest, Month, Day.     *     * @return the array of field types (cloned), largest to smallest, never null     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,/**     * Get the month of year field value.     *     * @return the month of year     */,
E,/**     * Get the day of month field value.     *     * @return the day of month     */,
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Gets the property object for the specified type, which contains     * many useful methods.     *     * @param type  the field type to get the property for     * @return the property object     * @throws IllegalArgumentException if the field is null or unsupported     */",
E,/**     * Get the month of year field property which provides access to advanced functionality.     *      * @return the month of year property     */,
E,/**     * Get the day of month field property which provides access to advanced functionality.     *      * @return the day of month property     */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the value of this field.         *          * @return the field value         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative, null means zero     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative, null means zero     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,/** * Returns * the title over the image * @return */,
N,/**     * @return the suite of tests being tested     */,
E,/* play a card */,
E,/* play a card */,
E,/**     * Returns true if this object has buffered data for reading.     *     * @param context the context to be used     * @return true if there is data still available for reading.     */,
E,"/**     * Converts an array of characters representing hexadecimal values into an array of bytes of those same values. The     * returned array will be half the length of the passed array, as it takes two characters to represent any given     * byte. An exception is thrown if the passed char array has an odd number of elements.     *     * @param data     *            An array of characters containing hexadecimal digits     * @return A byte array containing binary data decoded from the supplied char array.     * @throws DecoderException     *             Thrown if an odd number or illegal of characters is supplied     */",
E,"/*     * Returns whether the array contains the key, or not.     */",
E,"/**         * Creates a new branch, identical to this branch.         *         * @return a new, identical branch         */",
E,"/**     * Handles 'A', 'E', 'I', 'O', 'U', and 'Y' cases.     */",
E,/**     * Handles 'C' cases.     */,
E,/**     * Handles 'CC' cases.     */,
E,/**     * Handles 'CH' cases.     */,
E,/**     * Handles 'D' cases.     */,
E,/**     * Handles 'G' cases.     */,
E,/**     * Handles 'H' cases.     */,
E,/**     * Handles 'J' cases.     */,
E,/** True if the entry is expired. */,
E,/** True if a refresh is needed from the original data source. */,
E,"/**     * Forces this dispatcher to quit immediately. If any requests are still in the queue, they are     * not guaranteed to be processed.     */",
E,"/**         * For cacheable requests, if a request for the same cache key is already in flight, add it         * to a queue to wait for that in-flight request to finish.         *         * @return whether the request was queued. If false, we should continue issuing the request         *     over the network. If true, we should put the request on hold to be processed when the         *     in-flight request finishes.         */",
E,"/** Returns true if this policy has attempts remaining, false otherwise. */",
E,/**     * Creates a new network response for an OK response with no headers.     *     * @param data Response body     */,
E,"/**     * Creates a new request with the given method (one of the values from {@link Method}), URL, and     * error listener. Note that the normal response listener is not provided here as delivery of     * responses is provided by subclasses, who have a better idea of how to deliver an     * already-parsed response.     */",
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/** Return the method for this request. Can be one of the values in {@link Method}. */,
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/** Adds an event to this request's event log; for debugging. */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Sets the sequence number of this request. Used by {@link RequestQueue}.     *     * @return This Request object to allow for chaining.     */,
E,/** Reads the contents of an InputStream into a byte[]. */,
E,/**     * Combine cache headers with network response headers for an HTTP 304 response.     *     * <p>An HTTP 304 response does not have all header fields. We have to use the header fields     * from the cache entry plus the new ones from the response. See also:     * http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5     *     * @param responseHeaders Headers from the network response.     * @param entry The cached response.     * @return The combined list of headers.     */,
E,"/**     * Returns a buffer from the pool if one is available in the requested size, or allocates a new     * one if a pooled one is not available.     *     * @param len the minimum size, in bytes, of the requested buffer. The returned buffer may be     *     larger.     * @return a byte[] buffer is always returned.     */",
E,/** Returns a file object for the given cache key. */,
E,/**     * Puts the entry with the specified key into the cache.     *     * @param key The key to identify the entry by.     * @param entry The entry to cache.     */,
E,/** Removes the entry identified by 'key' from the cache. */,
E,/** Creates a cache entry for the specified data. */,
E,/** Returns the HTTP status code of the response. */,
E,/**     * Clear page history for the app.     */,
E,/**     * Determine if log level will be logged     *     * @param logLevel     * @return true if the parameter passed in is greater than or equal to the current log level     */,
E,/**     * Changes the bridge mode.     */,
E,"/**     * Combines and returns queued messages combined into a single string.     * Combines as many messages as possible, while staying under MAX_PAYLOAD_SIZE.     * Returns null if the queue is empty.     */",
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a plugin class that implements a service to the service entry table.     * This does not create the plugin object instance.     *     * @param entry             The plugin entry     */,
E,/**     * Called when the activity is becoming visible to the user.     */,
E,/**     * Called when the activity is no longer visible to the user.     */,
E,/**     * The final call you receive before your activity is destroyed.     */,
E,/**     * Called when the activity receives a new intent.     */,
E,"/**     * Called when the webview is going to request an external resource.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the resource to load,     *                  false to block the resource.     */",
E,"/**     * Called when the webview is going to change the URL of the loaded content.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the navigation,     *                  false to block the navigation.     */",
E,/**     * Called when the webview is requesting the exec() bridge be enabled.     */,
E,"/**     * Called when the webview is going not going to navigate, but may launch     * an Intent for an URL.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the URL to launch an intent,     *                  false to block the intent.     */",
E,"/**     * Called when the URL of the webview changes.     *     * @param url               The URL that is being changed to.     * @return                  Return false to allow the URL to load, return true to prevent the URL from loading.     */",
E,/**     * Create a plugin based on class name.     */,
E,/**     * Called by the system when the device configuration changes while your activity is running.     *     * @param newConfigThe new device configuration     */,
E,/**     * Determine if URL is in approved list of URLs to load.     *     * @param uri     * @return true if wide open or whitelisted     */,
E,/**     * Ask the host application for a custom progress view to show while     * a <video> is loading.     * @return View The progress view.     */,
E,/** Used when created via reflection. */,
E,/** * Create the frame. */,
E,/** * Launch the application. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
N,/**     * This function is run when the robot is first started up and should be     * used for any initialization code.     */,
E,/** * get a new vertex * @return named vertex */,
E,/** * reset to a neutral state */,
E,/** * string representation */,
E,"/** * compare edge to edge * from Comparable, to allow sorting edges by weight */",
E,/** * add edge to forest *  * @param e edge to be added */,
E,/** * remove a tree from the forest *  * @param t tree */,
E,/** Add a new element at the end of this list */,
E,/** Return true if this list contains no elements */,
E,/** Return the number of elements in this list */,
E,/** Remove the first occurrence of the element o from this list.   *  Shift any subsequent elements to the left.   *  Return true if the element is removed. */,
E,/** Create a default list */,
E,/** Create a list from an array of objects */,
E,/** Return the head element in the list */,
E,/** Return the last element in the list */,
E,/** Add an element to the beginning of the list */,
E,/** Add an element to the end of the list */,
E,/** Add a new element at the specified index in this list     * The index of the head element is 0 */,
E,/** Remove the head node and     *  return the object that is contained in the removed node. */,
E,/** Remove the last node and     * return the object that is contained in the removed node. */,
E,/** Remove the element at the specified position in this list.     *  Return the element that was removed from the list. */,
E,/** Clear the list */,
E,"/** Returns true if this linked list contains the element e, otherwise returns false     * @return .*/",
E,"/** Returns the element at specified index of this list, returns null if index is invalid. */",
E,"/** Returns the index of the first matching element in this linked list, return !-1 if no match. */",
E,"/** Returns the index of the last matching element in this list, returns !-1 if no match. */",
E,"/** Replaces the element at specified index in this linked list with the specified element.  Returns the old element at specified index, otherwise returns null if index is invalid. */",
E,/** Main method - DO NOT CHANGE THIS CODE!!!! */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the DisRule wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOver wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameWon wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Life wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Message wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Quit wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Rules wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Story wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Timer wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOverScreen wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**   * Observes the value of any new tiles that was formed   *   * @return   */,
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,/**   * Draws Tiles in a square arrangement   */,
E,/**   * Draws Tiles in a square arrangement   */,
E,/** * Create the frame. */,
E,/** * method that returns the URL passed into this download frame * @return */,
E,/** * returns instance of this download frame * @return */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return musicpath */,
E,/** * this method should read the log file and return imagePath */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/**     * Create a byte array with a specific size filled with specified data.     *     * @param size the size of the byte array.     * @param data the data to put in the byte array.     * @return the JSON byte array.     */,
E,"/**     * Create a User.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which has a required relationship to the User entity.     */",
E,"/**     * Create an entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**     * Create an updated entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**    * Users can call this method to add new points to the plot for this graph.    * Once a point is added, it cannot be removed from the graph. The graph    * class uses lazy evaluation for all plotting functions so nothing will show    * up until a showGraph() method is called.    *     * @param newPoints    *           the array of new points to add to the graph    */",
E,/**    * this methods shows the graph with all of the current points and lines that    * the user added.    */,
E,/**    * this method reads all the data files for the bird names listed in the enum    * Birds and generates a corresponding processed file named:    * [birdName]_out.txt    */,
E,"/** If size = length of d, double the length of array d. <br> * The worst-case time is proportional to the length of d. */",
E,/** Return the size of this heap. <br> * This operation takes constant time. */,
E,"/** Return the shortest path from node v to node end <br>     * ---or the empty list if a path does not exist. <br>     * Note: The empty list is NOT ""null""; it is a list with 0 elements. */",
E,/** Return the direction. */,
E,/** Return a new point that is this point with p added to it. */,
E,/** Return a randomly determined gold value for a given tile. */,
E,"/** Given tiles t without edges and a supplier to return edge weights, <br> * add edges to the nodes between adjacent non-wall tiles. <br> * Precondition: all elements of {@code tiles} are non-null. */",
E,/** Generate a new random graph that fits within the grid and return the set of nodes. */,
E,/** Return the number of open floor tiles in this cavern <br> * (this is the size of the graph). */,
E,/** Return the number of rows in the grid. */,
E,/** Return the number of columns in the grid. */,
E,/** Return the set of all nodes in the graph. <br> * This is an umodifiable view of the graph. */,
E,/** Return the node corresponding to the entrance to the cavern. */,
E,"/** Return the Tile information for tile (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,"/** Return the node at the given (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,/** Return the Node on this edge that is not equal to n. <br> * Throw an IllegalArgumentException if n is not in this Edge. */,
E,/** Return the length of this Edge */,
E,/** Return the source of this edge. */,
E,/** Return destination of edge */,
E,"/** Run through the game, one step at a time. <br>     * Will run scram() only if hunt() succeeds. <br>     * Does not use a timeout and will wait as long as necessary. */",
E,"/** Return the Manhattan distance from (row, col) to the target */",
E,"/** Given seed, whether or not to use the GUI, and an instance <br>     * of a solution to use, run the game. */",
E,/** Return the number of elements in the priority queue.<br> * This operation takes constant time. */,
