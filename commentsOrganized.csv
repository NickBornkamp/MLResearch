E,/**     * This method was generated by MyBatis Generator.     * This method returns the value of the database column neuedu_cart.product_id     *     * @return the value of neuedu_cart.product_id     *     * @mbggenerated     */,
E,/**     * This method was generated by MyBatis Generator.     * This method sets the value of the database column neuedu_cart.product_id     *     * @param productId the value for neuedu_cart.product_id     *     * @mbggenerated     */,
E,/** This function will save member data from ArrayList to the text file in tab delimited file format. *  * @param fname * @param memberData * @return */,
E,/** This function will save member data from ArrayList into BinaryFile format *  * @param fname * @param memberData * @return */,
E,/** This function will save members in Array List in a XML file format *  * @param fname * @param memberData * @return */,
E,/* * Welcome function will print the greeting message to the screen. */,
E,/** * This Show Menu function will print list of options that user can choose from. */,
E,/** * This addMember function will allow the user to enter a new member. */,
E,/**     * Create the test case     *     * @param testName name of the test case     */,
E,/**     * @return the suite of tests being tested     */,
E,"/**   * Returns a new Token object, by default. However, if you want, you   * can create and return subclass objects based on the value of ofKind.   * Simply add the cases to the switch for all those special cases.   * For example, if you have a subclass of Token called IDToken that   * you want to create if ofKind is ID, simlpy add something like :   *   *    case MyParserConstants.ID : return new IDToken();   *   * to the following switch statement. Then you can cast matchedToken   * variable to the appropriate type and use it in your lexical actions.   */",
E,/*    * Constructors of various flavors follow.    */,
E,/**    * Replaces unprintable characters by their espaced (or unicode escaped)    * equivalents in the given string    */,
E,/**    * Returns a detailed message for the Error when it is thrown by the    * token manager to indicate a lexical error.    * Parameters :     *    EOFSeen     : indicates if EOF caused the lexicl error    *    curLexState : lexical state in which this error occured    *    errorLine   : line number when the error occured    *    errorColumn : column number when the error occured    *    errorAfter  : prefix that was seen before this error occured    *    curchar     : the offending character    * Note: You can customize the lexical error message by modifying this method.    */,
E,"/**    * You can also modify the body of this method to customize your error messages.    * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not    * of end-users concern, so you can return something like :     *    *     ""Internal Error : Please file a bug report .... ""    *    * from this method for such cases in the release version of your parser.    */",
E,/**    * The default constructor assumes an indentation amount of 3 spaces    * and no line-wrap.  You may alternately use the other constructor to    * specify your own indentation amount and line width.    */,
E,"/**    * This constructor accepts an indent amount and a line width which is    * used to wrap long lines.  If a token's beginColumn value is greater    * than the specified wrapWidth, it will be moved to the next line and    * indented one extra level.  To turn off line-wrapping, specify a    * wrapWidth of 0.    *    * @param   indentAmt   Amount of spaces per indentation level.    * @param   wrapWidth   Wrap lines longer than wrapWidth.  0 for no wrap.    */",
E,/**    * Use this method to add FormatCommands to the command queue to be    * executed when the next token in the tree is visited.    */,
E,"/**   * Prints (list ""name"" ""returnType"" ""args"") to the system output.   *   * @param name method name   * @param returnType method return type   * @param args method arguments   */",
E,"/**   * Prints (list ""className"") to the system output.   *   * @param name className   */",
E,/**   * <code>printExceptions</code>   *   * @param exceptions a <code>Class[]</code>   * @return a <code>String</code>   */,
E,/**   * Recursively finds fields of the specified access level in the   * supplied class and superclasses.   *   * @param c the class to start the search in - nothing is done if   * this is NULL   * @param level  the access level to look for   * @param sb the StringBuffer where the results should be added   */,
E,/**   * Finds constructors of the specified access level in the supplied class.   *   * @param c the class to search in   * @param level  the access level to look for   * @param sb the StringBuffer where the results should be added   */,
E,/**   * Recursively finds methods of the specified access level in the   * supplied class and superclasses.   *   * @param c the class to start the search in - nothing is done if this is   * NULL   * @param level  the access level to look for   * @param sb the StringBuffer where the results should be added   */,
E,/**   * Recursively finds inner classes of the specified access level   * in the supplied class and superclasses.   *   * @param c the class to start the search in - nothing is done if this is   * NULL   * @param level  the access level to look for   * @param sb the StringBuffer where the results should be added   */,
E,/**   * Looks up an unqualified class name in the class path to find possible   * fully qualified matches.   *   * @param className a value of type 'String'   * @param imports   an array of imported packages   */,
E,"/**   * Loads a class information from the file system,   * if it fails it tries Class.forName(argClassName)   *   * @param argClassName name of the class to be loaded.   * @return Class of the type argClassName   * @exception ClassNotFoundException if the class cannot be found.   */",
E,/**     *     * @param param1 <description>     */,
E,/**   * Reload the current project's classpath.   */,
E,"/**   * Looks up an unqualified class name in the class path to find possible   * fully qualified matches.  Given `List,' this will find   * `java.util.List' and `java.awt.List'   *   * @param className a value of type 'String'   */",
E,"/**     * Convenience method for retrieving the value for     * <code>key</code> as a List, even when there is only a single     * value for that key in the map.  The EMPTY_LIST is returned when     * no value is found for <code>key</code> making null checks     * unnecessary.     *     * @param key an <code>Object</code> value     * @return a <code>List</code> value     */",
E,"/**     * inserts value into the map for key as a single element or, if     * values already exist, as an entry in key's list.     *     * @param key an <code>Object</code> value     * @param value an <code>Object</code> value     * @return null     */",
E,/**   * Reload all classes in classpath.   *   * @exception IOException if an error occurs   */,
E,/**   * Get the classpath represented by this project.   *   * @return a <code>String</code> value   */,
E,/**   * Get fully qualified classnames in this classpath that   * matching the specified unqualified name.   *   * @param unqualifiedName Unqualified name for which matching   * qualified names are to be found.   * @return list of qualified names.   * @exception IOException if an error occurs   */,
E,/**   * loads the boot classpath entries.   *   * @exception IOException if an error occurs   */,
E,/**      * Creates an AbstractClassFactory that uses the specified NameFactory for     * generating parameter names     *     * @param factory Factory for generating parameter names     */,
E,/**     * Generates signatures based on introspection of the specified class.     *     * @param name the abstract class to process for signatures.     * @param truncate toggles truncation of package specifiers in signatures.     *     * @exception NotAnAbstractClassException the requested class isn't an     * abstract class     * @exception java.lang.ClassNotFoundException the requested class cannot     * be loaded     */,
E,/**     * Creates a list of the abstract methods in argClass     *     * @param argClass Class to obtained the abstract methods from     * @param abstractMethods Contains a list of the abstract methods.     * @return a <code>Methods[]</code> containing abstract methods     */,
E,/**     * Adds the abstract methods in <code>methods</code> into abstractMethods.     *     * @param methods a <code>Method[]</code> to be added     * @param abstractMethods a <code>Vector</code> to add abstract methods.     */,
E,"/**     * Makes an implementation of the abstract methods of an abstract class.     * This method delegates the creation of the implementation to     * makeAbstractClassInternal.     *     * @param name Name of abstract class to be implemented.     * @param truncate If <code>true</code>, truncate package specifier     * when generating code.     */",
E,"/**     * Makes an implementation of the abstract methods of an abstract class.     *     * @param name Name of abstract class to be implemented.     * @param truncate If <code>true</code>, truncate package specifier     * when generating code.     */",
E,"/**   * Make up a name for the nth parameter of a method.   * First this method tries to recognize bean methods, if the method is named   * ""setName"" and has one parameter, the parameter returned is the   * lowercased method name with ""set"" stripped: ""name"".   *   * Index Bean Properties are methods starting with ""set"" and having two   * parameters, the first one of which is an int, or methods starting with   * ""get"" and having only one int parameter. In both cases the first   * parameter is given the name ""index"".    *        * Examples:   *   *   void setName(String name);   *   void setNames(String[] names);   *   void setName(int index, String name);   *   String getName(int index);   *   * For other method names the parameters are named according to their   * type.    *   * Primitive types are named after the following mapping (now   * hardcoded, can perhaps be made configurable):   *   *   boolean: flag   *   byte: b   *   char: c   *   short: s   *   int: n   *   long: l   *   f","loat: f   *   double: d   *    * Array types are named like their base type with the String ""Array""   * appended, so a ""byte[]"" parameter will be named ""byteArray"":   *   *    void fill(char[] charArray);   *   * All other parameters will be named according to their type's unqualified   * lowercased classname:   *   *    void actionPerformed(ActionEvent actionEvent);   *   * To avoid any name clashes, the parameters will have a number appended   * if there is another parameter of the same type in the methods   * parameterlist:   *   *   void write(byte[] byteArray, int n, int n1);   *   void put(String string, String string1);   *   * @param sig  - signature of the declaring method   * @param num     - the parameter number whose name we want.   * @return a name for the n'th parameter of the method.   */"
E,/**   * Generate a name for a parameter from the type of the parameter.   *   * @param className  the parameters type   * @return a more or less fitting name.   */,
E,"/**   * Make name unique, look if there a more parameters of this type   * before us. In this case append a number.   *   * @param parameters all parameter types of the method   * @param type the type of the current parameter   * @param num the position of the current parameter   * @param name parameter basename   * @return a unique parameter name   */",
E,/**   * Strip the first characters from the string and decapitalize   * the rest.   *   * @param name the original name.   * @param strip number of characters to strip from the front of the name.   * @return the decapitalized and shortened name.   */,
E,/**   * Creates a new <code>DelegateFactory</code> instance.   *   */,
E,/**    * Creates a DelegateFactory that uses the specified NameFactory   * for generating parameter names    *   * @param factory Factory for generating parameter names   */,
E,/**   * Gets a container containing the signatures of the delegation   * methods.   *   * @return the value of signatures   */,
E,/**   * Specifies a container to hold the signatures of the   * delegator methods.   *   * @param argSignatures signature container   */,
E,/**   * Gets the Delegate Factory   *   * @return the Delegate Factory   */,
E,/**   * Sets the Delegate Factory   *   * @param argDelegateFactory the Delegate Factory   */,
E,/**   * Gets the name of the delegator field that references the delegee.   *   * @return name of the delegee   */,
E,/**   * Specifies the name of the delegator field that references the delegee.   *   * @param argDelegee the delegee   */,
E,/**    * Clears the method signatures container.   */,
E,/**   * Generates signatures for the public methods of the delegee   * class.    *   * @param delegeeClassName name of the delegee's class   * @param truncate toggles truncation of package specifiers in signatures.   *   * @exception ClassNotFoundException the requested class cannot   * be loaded    */,
E,"/**   * Generate delegator methods.   *   * @param delegeeFieldName Name of delagator field that reference   * the delegee.   * @param delegeeClassName  Name of delegee class.   * @param truncate If <code>true</code>, truncate package specifier   * when generating code.   *    */",
E,"/**   * Generates delegator methods.   *   * @param delegeeFieldName Name of delegator field that   * references the delegee.   * @param delegeeClassName Name of delegee's class.   * @param truncate If <code>true</code>, truncate package specifier   * when generating code.   */",
E,/**   * Describe <code>getImportedClasses</code> method here.   *   */,
E,/**   * Return a default body for the implementation of the method described   * by <code>sig</code>.   *   * @param sig a <code>Signature</code> value   * @return a <code>String</code> value   */,
E,"/**   * Prints delegator methods to the standard out of   * the current process, i.e., to Emacs.   *   * @param out a <code>PrintWriter</code> value   * @param truncate a <code>boolean</code> value   */",
E,/**    * Creates an EventSourceFactory that uses the specified NameFactory   * for generating parameter names    *   * @param factory Factory for generating parameter names   */,
E,"/**   * Makes an implementation of an interface. This method delegates   * the creation of the implementation to makeInterfaceInternal.   *   * @param name Name of interface to be implemented.   * @param truncate If <code>true</code>, truncate package specifier   * when generating code.   */",
E,"/**   * Makes an implementation of an interface.   *   * @param name Name of interface to be implemented.   * @param truncate If <code>true</code>, truncate package specifier   * when generating code.   */",
E,/**   * Adds the classes from the supplied Zip file to the class list.   *   * @param classList the Vector to add the classes to   * @param classPathFile the File to scan as a zip file   */,
E,/**   * Adds the classes from the supplied directory to the class list.   *   * @param classList the Vector to add the classes to   * @param classPathFile the File to recursively scan as a directory   */,
E,/**   * Looks up an unqualified class name in the class path to find possible   * fully qualified matches.   *   * @param className a value of type 'String'   */,
E,/**   * Tests the ImportWizard from the command line   *   * @param args an array of strings containing class names to look up   */,
E,/**    * Creates an InterfaceFactory that uses the specified NameFactory   * for generating parameter names    *   * @param factory Factory for generating parameter names   */,
E,/**   * Gets the value of signatures   *   * @return the value of signatures   */,
E,/**   * Sets the value of signatures   *   * @param argSignatures Value to assign to this.signatures   */,
E,/**   * Gets the value of interfaceFactory   *   * @return the value of interfaceFactory   */,
E,/**   * Sets the value of interfaceFactory   *   * @param argInterfaceFactory Value to assign to this.interfaceFactory   */,
E,/** * Construct message from array of bytes (e.g. received through socket). * The values are expected to be encoded in Network Byte Order. *  * @param buffer Array of bytes (size `MESSAGE_SIZE`) * @return Parsed message */,
E,"/** * Serialize the message as a byte array. All values * are stored with MSB first, Network Byte Order. *  * @return The message serialized as an array of bytes  */",
E,"/* public void K3(){        public void J3(){    System.out.println(""J3"");//java doesnot support inner method    }        System.out.println(""K3"");    }*/",
E,"/* public void K3(){        public void J3(){    System.out.println(""J3"");//java doesnot support inner method    }        System.out.println(""K3"");    }*/",
E,"/* public void K3(){        public void J3(){    System.out.println(""J3"");//java doesnot support inner method    }        System.out.println(""K3"");    }*/",
E,"/**     * Remember that float only stores a precision of 6-7 digits, if you need more use double     * <p>     * https://www.educba.com/java-float-vs-double/     */",
E,"/**     * Remember that float only stores a precision of 6-7 digits, if you need more use double     * <p>     * https://www.educba.com/java-float-vs-double/     */",
E,/**     * Constructor to initialize the stack.     *     * @param s - the size of the stack     */,
E,/**     * Method that adds a new element to the stack.     *     * @param value - the value to be added     * @return - true if the value was inserted successfully and false otherwise     */,
E,/**     * Method that returns end removes the top element from the stack. Program will close if the stack is empty.     *     * @return - the top element from the stack     */,
E,/**     * @return - the top element from the stack without removing it.     */,
E,/**     * Method that checks if the stack is empty.     *     * @return - true if the stack is empty and false otherwise.     */,
E,/**     * Method that check if the stack is full.     *     * @return - true if the stack is full and false otherwise     */,
E,/**    @Deprecated    reason - we will not be using this anymore     */,
E,/*         * LIST - ordered collection of elements.         * Elements can be accessed by their index.         */,
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,"/*    If we had used inheritance and one of our other subclasses    had used this method but we wanted to remove it we would    have been locked in, composition keeps things flexible.     */",
E,/*The Java throws keyword is used to declare an exception.It gives an information to the programmer that there may occur an exceptionso it is better for the programmer to provide the exception handlingcode so that normal flow can be maintained. Exception Handling ismainly used to handle the checked exceptions. */,
E,/*The Java throws keyword is used to declare an exception.It gives an information to the programmer that there may occur an exceptionso it is better for the programmer to provide the exception handlingcode so that normal flow can be maintained. Exception Handling ismainly used to handle the checked exceptions. */,
E,"/** Puts an X or O mark at position i,j. */",
E,"/** Puts an X or O mark at position i,j. */",
E,/** Checks whether the board configuration is a win for the given player. */,
E,"/** * Write a program that reads 3 numbers: an integer a (0 <= a <= 500), * a floating-point b and a floating-point c and prints them in  * 4 virtual columns on the console. Each column should have a width of 10 characters. * The number a should be printed in hexadecimal, left aligned; * then the number a should be printed in binary form, padded with zeroes, * then the number b should be printed with 2 digits after the decimal point, right aligned; * the number c should be printed with 3 digits after the decimal point, left aligned */",
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,/** * Write a program to calculate the count of bits 1 in the binary * representation of given integer number n */,
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/** * Write a program to count how many sequences of two equal bits (""00"" or ""11"") can be found  * in the binary representation of given integer number n (with overlapping). */",
E,"/**     * This is the main swing application method.   It sets up and displays the     * initial GUI, and controls execution thereafter.  Everything else in     * this class is 'private', please read the code.     */",
E,/*     * usage A private static method to display usage information to     * the user before an error exit.     */,
E,"/*     * go This method reads the file, creates the table to display,     * the window to display it in, and displays the window.     * @param fileName the name of the file to read.     * @param tryLines An estimate of the number of lines in     * the file.     */",
E,/*     * getDefaultTableView     */,
E,/*    * setDefaultTableView    */,
E,/*     * setDefaultTimeZone     */,
E,/*     * addMenus     */,
E,/*     * A private method to dump the arrays of Object[][]     * if desired by the developer     * @param objs The array of arrays to be dumped.     */,
E,/*     * enableAll     */,
E,"/*     * getADate Returns a new DateTime object reference if possible,     * otherwise null.     * @return retDT A DateTime object reference.     */",
E,"/*     * LPad Return a String, left padded with '0's as specified     * by the caller.     */",
E,/*     * resetDefaults     */,
E,/*         * General getters.         */,
E,/*         * validateFile         */,
E,/*         * genColNames is required by the base class.         */,
E,/*         * genCalcdValues is required by the base class.         */,
E,/*         * getViewTitle         */,
E,"/**     * Returns a copy of this date with the value of the specified field increased.     * <p>     * If the addition is zero or the field is null, then <code>this</code> is returned.     * <p>     * These three lines are equivalent:     * <pre>     * DateMidnight added = dt.withFieldAdded(DateTimeFieldType.year(), 6);     * DateMidnight added = dt.plusYears(6);     * DateMidnight added = dt.year().addToCopy(6);     * </pre>     *      * @param fieldType  the field type to add to, not null     * @param amount  the amount to add     * @return a copy of this datetime with the field updated     * @throws IllegalArgumentException if the value is null or invalid     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date with the specified duration added.     * <p>     * If the addition is zero, then <code>this</code> is returned.     *      * @param durationToAdd  the duration to add to this one     * @param scalar  the amount of times to add, such as -1 to subtract once     * @return a copy of this datetime with the duration added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date with the specified duration added.     * <p>     * If the addition is zero, then <code>this</code> is returned.     *      * @param durationToAdd  the duration to add to this one, null means zero     * @param scalar  the amount of times to add, such as -1 to subtract once     * @return a copy of this datetime with the duration added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the addition is zero, then <code>this</code> is returned.     * <p>     * This method is typically used to add multiple copies of complex     * period instances. Adding one field is best achieved using methods     * like {@link #withFieldAdded(DurationFieldType, int)}     * or {@link #plusYears(int)}.     *      * @param period  the period to add to this one, null means zero     * @param scalar  the amount of times to add, such as -1 to subtract once     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date with the specified duration added.     * <p>     * If the amount is zero, then <code>this</code> is returned.     *      * @param duration  the duration, in millis, to add to this one     * @return a copy of this datetime with the duration added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date with the specified duration added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     *      * @param duration  the duration to add to this one, null means zero     * @return a copy of this datetime with the duration added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date plus the specified number of years.     * <p>     * This datetime instance is immutable and unaffected by this method call.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateMidnight added = dt.plusYears(6);     * DateMidnight added = dt.plus(Period.years(6));     * DateMidnight added = dt.withFieldAdded(DurationFieldType.years(), 6);     * </pre>     *     * @param years  the amount of years to add, may be negative     * @return the new datetime plus the increased years     * @since 1.1     */",
E,"/**     * Returns a copy of this date plus the specified number of months.     * <p>     * This datetime instance is immutable and unaffected by this method call.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateMidnight added = dt.plusMonths(6);     * DateMidnight added = dt.plus(Period.months(6));     * DateMidnight added = dt.withFieldAdded(DurationFieldType.months(), 6);     * </pre>     *     * @param months  the amount of months to add, may be negative     * @return the new datetime plus the increased months     * @since 1.1     */",
E,"/**     * Returns a copy of this date plus the specified number of weeks.     * <p>     * This datetime instance is immutable and unaffected by this method call.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateMidnight added = dt.plusWeeks(6);     * DateMidnight added = dt.plus(Period.weeks(6));     * DateMidnight added = dt.withFieldAdded(DurationFieldType.weeks(), 6);     * </pre>     *     * @param weeks  the amount of weeks to add, may be negative     * @return the new datetime plus the increased weeks     * @since 1.1     */",
E,"/**     * Returns a copy of this date plus the specified number of days.     * <p>     * This datetime instance is immutable and unaffected by this method call.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateMidnight added = dt.plusDays(6);     * DateMidnight added = dt.plus(Period.days(6));     * DateMidnight added = dt.withFieldAdded(DurationFieldType.days(), 6);     * </pre>     *     * @param days  the amount of days to add, may be negative     * @return the new datetime plus the increased days     * @since 1.1     */",
E,"/**     * Returns a copy of this date with the specified duration taken away.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     *      * @param duration  the duration, in millis, to reduce this instant by     * @return a copy of this datetime with the duration taken away     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date with the specified duration taken away.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     *      * @param duration  the duration to reduce this instant by     * @return a copy of this datetime with the duration taken away     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date with the specified period taken away.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to subtract complex period instances.     * Subtracting one field is best achieved using methods     * like {@link #minusYears(int)}.     *      * @param period  the period to reduce this instant by     * @return a copy of this datetime with the period taken away     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date minus the specified number of years.     * <p>     * This datetime instance is immutable and unaffected by this method call.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateTime subtracted = dt.minusYears(6);     * DateTime subtracted = dt.minus(Period.years(6));     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.years(), -6);     * </pre>     *     * @param years  the amount of years to subtract, may be negative     * @return the new datetime minus the increased years     * @since 1.1     */",
E,"/**     * Returns a copy of this date minus the specified number of months.     * <p>     * This datetime instance is immutable and unaffected by this method call.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateMidnight subtracted = dt.minusMonths(6);     * DateMidnight subtracted = dt.minus(Period.months(6));     * DateMidnight subtracted = dt.withFieldAdded(DurationFieldType.months(), -6);     * </pre>     *     * @param months  the amount of months to subtract, may be negative     * @return the new datetime minus the increased months     * @since 1.1     */",
E,"/**     * Returns a copy of this date minus the specified number of weeks.     * <p>     * This datetime instance is immutable and unaffected by this method call.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateMidnight subtracted = dt.minusWeeks(6);     * DateMidnight subtracted = dt.minus(Period.weeks(6));     * DateMidnight subtracted = dt.withFieldAdded(DurationFieldType.weeks(), -6);     * </pre>     *     * @param weeks  the amount of weeks to subtract, may be negative     * @return the new datetime minus the increased weeks     * @since 1.1     */",
E,"/**     * Returns a copy of this date minus the specified number of days.     * <p>     * This datetime instance is immutable and unaffected by this method call.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateMidnight subtracted = dt.minusDays(6);     * DateMidnight subtracted = dt.minus(Period.days(6));     * DateMidnight subtracted = dt.withFieldAdded(DurationFieldType.days(), -6);     * </pre>     *     * @param days  the amount of days to subtract, may be negative     * @return the new datetime minus the increased days     * @since 1.1     */",
E,"/**     * Returns a copy of this date with the era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the century of era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * century of era changed.     *     * @param centuryOfEra  the centurey of era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of era field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of era changed.     *     * @param yearOfEra  the year of era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year of century field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of century changed.     *     * @param yearOfCentury  the year of century to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the weekyear field updated.     * <p>     * The weekyear is the year that matches with the weekOfWeekyear field.     * In the standard ISO8601 week algorithm, the first week of the year     * is that in which at least 4 days are in the year. As a result of this     * definition, day 1 of the first week may be in the previous year.     * The weekyear allows you to query the effective year for that day.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * weekyear changed.     *     * @param weekyear  the weekyear to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the month of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the week of weekyear field updated.     * <p>     * This field is associated with the ""weekyear"" via {@link #withWeekyear(int)}.     * In the standard ISO8601 week algorithm, the first week of the year     * is that in which at least 4 days are in the year. As a result of this     * definition, day 1 of the first week may be in the previous year.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * week of weekyear changed.     *     * @param weekOfWeekyear  the week of weekyear to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of year field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of year changed.     *     * @param dayOfYear  the day of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of month field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this date with the day of week field updated.     * <p>     * DateMidnight is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of week changed.     *     * @param dayOfWeek  the day of week to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Gets the datetime being used.         *          * @return the datetime         */,
E,"/**         * Adds to this field in a copy of this DateMidnight.         * <p>         * The DateMidnight attached to this property is unchanged by this call.         * This operation is faster than converting a DateMidnight to a MutableDateTime         * and back again when setting one field. When setting multiple fields,         * it is generally quicker to make the conversion to MutableDateTime.         *          * @param value  the value to add to the field in the copy         * @return a copy of the DateMidnight with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**         * Adds to this field in a copy of this DateMidnight.         * <p>         * The DateMidnight attached to this property is unchanged by this call.         * This operation is faster than converting a DateMidnight to a MutableDateTime         * and back again when setting one field. When setting multiple fields,         * it is generally quicker to make the conversion to MutableDateTime.         *          * @param value  the value to add to the field in the copy         * @return a copy of the DateMidnight with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**         * Adds to this field, possibly wrapped, in a copy of this DateMidnight.         * A wrapped operation only changes this field.         * Thus 31st January addWrapField one day goes to the 1st January.         * <p>         * The DateMidnight attached to this property is unchanged by this call.         * This operation is faster than converting a DateMidnight to a MutableDateTime         * and back again when setting one field. When setting multiple fields,         * it is generally quicker to make the conversion to MutableDateTime.         *          * @param value  the value to add to the field in the copy         * @return a copy of the DateMidnight with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**         * Sets this field in a copy of the DateMidnight.         * <p>         * The DateMidnight attached to this property is unchanged by this call.         * This operation is faster than converting a DateMidnight to a MutableDateTime         * and back again when setting one field. When setting multiple fields,         * it is generally quicker to make the conversion to MutableDateTime.         *          * @param value  the value to set the field in the copy to         * @return a copy of the DateMidnight with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**         * Sets this field in a copy of the DateMidnight to a parsed text value.         * <p>         * The DateMidnight attached to this property is unchanged by this call.         * This operation is faster than converting a DateMidnight to a MutableDateTime         * and back again when setting one field. When setting multiple fields,         * it is generally quicker to make the conversion to MutableDateTime.         *          * @param text  the text value to set         * @param locale  optional locale to use for selecting a text symbol         * @return a copy of the DateMidnight with the field value changed         * @throws IllegalArgumentException if the text value isn't valid         */",
E,"/**         * Sets this field in a copy of the DateMidnight to a parsed text value.         * <p>         * The DateMidnight attached to this property is unchanged by this call.         * This operation is faster than converting a DateMidnight to a MutableDateTime         * and back again when setting one field. When setting multiple fields,         * it is generally quicker to make the conversion to MutableDateTime.         *          * @param text  the text value to set         * @return a copy of the DateMidnight with the field value changed         * @throws IllegalArgumentException if the text value isn't valid         */",
E,"/**         * Returns a new DateMidnight with this field set to the maximum value         * for this field.         * <p>         * This operation is useful for obtaining a DateTime on the last day         * of the month, as month lengths vary.         * <pre>         * DateMidnight lastDayOfMonth = dt.dayOfMonth().withMaximumValue();         * </pre>         * <p>         * The DateMidnight attached to this property is unchanged by this call.         *         * @return a copy of the DateMidnight with this field set to its maximum         * @since 1.2         */",
E,/**         * Returns a new DateMidnight with this field set to the minimum value         * for this field.         * <p>         * The DateMidnight attached to this property is unchanged by this call.         *         * @return a copy of the DateMidnight with this field set to its minimum         * @since 1.2         */,
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight,         * favoring the floor if halfway.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight,         * favoring the ceiling if halfway.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**     * Obtains a {@code DateMidnight} set to the current system millisecond time     * using the specified chronology.     * The constructed object will have a local time of midnight.     *     * @param chronology  the chronology, not null     * @return the current date, not null     * @since 2.0     */",
E,"/**     * Parses a {@code DateMidnight} from the specified string using a formatter.     *      * @param str  the string to parse, not null     * @param formatter  the formatter to use, not null     * @since 2.0     */",
E,"/**     * Rounds the specified instant to midnight.     *     * @param instant  the milliseconds from 1970-01-01T00:00:00Z to round     * @param chronology  the chronology to use, not null     * @return the updated instant, rounded to midnight     */",
E,"/**     * Returns a copy of this date with a different millisecond instant.     * The returned object will have a local time of midnight.     * <p>     * Only the millis will change, the chronology and time zone are kept.     * The returned object will be either be a new instance or <code>this</code>.     *     * @param newMillis  the new millis, from 1970-01-01T00:00:00Z     * @return a copy of this instant with different millis     */",
E,"/**     * Returns a copy of this date with a different chronology, potentially     * changing the day in unexpected ways.     * <p>     * This method creates a new DateMidnight using the midnight millisecond value     * and the new chronology. If the same or similar chronology is specified, but     * with a different time zone, the day may change. This occurs because the new     * DateMidnight rounds down the millisecond value to get to midnight, and the     * time zone change may result in a rounding down to a different day.     * <p>     * For example, changing time zone from London (+00:00) to Paris (+01:00) will     * retain the same day, but changing from Paris to London will change the day.     * (When its midnight in London its the same day in Paris, but when its midnight     * in Paris its still the previous day in London)     * <p>     * To avoid these unusual effects, use {@link #withZoneRetainFields(DateTimeZone)}     * to change time zones.     *     * @param newChronology",the new chronology     * @return a copy of this instant with a different chronology     */
E,"/**     * Returns a copy of this date with a different time zone, preserving the day     * The returned object will have a local time of midnight in the new zone on     * the same day as the original instant.     *     * @param newZone  the new time zone, null means default     * @return a copy of this instant with a different time zone     */",
E,"/**     * Returns a copy of this date with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>LocalDate</code> then the date fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this date with the specified field set to a new value.     * <p>     * For example, if the field type is <code>dayOfMonth</code> then the day of month     * field would be changed in the returned instance.     * If the field type is null, then <code>this</code> is returned.     * <p>     * These three lines are equivalent:     * <pre>     * DateTime updated = dt.withField(DateTimeFieldType.dayOfMonth(), 6);     * DateTime updated = dt.dayOfMonth().setCopy(6);     * DateTime updated = dt.property(DateTimeFieldType.dayOfMonth()).setCopy(6);     * </pre>     *     * @param fieldType  the field type to set, not null     * @param value  the value to set     * @return a copy of this datetime with the field set     * @throws IllegalArgumentException if the value is null or invalid     */",
E,"/**     * Returns a copy of this date with the value of the specified field increased.     * <p>     * If the addition is zero or the field is null, then <code>this</code> is returned.     * <p>     * These three lines are equivalent:     * <pre>     * DateMidnight added = dt.withFieldAdded(DateTimeFieldType.year(), 6);     * DateMidnight added = dt.plusYears(6);     * DateMidnight added = dt.year().addToCopy(6);     * </pre>     *      * @param fieldType  the field type to add to, not null     * @param amount  the amount to add     * @return a copy of this datetime with the field updated     * @throws IllegalArgumentException if the value is null or invalid     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date with the specified duration added.     * <p>     * If the addition is zero, then <code>this</code> is returned.     *      * @param durationToAdd  the duration to add to this one, null means zero     * @param scalar  the amount of times to add, such as -1 to subtract once     * @return a copy of this datetime with the duration added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the addition is zero, then <code>this</code> is returned.     * <p>     * This method is typically used to add multiple copies of complex     * period instances. Adding one field is best achieved using methods     * like {@link #withFieldAdded(DurationFieldType, int)}     * or {@link #plusYears(int)}.     *      * @param period  the period to add to this one, null means zero     * @param scalar  the amount of times to add, such as -1 to subtract once     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this date plus the specified number of years.     * <p>     * This datetime instance is immutable and unaffected by this method call.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateMidnight added = dt.plusYears(6);     * DateMidnight added = dt.plus(Period.years(6));     * DateMidnight added = dt.withFieldAdded(DurationFieldType.years(), 6);     * </pre>     *     * @param years  the amount of years to add, may be negative     * @return the new datetime plus the increased years     * @since 1.1     */",
E,"/**     * Returns a copy of this date plus the specified number of months.     * <p>     * This datetime instance is immutable and unaffected by this method call.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateMidnight added = dt.plusMonths(6);     * DateMidnight added = dt.plus(Period.months(6));     * DateMidnight added = dt.withFieldAdded(DurationFieldType.months(), 6);     * </pre>     *     * @param months  the amount of months to add, may be negative     * @return the new datetime plus the increased months     * @since 1.1     */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateMidnight.         *         * @return a copy of the DateMidnight with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight,         * favoring the floor if halfway.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight,         * favoring the ceiling if halfway.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateMidnight.         * If halfway, the ceiling is favored over the floor only if it makes this field's value even.         *         * @return a copy of the DateMidnight with the field value changed         */",
E,/**     * Constructs an instance set to the current system millisecond time     * using <code>ISOChronology</code> in the default time zone.     *      * @see #now()     */,
E,"/**     * Constructs an instance set to the current system millisecond time     * using <code>ISOChronology</code> in the specified time zone.     * <p>     * If the specified time zone is null, the default zone is used.     *     * @param zone  the time zone, null means default zone     * @see #now(DateTimeZone)     */",
E,"/**     * Constructs an instance set to the current system millisecond time     * using the specified chronology.     * <p>     * If the chronology is null, <code>ISOChronology</code>     * in the default time zone is used.     *     * @param chronology  the chronology, null means ISOChronology in default zone     * @see #now(Chronology)     */",
E,/**     * Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z     * using <code>ISOChronology</code> in the default time zone.     *     * @param instant  the milliseconds from 1970-01-01T00:00:00Z     */,
E,"/**     * Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z     * using <code>ISOChronology</code> in the specified time zone.     * <p>     * If the specified time zone is null, the default zone is used.     *     * @param instant  the milliseconds from 1970-01-01T00:00:00Z     * @param zone  the time zone, null means default zone     */",
E,"/**     * Constructs an instance set to the milliseconds from 1970-01-01T00:00:00Z     * using the specified chronology.     * <p>     * If the chronology is null, <code>ISOChronology</code>     * in the default time zone is used.     *     * @param instant  the milliseconds from 1970-01-01T00:00:00Z     * @param chronology  the chronology, null means ISOChronology in default zone     */",
E,"/**     * Constructs an instance from an Object that represents a datetime.     * <p>     * If the object implies a chronology (such as GregorianCalendar does),     * then that chronology will be used. Otherwise, ISO default is used.     * Thus if a GregorianCalendar is passed in, the chronology used will     * be GJ, but if a Date is passed in the chronology will be ISO.     * <p>     * The recognised object types are defined in     * {@link org.joda.time.convert.ConverterManager ConverterManager} and     * include ReadableInstant, String, Calendar and Date.     * The String formats are described by {@link ISODateTimeFormat#dateTimeParser()}.     *     * @param instant  the datetime object, null means now     * @throws IllegalArgumentException if the instant is invalid     */",
E,"/**     * Constructs an instance from an Object that represents a datetime,     * forcing the time zone to that specified.     * <p>     * If the object implies a chronology (such as GregorianCalendar does),     * then that chronology will be used, but with the time zone adjusted.     * Otherwise, ISO is used in the specified time zone.     * If the specified time zone is null, the default zone is used.     * Thus if a GregorianCalendar is passed in, the chronology used will     * be GJ, but if a Date is passed in the chronology will be ISO.     * <p>     * The recognised object types are defined in     * {@link org.joda.time.convert.ConverterManager ConverterManager} and     * include ReadableInstant, String, Calendar and Date.     * The String formats are described by {@link ISODateTimeFormat#dateTimeParser()}.     *     * @param instant  the datetime object, null means now     * @param zone  the time zone, null means default time zone     * @throws IllegalArgumentException if the in",stant is invalid     */
E,"/**     * Constructs an instance from an Object that represents a datetime,     * using the specified chronology.     * <p>     * If the chronology is null, ISO in the default time zone is used.     * Any chronology implied by the object (such as GregorianCalendar does)     * is ignored.     * <p>     * The recognised object types are defined in     * {@link org.joda.time.convert.ConverterManager ConverterManager} and     * include ReadableInstant, String, Calendar and Date.     * The String formats are described by {@link ISODateTimeFormat#dateTimeParser()}.     *     * @param instant  the datetime object, null means now     * @param chronology  the chronology, null means ISO in default zone     * @throws IllegalArgumentException if the instant is invalid     */",
E,/**     * Get this object as a DateTime by returning <code>this</code>.     *      * @return <code>this</code>     */,
E,"/**     * Get this object as a DateTime using ISOChronology in the default zone,     * returning <code>this</code> if possible.     *      * @return a DateTime using the same millis     */",
E,"/**     * Get this object as a DateTime, returning <code>this</code> if possible.     *      * @param zone time zone to apply, or default if null     * @return a DateTime using the same millis     */",
E,"/**     * Get this object as a DateTime, returning <code>this</code> if possible.     *      * @param chronology chronology to apply, or ISOChronology if null     * @return a DateTime using the same millis     */",
E,"/**     * Returns a copy of this datetime with different millis.     * <p>     * The returned object will be either be a new instance or <code>this</code>.     * Only the millis will change, the chronology and time zone are kept.     *     * @param newMillis  the new millis, from 1970-01-01T00:00:00Z     * @return a copy of this datetime with different millis     */",
E,"/**     * Returns a copy of this datetime with a different chronology.     * <p>     * The returned object will be either be a new instance or <code>this</code>.     * Only the chronology will change, the millis are kept.     *     * @param newChronology  the new chronology, null means ISO default     * @return a copy of this datetime with a different chronology     */",
E,"/**     * Returns a copy of this datetime with a different time zone, preserving the     * millisecond instant.     * <p>     * This method is useful for finding the local time in another timezone.     * For example, if this instant holds 12:30 in Europe/London, the result     * from this method with Europe/Paris would be 13:30.     * <p>     * The returned object will be a new instance of the same implementation type.     * This method changes the time zone, and does not change the     * millisecond instant, with the effect that the field values usually change.     * The returned object will be either be a new instance or <code>this</code>.     *     * @param newZone  the new time zone     * @return a copy of this datetime with a different time zone     * @see #withZoneRetainFields     */",
E,"/**     * Returns a copy of this datetime with a different time zone, preserving the     * field values.     * <p>     * This method is useful for finding the millisecond time in another timezone.     * For example, if this instant holds 12:30 in Europe/London (ie. 12:30Z),     * the result from this method with Europe/Paris would be 12:30 (ie. 11:30Z).     * <p>     * The returned object will be a new instance of the same implementation type.     * This method changes the time zone and the millisecond instant to keep     * the field values the same.     * The returned object will be either be a new instance or <code>this</code>.     *     * @param newZone  the new time zone, null means default     * @return a copy of this datetime with a different time zone     * @see #withZone     */",
E,"/**     * Returns a copy of this ZonedDateTime changing the zone offset to the earlier     * of the two valid offsets at a local time-line overlap.     * <p>     * This method only has any effect when the local time-line overlaps, such as at     * an autumn daylight savings cutover. In this scenario, there are two valid offsets     * for the local date-time. Calling this method will return a date-time with the     * earlier of the two selected.     * <p>     * If this method is called when it is not an overlap, this is returned.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the earliest valid offset for the local datetime     */",
E,"/**     * Returns a copy of this ZonedDateTime changing the zone offset to the later     * of the two valid offsets at a local time-line overlap.     * <p>     * This method only has any effect when the local time-line overlaps, such as at     * an autumn daylight savings cutover. In this scenario, there are two valid offsets     * for the local date-time. Calling this method will return a date-time with the     * later of the two selected.     * <p>     * If this method is called when it is not an overlap, this is returned.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the latest valid offset for the local datetime     */",
E,"/**     * Returns a copy of this datetime with the specified date, retaining the time fields.     * <p>     * If the date is already the date passed in, then <code>this</code> is returned.     * <p>     * To set a single field use the properties, for example:     * <pre>     * DateTime set = monthOfYear().setCopy(6);     * </pre>     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param year  the new year value     * @param monthOfYear  the new monthOfYear value     * @param dayOfMonth  the new dayOfMonth value     * @return a copy of this datetime with a different date     * @throws IllegalArgumentException if any value if invalid     */",
E,"/**     * Returns a copy of this datetime with the specified time, retaining the date fields.     * <p>     * If the time is already the time passed in, then <code>this</code> is returned.     * <p>     * To set a single field use the properties, for example:     * <pre>     * DateTime set = dt.hourOfDay().setCopy(6);     * </pre>     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param hourOfDay  the hour of the day     * @param minuteOfHour  the minute of the hour     * @param secondOfMinute  the second of the minute     * @param millisOfSecond  the millisecond of the second     * @return a copy of this datetime with a different time     * @throws IllegalArgumentException if any value if invalid     */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this datetime with the specified field set to a new value.     * <p>     * For example, if the field type is <code>hourOfDay</code> then the hour of day     * field would be changed in the returned instance.     * If the field type is null, then <code>this</code> is returned.     * <p>     * These three lines are equivalent:     * <pre>     * DateTime updated = dt.withField(DateTimeFieldType.dayOfMonth(), 6);     * DateTime updated = dt.dayOfMonth().setCopy(6);     * DateTime updated = dt.property(DateTimeFieldType.dayOfMonth()).setCopy(6);     * </pre>     *     * @param fieldType  the field type to set, not null     * @param value  the value to set     * @return a copy of this datetime with the field set     * @throws IllegalArgumentException if the value is null or invalid     */",
E,"/**     * Returns a copy of this datetime with the value of the specified field increased.     * <p>     * If the addition is zero or the field is null, then <code>this</code> is returned.     * <p>     * These three lines are equivalent:     * <pre>     * DateTime added = dt.withFieldAdded(DurationFieldType.years(), 6);     * DateTime added = dt.plusYears(6);     * DateTime added = dt.plus(Period.years(6));     * </pre>     *      * @param fieldType  the field type to add to, not null     * @param amount  the amount to add     * @return a copy of this datetime with the field updated     * @throws IllegalArgumentException if the value is null or invalid     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this datetime with the specified duration added.     * <p>     * If the addition is zero, then <code>this</code> is returned.     *      * @param durationToAdd  the duration to add to this one     * @param scalar  the amount of times to add, such as -1 to subtract once     * @return a copy of this datetime with the duration added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this datetime with the specified duration added.     * <p>     * If the addition is zero, then <code>this</code> is returned.     *      * @param durationToAdd  the duration to add to this one, null means zero     * @param scalar  the amount of times to add, such as -1 to subtract once     * @return a copy of this datetime with the duration added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this datetime with the specified period added.     * <p>     * If the addition is zero, then <code>this</code> is returned.     * <p>     * This method is typically used to add multiple copies of complex     * period instances. Adding one field is best achieved using methods     * like {@link #withFieldAdded(DurationFieldType, int)}     * or {@link #plusYears(int)}.     *      * @param period  the period to add to this one, null means zero     * @param scalar  the amount of times to add, such as -1 to subtract once     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this datetime with the specified duration added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * This datetime instance is immutable and unaffected by this method call.     *      * @param duration  the duration, in millis, to add to this one     * @return a copy of this datetime with the duration added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this datetime with the specified duration added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * This datetime instance is immutable and unaffected by this method call.     *      * @param duration  the duration to add to this one, null means zero     * @return a copy of this datetime with the duration added     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this datetime with the specified period added.     * <p>     * This method will add each element of the period one by one, from largest     * to smallest, adjusting the datetime to be accurate between each.     * <p>     * Thus, adding a period of one month and one day to 2007-03-31 will     * work as follows:     * First add one month and adjust, resulting in 2007-04-30     * Then add one day and adjust, resulting in 2007-05-01.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusYears(int)}.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * This datetime instance is immutable and unaffected by this method call.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this datetime with the period added     * @throws ArithmeticException if the new datetime exceeds the capac",ity of a long     */
E,"/**     * Returns a copy of this datetime plus the specified number of years.     * <p>     * The calculation will do its best to only change the year field     * retaining the same month of year.     * However, in certain circumstances, it may be necessary to alter     * smaller fields. For example, 2008-02-29 plus one year cannot result     * in 2009-02-29, so the day of month is adjusted to 2009-02-28.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateTime added = dt.plusYears(6);     * DateTime added = dt.plus(Period.years(6));     * DateTime added = dt.withFieldAdded(DurationFieldType.years(), 6);     * </pre>     * <p>     * This datetime instance is immutable and unaffected by this method call.     *     * @param years  the amount of years to add, may be negative     * @return the new datetime plus the increased years     * @since 1.1     */",
E,"/**     * Returns a copy of this datetime plus the specified number of months.     * <p>     * The calculation will do its best to only change the month field     * retaining the same day of month.     * However, in certain circumstances, it may be necessary to alter     * smaller fields. For example, 2007-03-31 plus one month cannot result     * in 2007-04-31, so the day of month is adjusted to 2007-04-30.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateTime added = dt.plusMonths(6);     * DateTime added = dt.plus(Period.months(6));     * DateTime added = dt.withFieldAdded(DurationFieldType.months(), 6);     * </pre>     * <p>     * This datetime instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative     * @return the new datetime plus the increased months     * @since 1.1     */",
E,"/**     * Returns a copy of this datetime plus the specified number of weeks.     * <p>     * The calculation operates as if it were adding the equivalent in days.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateTime added = dt.plusWeeks(6);     * DateTime added = dt.plus(Period.weeks(6));     * DateTime added = dt.withFieldAdded(DurationFieldType.weeks(), 6);     * </pre>     * <p>     * This datetime instance is immutable and unaffected by this method call.     *     * @param weeks  the amount of weeks to add, may be negative     * @return the new datetime plus the increased weeks     * @since 1.1     */",
E,"/**     * Returns a copy of this datetime plus the specified number of days.     * <p>     * The calculation will do its best to only change the day field     * retaining the same time of day.     * However, in certain circumstances, typically daylight savings cutover,     * it may be necessary to alter the time fields.     * <p>     * In spring an hour is typically removed. If adding one day results in     * the time being within the cutover then the time is adjusted to be     * within summer time. For example, if the cutover is from 01:59 to 03:00     * and the result of this method would have been 02:30, then the result     * will be adjusted to 03:30.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateTime added = dt.plusDays(6);     * DateTime added = dt.plus(Period.days(6));     * DateTime added = dt.withFieldAdded(DurationFieldType.days(), 6);     * </pre>     * <p>     * This datetime instance is immutable and unaffected by this method call",".     *     * @param days  the amount of days to add, may be negative     * @return the new datetime plus the increased days     * @since 1.1     */"
E,"/**     * Returns a copy of this datetime plus the specified number of hours.     * <p>     * The calculation will add a duration equivalent to the number of hours     * expressed in milliseconds.     * <p>     * For example, if a spring daylight savings cutover is from 01:59 to 03:00     * then adding one hour to 01:30 will result in 03:30. This is a duration     * of one hour later, even though the hour field value changed from 1 to 3.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateTime added = dt.plusHours(6);     * DateTime added = dt.plus(Period.hours(6));     * DateTime added = dt.withFieldAdded(DurationFieldType.hours(), 6);     * </pre>     * <p>     * This datetime instance is immutable and unaffected by this method call.     *     * @param hours  the amount of hours to add, may be negative     * @return the new datetime plus the increased hours     * @since 1.1     */",
E,"/**     * Returns a copy of this datetime plus the specified number of minutes.     * <p>     * The calculation will add a duration equivalent to the number of minutes     * expressed in milliseconds.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateTime added = dt.plusMinutes(6);     * DateTime added = dt.plus(Period.minutes(6));     * DateTime added = dt.withFieldAdded(DurationFieldType.minutes(), 6);     * </pre>     * <p>     * This datetime instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to add, may be negative     * @return the new datetime plus the increased minutes     * @since 1.1     */",
E,"/**     * Returns a copy of this datetime plus the specified number of seconds.     * <p>     * The calculation will add a duration equivalent to the number of seconds     * expressed in milliseconds.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateTime added = dt.plusSeconds(6);     * DateTime added = dt.plus(Period.seconds(6));     * DateTime added = dt.withFieldAdded(DurationFieldType.seconds(), 6);     * </pre>     * <p>     * This datetime instance is immutable and unaffected by this method call.     *     * @param seconds  the amount of seconds to add, may be negative     * @return the new datetime plus the increased seconds     * @since 1.1     */",
E,"/**     * Returns a copy of this datetime plus the specified number of millis.     * <p>     * The calculation will add a duration equivalent to the number of milliseconds.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateTime added = dt.plusMillis(6);     * DateTime added = dt.plus(Period.millis(6));     * DateTime added = dt.withFieldAdded(DurationFieldType.millis(), 6);     * </pre>     * <p>     * This datetime instance is immutable and unaffected by this method call.     *     * @param millis  the amount of millis to add, may be negative     * @return the new datetime plus the increased millis     * @since 1.1     */",
E,"/**     * Returns a copy of this datetime with the specified duration taken away.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * This datetime instance is immutable and unaffected by this method call.     *      * @param duration  the duration, in millis, to reduce this instant by     * @return a copy of this datetime with the duration taken away     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this datetime with the specified duration taken away.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * This datetime instance is immutable and unaffected by this method call.     *      * @param duration  the duration to reduce this instant by     * @return a copy of this datetime with the duration taken away     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */",
E,"/**     * Returns a copy of this datetime with the specified period taken away.     * <p>     * This method will subtract each element of the period one by one, from     * largest to smallest, adjusting the datetime to be accurate between each.     * <p>     * Thus, subtracting a period of one month and one day from 2007-05-31 will     * work as follows:     * First subtract one month and adjust, resulting in 2007-04-30     * Then subtract one day and adjust, resulting in 2007-04-29.     * Note that the day has been adjusted by two.     * <p>     * This method is typically used to subtract complex period instances.     * Subtracting one field is best achieved using methods     * like {@link #minusYears(int)}.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * This datetime instance is immutable and unaffected by this method call.     *      * @param period  the period to reduce this instant by     * @return a copy of this datetime with the period t",aken away     * @throws ArithmeticException if the new datetime exceeds the capacity of a long     */
E,"/**     * Returns a copy of this datetime minus the specified number of years.     * <p>     * The calculation will do its best to only change the year field     * retaining the same month of year.     * However, in certain circumstances, it may be necessary to alter     * smaller fields. For example, 2008-02-29 minus one year cannot result     * in 2007-02-29, so the day of month is adjusted to 2007-02-28.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateTime subtracted = dt.minusYears(6);     * DateTime subtracted = dt.minus(Period.years(6));     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.years(), -6);     * </pre>     * <p>     * This datetime instance is immutable and unaffected by this method call.     *     * @param years  the amount of years to subtract, may be negative     * @return the new datetime minus the increased years     * @since 1.1     */",
E,"/**     * Returns a copy of this datetime minus the specified number of months.     * <p>     * The calculation will do its best to only change the month field     * retaining the same day of month.     * However, in certain circumstances, it may be necessary to alter     * smaller fields. For example, 2007-05-31 minus one month cannot result     * in 2007-04-31, so the day of month is adjusted to 2007-04-30.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateTime subtracted = dt.minusMonths(6);     * DateTime subtracted = dt.minus(Period.months(6));     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.months(), -6);     * </pre>     * <p>     * This datetime instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to subtract, may be negative     * @return the new datetime minus the increased months     * @since 1.1     */",
E,"/**     * Returns a copy of this datetime minus the specified number of weeks.     * <p>     * The calculation operates as if it were subtracting the equivalent in days.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateTime subtracted = dt.minusWeeks(6);     * DateTime subtracted = dt.minus(Period.weeks(6));     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.weeks(), -6);     * </pre>     * <p>     * This datetime instance is immutable and unaffected by this method call.     *     * @param weeks  the amount of weeks to subtract, may be negative     * @return the new datetime minus the increased weeks     * @since 1.1     */",
E,"/**     * Returns a copy of this datetime minus the specified number of days.     * <p>     * The calculation will do its best to only change the day field     * retaining the same time of day.     * However, in certain circumstances, typically daylight savings cutover,     * it may be necessary to alter the time fields.     * <p>     * In spring an hour is typically removed. If subtracting one day results     * in the time being within the cutover then the time is adjusted to be     * within summer time. For example, if the cutover is from 01:59 to 03:00     * and the result of this method would have been 02:30, then the result     * will be adjusted to 03:30.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateTime subtracted = dt.minusDays(6);     * DateTime subtracted = dt.minus(Period.days(6));     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.days(), -6);     * </pre>     * <p>     * This datetime instance is immutable and unaffe","cted by this method call.     *     * @param days  the amount of days to subtract, may be negative     * @return the new datetime minus the increased days     * @since 1.1     */"
E,"/**     * Returns a copy of this datetime minus the specified number of hours.     * <p>     * The calculation will subtract a duration equivalent to the number of     * hours expressed in milliseconds.     * <p>     * For example, if a spring daylight savings cutover is from 01:59 to 03:00     * then subtracting one hour from 03:30 will result in 01:30. This is a     * duration of one hour earlier, even though the hour field value changed     * from 3 to 1.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateTime subtracted = dt.minusHours(6);     * DateTime subtracted = dt.minus(Period.hours(6));     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.hours(), -6);     * </pre>     * <p>     * This datetime instance is immutable and unaffected by this method call.     *     * @param hours  the amount of hours to subtract, may be negative     * @return the new datetime minus the increased hours     * @since 1.1     */",
E,"/**     * Returns a copy of this datetime minus the specified number of minutes.     * <p>     * The calculation will subtract a duration equivalent to the number of     * minutes expressed in milliseconds.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateTime subtracted = dt.minusMinutes(6);     * DateTime subtracted = dt.minus(Period.minutes(6));     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.minutes(), -6);     * </pre>     * <p>     * This datetime instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to subtract, may be negative     * @return the new datetime minus the increased minutes     * @since 1.1     */",
E,"/**     * Returns a copy of this datetime minus the specified number of seconds.     * <p>     * The calculation will subtract a duration equivalent to the number of     * seconds expressed in milliseconds.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateTime subtracted = dt.minusSeconds(6);     * DateTime subtracted = dt.minus(Period.seconds(6));     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.seconds(), -6);     * </pre>     * <p>     * This datetime instance is immutable and unaffected by this method call.     *     * @param seconds  the amount of seconds to subtract, may be negative     * @return the new datetime minus the increased seconds     * @since 1.1     */",
E,"/**     * Returns a copy of this datetime minus the specified number of millis.     * <p>     * The calculation will subtract a duration equivalent to the number of     * milliseconds.     * <p>     * The following three lines are identical in effect:     * <pre>     * DateTime subtracted = dt.minusMillis(6);     * DateTime subtracted = dt.minus(Period.millis(6));     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.millis(), -6);     * </pre>     * <p>     * This datetime instance is immutable and unaffected by this method call.     *     * @param millis  the amount of millis to subtract, may be negative     * @return the new datetime minus the increased millis     * @since 1.1     */",
E,"/**     * Returns a copy of this datetime with the era field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * era changed.     *     * @param era  the era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the century of era field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * century of era changed.     *     * @param centuryOfEra  the centurey of era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the year of era field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of era changed.     *     * @param yearOfEra  the year of era to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the year of century field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year of century changed.     *     * @param yearOfCentury  the year of century to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the year field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * year changed.     *     * @param year  the year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the weekyear field updated.     * <p>     * The weekyear is the year that matches with the weekOfWeekyear field.     * In the standard ISO8601 week algorithm, the first week of the year     * is that in which at least 4 days are in the year. As a result of this     * definition, day 1 of the first week may be in the previous year.     * The weekyear allows you to query the effective year for that day.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * weekyear changed.     *     * @param weekyear  the weekyear to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the month of year field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the week of weekyear field updated.     * <p>     * This field is associated with the ""weekyear"" via {@link #withWeekyear(int)}.     * In the standard ISO8601 week algorithm, the first week of the year     * is that in which at least 4 days are in the year. As a result of this     * definition, day 1 of the first week may be in the previous year.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * week of weekyear changed.     *     * @param weekOfWeekyear  the week of weekyear to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the day of year field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of year changed.     *     * @param dayOfYear  the day of year to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the day of month field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the day of week field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of week changed.     *     * @param dayOfWeek  the day of week to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the hour of day field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * hour of day changed.     *     * @param hour  the hour of day to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the minute of hour updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * minute of hour changed.     *     * @param minute  the minute of hour to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the second of minute field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * second of minute changed.     *     * @param second  the second of minute to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the millis of second field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * millis of second changed.     *     * @param millis  the millis of second to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,"/**     * Returns a copy of this datetime with the millis of day field updated.     * <p>     * DateTime is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * millis of day changed.     *     * @param millis  the millis of day to set     * @return a copy of this object with the field set     * @throws IllegalArgumentException if the value is invalid     * @since 1.3     */",
E,/**         * Gets the field being used.         *          * @return the field         */,
E,/**         * Gets the datetime being used.         *          * @return the datetime         */,
E,"/**         * Adds to this field in a copy of this DateTime.         * <p>         * The DateTime attached to this property is unchanged by this call.         * This operation is faster than converting a DateTime to a MutableDateTime         * and back again when setting one field. When setting multiple fields,         * it is generally quicker to make the conversion to MutableDateTime.         *          * @param value  the value to add to the field in the copy         * @return a copy of the DateTime with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**         * Adds to this field in a copy of this DateTime.         * <p>         * The DateTime attached to this property is unchanged by this call.         * This operation is faster than converting a DateTime to a MutableDateTime         * and back again when setting one field. When setting multiple fields,         * it is generally quicker to make the conversion to MutableDateTime.         *          * @param value  the value to add to the field in the copy         * @return a copy of the DateTime with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**         * Adds to this field, possibly wrapped, in a copy of this DateTime.         * A wrapped operation only changes this field.         * Thus 31st January addWrapField one day goes to the 1st January.         * <p>         * The DateTime attached to this property is unchanged by this call.         * This operation is faster than converting a DateTime to a MutableDateTime         * and back again when setting one field. When setting multiple fields,         * it is generally quicker to make the conversion to MutableDateTime.         *          * @param value  the value to add to the field in the copy         * @return a copy of the DateTime with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**         * Sets this field in a copy of the DateTime.         * <p>         * The DateTime attached to this property is unchanged by this call.         * This operation is faster than converting a DateTime to a MutableDateTime         * and back again when setting one field. When setting multiple fields,         * it is generally quicker to make the conversion to MutableDateTime.         *          * @param value  the value to set the field in the copy to         * @return a copy of the DateTime with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**         * Sets this field in a copy of the DateTime to a parsed text value.         * <p>         * The DateTime attached to this property is unchanged by this call.         * This operation is faster than converting a DateTime to a MutableDateTime         * and back again when setting one field. When setting multiple fields,         * it is generally quicker to make the conversion to MutableDateTime.         *          * @param text  the text value to set         * @param locale  optional locale to use for selecting a text symbol         * @return a copy of the DateTime with the field value changed         * @throws IllegalArgumentException if the text value isn't valid         */",
E,"/**         * Sets this field in a copy of the DateTime to a parsed text value.         * <p>         * The DateTime attached to this property is unchanged by this call.         * This operation is faster than converting a DateTime to a MutableDateTime         * and back again when setting one field. When setting multiple fields,         * it is generally quicker to make the conversion to MutableDateTime.         *          * @param text  the text value to set         * @return a copy of the DateTime with the field value changed         * @throws IllegalArgumentException if the text value isn't valid         */",
E,"/**         * Returns a new DateTime with this field set to the maximum value         * for this field.         * <p>         * This operation is useful for obtaining a DateTime on the last day         * of the month, as month lengths vary.         * <pre>         * DateTime lastDayOfMonth = dt.dayOfMonth().withMaximumValue();         * </pre>         * <p>         * Where possible, the offset from UTC will be retained, thus applications         * may need to call {@link DateTime#withLaterOffsetAtOverlap()} on the result         * to force the later time during a DST overlap if desired.         * <p>         * From v2.2, this method handles a daylight svaings time gap, setting the         * time to the last instant before the gap.         * <p>         * The DateTime attached to this property is unchanged by this call.         *         * @return a copy of the DateTime with this field set to its maximum         * @since 1.2         */",
E,"/**         * Returns a new DateTime with this field set to the minimum value         * for this field.         * <p>         * Where possible, the offset from UTC will be retained, thus applications         * may need to call {@link DateTime#withEarlierOffsetAtOverlap()} on the result         * to force the earlier time during a DST overlap if desired.         * <p>         * From v2.2, this method handles a daylight svaings time gap, setting the         * time to the first instant after the gap.         * <p>         * The DateTime attached to this property is unchanged by this call.         *         * @return a copy of the DateTime with this field set to its minimum         * @since 1.2         */",
E,/**         * Rounds to the lowest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,/**         * Rounds to the highest whole unit of this field on a copy of this DateTime.         *         * @return a copy of the DateTime with the field value changed         */,
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateTime,         * favoring the floor if halfway.         *         * @return a copy of the DateTime with the field value changed         */",
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this DateTime,         * favoring the ceiling if halfway.         *         * @return a copy of the DateTime with the field value changed         */",
E,"/**         * Rounds to the nearest whole unit of this field on a copy of this         * DateTime.  If halfway, the ceiling is favored over the floor only if         * it makes this field's value even.         *         * @return a copy of the DateTime with the field value changed         */",
E,"/**     * Obtains a {@code DateTime} set to the current system millisecond time     * using the specified chronology.     *     * @param chronology  the chronology, not null     * @return the current date-time, not null     * @since 2.0     */",
E,"/**     * Parses a {@code DateTime} from the specified string using a formatter.     *      * @param str  the string to parse, not null     * @param formatter  the formatter to use, not null     * @since 2.0     */",
E,"/**     * Get this object as a DateTime, returning <code>this</code> if possible.     *      * @param chronology chronology to apply, or ISOChronology if null     * @return a DateTime using the same millis     */",
E,"/**     * Get this object as a DateTime using ISOChronology in the default zone,     * returning <code>this</code> if possible.     *      * @return a DateTime using the same millis     */",
E,"/**     * Returns a copy of this datetime with different millis.     * <p>     * The returned object will be either be a new instance or <code>this</code>.     * Only the millis will change, the chronology and time zone are kept.     *     * @param newMillis  the new millis, from 1970-01-01T00:00:00Z     * @return a copy of this datetime with different millis     */",
E,"/**     * Returns a copy of this datetime with a different chronology.     * <p>     * The returned object will be either be a new instance or <code>this</code>.     * Only the chronology will change, the millis are kept.     *     * @param newChronology  the new chronology, null means ISO default     * @return a copy of this datetime with a different chronology     */",
E,"/**     * Returns a copy of this datetime with a different time zone, preserving the     * millisecond instant.     * <p>     * This method is useful for finding the local time in another timezone.     * For example, if this instant holds 12:30 in Europe/London, the result     * from this method with Europe/Paris would be 13:30.     * <p>     * The returned object will be a new instance of the same implementation type.     * This method changes the time zone, and does not change the     * millisecond instant, with the effect that the field values usually change.     * The returned object will be either be a new instance or <code>this</code>.     *     * @param newZone  the new time zone     * @return a copy of this datetime with a different time zone     * @see #withZoneRetainFields     */",
E,"/**     * Returns a copy of this datetime with a different time zone, preserving the     * field values.     * <p>     * This method is useful for finding the millisecond time in another timezone.     * For example, if this instant holds 12:30 in Europe/London (ie. 12:30Z),     * the result from this method with Europe/Paris would be 12:30 (ie. 11:30Z).     * <p>     * The returned object will be a new instance of the same implementation type.     * This method changes the time zone and the millisecond instant to keep     * the field values the same.     * The returned object will be either be a new instance or <code>this</code>.     *     * @param newZone  the new time zone, null means default     * @return a copy of this datetime with a different time zone     * @see #withZone     */",
E,"/**     * Returns a copy of this ZonedDateTime changing the zone offset to the earlier     * of the two valid offsets at a local time-line overlap.     * <p>     * This method only has any effect when the local time-line overlaps, such as at     * an autumn daylight savings cutover. In this scenario, there are two valid offsets     * for the local date-time. Calling this method will return a date-time with the     * earlier of the two selected.     * <p>     * If this method is called when it is not an overlap, this is returned.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the earliest valid offset for the local datetime     */",
E,"/**     * Returns a copy of this ZonedDateTime changing the zone offset to the later     * of the two valid offsets at a local time-line overlap.     * <p>     * This method only has any effect when the local time-line overlaps, such as at     * an autumn daylight savings cutover. In this scenario, there are two valid offsets     * for the local date-time. Calling this method will return a date-time with the     * later of the two selected.     * <p>     * If this method is called when it is not an overlap, this is returned.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the latest valid offset for the local datetime     */",
E,"/**     * Returns a copy of this datetime with the specified date, retaining the time fields.     * <p>     * If the date is already the date passed in, then <code>this</code> is returned.     * <p>     * To set a single field use the properties, for example:     * <pre>     * DateTime set = monthOfYear().setCopy(6);     * </pre>     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param year  the new year value     * @param monthOfYear  the new monthOfYear value     * @param dayOfMonth  the new dayOfMonth value     * @return a copy of this datetime with a different date     * @throws IllegalArgumentException if any value if invalid     */",
E,"/**     * Returns a copy of this datetime with the specified time, retaining the date fields.     * <p>     * If the time is already the time passed in, then <code>this</code> is returned.     * <p>     * To set a single field use the properties, for example:     * <pre>     * DateTime set = dt.hourOfDay().setCopy(6);     * </pre>     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param hourOfDay  the hour of the day     * @param minuteOfHour  the minute of the hour     * @param secondOfMinute  the second of the minute     * @param millisOfSecond  the millisecond of the second     * @return a copy of this datetime with a different time     * @throws IllegalArgumentException if any value if invalid     */",
E,"/**     * Returns a copy of this datetime with the time set to the start of the day.     * <p>     * The time will normally be midnight, as that is the earliest time on     * any given day. However, in some time zones when Daylight Savings Time     * starts, there is no midnight because time jumps from 11:59 to 01:00.     * This method handles that situation by returning 01:00 on that date.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @return a copy of this datetime with the time set to the start of the day, not null     */",
E,"/**     * Returns a copy of this datetime with the partial set of fields replacing those     * from this instance.     * <p>     * For example, if the partial is a <code>TimeOfDay</code> then the time fields     * would be changed in the returned instance.     * If the partial is null, then <code>this</code> is returned.     *     * @param partial  the partial set of fields to apply to this datetime, null ignored     * @return a copy of this datetime with a different set of fields     * @throws IllegalArgumentException if any value is invalid     */",
E,"/**     * Returns a copy of this datetime with the specified field set to a new value.     * <p>     * For example, if the field type is <code>hourOfDay</code> then the hour of day     * field would be changed in the returned instance.     * If the field type is null, then <code>this</code> is returned.     * <p>     * These three lines are equivalent:     * <pre>     * DateTime updated = dt.withField(DateTimeFieldType.dayOfMonth(), 6);     * DateTime updated = dt.dayOfMonth().setCopy(6);     * DateTime updated = dt.property(DateTimeFieldType.dayOfMonth()).setCopy(6);     * </pre>     *     * @param fieldType  the field type to set, not null     * @param value  the value to set     * @return a copy of this datetime with the field set     * @throws IllegalArgumentException if the value is null or invalid     */",
E,"/**     * Gets the {@link DateFormatSymbols} based on the given locale.     * <p>     * If JDK 6 or newer is being used, DateFormatSymbols.getInstance(locale) will     * be used in order to allow the use of locales defined as extensions.     * Otherwise, new DateFormatSymbols(locale) will be used.     * See JDK 6 {@link DateFormatSymbols} for further information.     *      * @param locale  the {@link Locale} used to get the correct {@link DateFormatSymbols}     * @return the symbols     * @since 2.0     */",
E,"/**     * Gets the default map of time zone names.     * <p>     * This can be changed by {@link #setDefaultTimeZoneNames}.     * <p>     * The default set of short time zone names is as follows:     * <ul>     * <li>UT - UTC     * <li>UTC - UTC     * <li>GMT - UTC     * <li>EST - America/New_York     * <li>EDT - America/New_York     * <li>CST - America/Chicago     * <li>CDT - America/Chicago     * <li>MST - America/Denver     * <li>MDT - America/Denver     * <li>PST - America/Los_Angeles     * <li>PDT - America/Los_Angeles     * </ul>     *      * @return the unmodifiable map of abbreviations to zones, not null     * @since 2.2     */",
E,"/**     * Sets the default map of time zone names.     * <p>     * The map is copied before storage.     *      * @param names  the map of abbreviations to zones, not null     * @since 2.2     */",
E,"/**     * Calculates the astronomical Julian Day for an instant.     * <p>     * The <a href=""http://en.wikipedia.org/wiki/Julian_day"">Julian day</a> is a well-known     * system of time measurement for scientific use by the astronomy community.     * It expresses the interval of time in days and fractions of a day since     * January 1, 4713 BC (Julian) Greenwich noon.     * <p>     * Each day starts at midday (not midnight) and time is expressed as a fraction.     * Thus the fraction 0.25 is 18:00. equal to one quarter of the day from midday to midday.     * <p>     * Note that this method has nothing to do with the day-of-year.     *      * @param epochMillis  the epoch millis from 1970-01-01Z     * @return the astronomical Julian Day represented by the specified instant     * @since 2.2     */",
E,"/**     * Calculates the astronomical Julian Day Number for an instant.     * <p>     * The {@link #toJulianDay(long)} method calculates the astronomical Julian Day     * with a fraction based on days starting at midday.     * This method calculates the variant where days start at midnight.     * JDN 0 is used for the date equivalent to Monday January 1, 4713 BC (Julian).     * Thus these days start 12 hours before those of the fractional Julian Day.     * <p>     * Note that this method has nothing to do with the day-of-year.     *      * @param epochMillis  the epoch millis from 1970-01-01Z     * @return the astronomical Julian Day represented by the specified instant     * @since 2.2     */",
E,/**     * Creates a date-time from a Julian Day.     * <p>     * Returns the {@code DateTime} object equal to the specified Julian Day.     *      * @param julianDay  the Julian Day     * @return the epoch millis from 1970-01-01Z     * @since 2.2     */,
E,/**         * Gets the current time.         * @return the current time in millis         */,
E,"/**     * Gets the default time zone.     * <p>     * The default time zone is derived from the system property {@code user.timezone}.     * If that is {@code null} or is not a valid identifier, then the value of the     * JDK {@code TimeZone} default is converted. If that fails, {@code UTC} is used.     * <p>     * NOTE: If the {@code java.util.TimeZone} default is updated <i>after</i> calling this     * method, then the change will not be picked up here.     *      * @return the default datetime zone object     */",
E,"/**     * Sets the default time zone.     * <p>     * NOTE: Calling this method does <i>not</i> set the {@code java.util.TimeZone} default.     *      * @param zone  the default datetime zone object, must not be null     * @throws IllegalArgumentException if the zone is null     * @throws SecurityException if the application has insufficient security rights     */",
E,"/**     * Gets a time zone instance for the specified offset to UTC in hours.     * This method assumes standard length hours.     * <p>     * This factory is a convenient way of constructing zones with a fixed offset.     *      * @param hoursOffset  the offset in hours from UTC, from -23 to +23     * @return the DateTimeZone object for the offset     * @throws IllegalArgumentException if the offset is too large or too small     */",
E,"/**     * Gets a time zone instance for the specified offset to UTC in hours and minutes.     * This method assumes 60 minutes in an hour, and standard length minutes.     * <p>     * This factory is a convenient way of constructing zones with a fixed offset.     * The hours value must be in the range -23 to +23.     * The minutes value must be in the range -59 to +59.     * The following combinations of sign for the hour and minute are possible:     * <pre>     *  Hour    Minute    Example    Result     *      *  +ve     +ve       (2, 15)    +02:15     *  +ve     zero      (2, 0)     +02:00     *  +ve     -ve       (2, -15)   IllegalArgumentException     *      *  zero    +ve       (0, 15)    +00:15     *  zero    zero      (0, 0)     +00:00     *  zero    -ve       (0, -15)   -00:15     *      *  -ve     +ve       (-2, 15)   -02:15     *  -ve     zero      (-2, 0)    -02:00     *  -ve     -ve       (-2, -15)  -02:15     * </pre>     * Note that in versions before 2.3, the minutes had","to be zero or positive.     *      * @param hoursOffset  the offset in hours from UTC, from -23 to +23     * @param minutesOffset  the offset in minutes from UTC, from -59 to +59     * @return the DateTimeZone object for the offset     * @throws IllegalArgumentException if any value is out of range, the minutes are negative     *  when the hours are positive, or the resulting offset exceeds +/- 23:59:59.000     */"
E,"/**     * Gets a time zone instance for the specified offset to UTC in milliseconds.     *     * @param millisOffset  the offset in millis from UTC, from -23:59:59.999 to +23:59:59.999     * @return the DateTimeZone object for the offset     */",
E,"/**     * Gets a time zone instance for a JDK TimeZone.     * <p>     * DateTimeZone only accepts a subset of the IDs from TimeZone. The     * excluded IDs are the short three letter form (except UTC). This      * method will attempt to convert between time zones created using the     * short IDs and the full version.     * <p>     * This method is not designed to parse time zones with rules created by     * applications using <code>SimpleTimeZone</code> directly.     *      * @param zone  the zone to convert, null means default     * @return the DateTimeZone object for the zone     * @throws IllegalArgumentException if the zone is not recognised     */",
E,/**     * Gets the zone using a fixed offset amount.     *      * @param id  the zone id     * @param offset  the offset in millis     * @return the zone     */,
E,/**     * Gets all the available IDs supported.     *      * @return an unmodifiable Set of String IDs     */,
E,/**     * Gets the zone provider factory.     * <p>     * The zone provider is a pluggable instance factory that supplies the     * actual instances of DateTimeZone.     *      * @return the provider     */,
E,"/**     * Sets the zone provider factory.     * <p>     * The zone provider is a pluggable instance factory that supplies the     * actual instances of DateTimeZone.     *      * @param provider  provider to use, or null for default     * @throws SecurityException if you do not have the permission DateTimeZone.setProvider     * @throws IllegalArgumentException if the provider is invalid     */",
E,"/**     * Sets the zone provider factory without performing the security check.     *      * @param provider  provider to use, or null for default     * @throws IllegalArgumentException if the provider is invalid     */",
E,/**     * Gets the default zone provider.     * <p>     * Tries the system property <code>org.joda.time.DateTimeZone.Provider</code>.     * Then tries a <code>ZoneInfoProvider</code> using the data in <code>org/joda/time/tz/data</code>.     * Then uses <code>UTCProvider</code>.     *      * @return the default name provider     */,
E,/**     * Gets the name provider factory.     * <p>     * The name provider is a pluggable instance factory that supplies the     * names of each DateTimeZone.     *      * @return the provider     */,
E,"/**     * Sets the name provider factory.     * <p>     * The name provider is a pluggable instance factory that supplies the     * names of each DateTimeZone.     *      * @param nameProvider  provider to use, or null for default     * @throws SecurityException if you do not have the permission DateTimeZone.setNameProvider     * @throws IllegalArgumentException if the provider is invalid     */",
E,"/**     * Sets the name provider factory without performing the security check.     *      * @param nameProvider  provider to use, or null for default     * @throws IllegalArgumentException if the provider is invalid     */",
E,/**     * Gets the default name provider.     * <p>     * Tries the system property <code>org.joda.time.DateTimeZone.NameProvider</code>.     * Then uses <code>DefaultNameProvider</code>.     *      * @return the default name provider     */,
E,"/**     * Converts an old style id to a new style id.     *      * @param id  the old style id     * @return the new style id, null if not found     */",
E,"/**     * Creates a <code>Minutes</code> representing the number of whole minutes     * between the two specified partial datetimes.     * <p>     * The two partials must contain the same fields, for example you can specify     * two <code>LocalTime</code> objects.     *     * @param start  the start partial date, must not be null     * @param end  the end partial date, must not be null     * @return the period in minutes     * @throws IllegalArgumentException if the partials are null or invalid     */",
E,"/**     * Creates a <code>Minutes</code> representing the number of whole minutes     * in the specified interval.     *     * @param interval  the interval to extract minutes from, null returns zero     * @return the period in minutes     * @throws IllegalArgumentException if the partials are null or invalid     */",
E,"/**     * Creates a new <code>Minutes</code> representing the number of complete     * standard length minutes in the specified period.     * <p>     * This factory method converts all fields from the period to minutes using standardised     * durations for each field. Only those fields which have a precise duration in     * the ISO UTC chronology can be converted.     * <ul>     * <li>One week consists of 7 days.     * <li>One day consists of 24 hours.     * <li>One hour consists of 60 minutes.     * <li>One minute consists of 60 seconds.     * <li>One second consists of 1000 milliseconds.     * </ul>     * Months and Years are imprecise and periods containing these values cannot be converted.     *     * @param period  the period to get the number of minutes from, null returns zero     * @return the period in minutes     * @throws IllegalArgumentException if the period contains imprecise duration values     */",
E,/**     * Resolves singletons.     *      * @return the singleton instance     */,
E,"/**     * Gets the duration field type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Gets the period type, which is <code>minutes</code>.     *     * @return the period type     */",
E,"/**     * Converts this period in minutes to a period in weeks assuming a     * 7 days week, 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all weeks are     * 7 days long, all days are 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole weeks for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in days assuming a     * 24 hour day and 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all days are     * 24 hours long and all hours are 60 minutes long.     * This is not true when daylight savings is considered and may also not     * be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of whole days for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in hours assuming a     * 60 minute hour.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all hours are     * 60 minutes long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of hours for this number of minutes     */",
E,"/**     * Converts this period in minutes to a period in seconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert between different types of period.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long.     * This may not be true for some unusual chronologies. However, it is included     * as it is a useful operation for many applications and business rules.     *      * @return a period representing the number of seconds for this number of minutes     * @throws ArithmeticException if the number of seconds is too large to be represented     */",
E,"/**     * Converts this period in minutes to a duration in milliseconds assuming a     * 60 second minute.     * <p>     * This method allows you to convert from a period to a duration.     * However to achieve this it makes the assumption that all minutes are     * 60 seconds long. This might not be true for an unusual chronology,     * for example one that takes leap seconds into account.     * However, the method is included as it is a useful operation for many     * applications and business rules.     *     * @return a duration equivalent to this number of minutes     */",
E,/**     * Gets the number of minutes that this period represents.     *     * @return the number of minutes in the period     */,
E,"/**     * Returns a new instance with the specified number of minutes added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to add, may be negative, null means zero     * @return the new period plus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of minutes taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param minutes  the amount of minutes to take away, may be negative, null means zero     * @return the new period minus the specified number of minutes     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the minutes multiplied by the specified scalar.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param scalar  the amount to multiply by, may be negative     * @return the new period multiplied by the specified scalar     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the minutes divided by the specified divisor.     * The calculation uses integer division, thus 3 divided by 2 is 1.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param divisor  the amount to divide by, may be negative     * @return the new period divided by the specified divisor     * @throws ArithmeticException if the divisor is zero     */",
E,/**     * Returns a new instance with the minutes value negated.     *     * @return the new period with a negated value     * @throws ArithmeticException if the result overflows an int     */,
E,"/**     * Is this minutes instance greater than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is greater than the specified one     */",
E,"/**     * Is this minutes instance less than the specified number of minutes.     *     * @param other  the other period, null means zero     * @return true if this minutes instance is less than the specified one     */",
E,"/**     * Constructs a MonthDay with the current monthOfYear, using ISOChronology in     * the default zone to extract the fields.     * <p>     * The constructor uses the default time zone, resulting in the local time     * being initialised. Once the constructor is complete, all further calculations     * are performed without reference to a time-zone (by switching to UTC).     *      * @see #now()     */",
E,"/**     * Constructs a MonthDay with the current month-day, using ISOChronology in     * the specified zone to extract the fields.     * <p>     * The constructor uses the specified time zone to obtain the current month-day.     * Once the constructor is complete, all further calculations     * are performed without reference to a time-zone (by switching to UTC).     *      * @param zone  the zone to use, null means default zone     * @see #now(DateTimeZone)     */",
E,"/**     * Constructs a MonthDay with the current month-day, using the specified chronology     * and zone to extract the fields.     * <p>     * The constructor uses the time zone of the chronology specified.     * Once the constructor is complete, all further calculations are performed     * without reference to a time-zone (by switching to UTC).     *     * @param chronology  the chronology, null means ISOChronology in the default zone     * @see #now(Chronology)     */",
E,"/**     * Constructs a MonthDay extracting the partial fields from the specified     * milliseconds using the ISOChronology in the default zone.     * <p>     * The constructor uses the default time zone, resulting in the local time     * being initialised. Once the constructor is complete, all further calculations     * are performed without reference to a time-zone (by switching to UTC).     *     * @param instant  the milliseconds from 1970-01-01T00:00:00Z     */",
E,"/**     * Constructs a MonthDay extracting the partial fields from the specified     * milliseconds using the chronology provided.     * <p>     * The constructor uses the time zone of the chronology specified.     * Once the constructor is complete, all further calculations are performed     * without reference to a time-zone (by switching to UTC).     *     * @param instant  the milliseconds from 1970-01-01T00:00:00Z     * @param chronology  the chronology, null means ISOChronology in the default zone     */",
E,"/**     * Constructs a MonthDay from an Object that represents some form of time.     * <p>     * The recognised object types are defined in     * {@link org.joda.time.convert.ConverterManager ConverterManager} and     * include ReadableInstant, String, Calendar and Date.     * The String formats are described by {@link ISODateTimeFormat#localDateParser()}.     * <p>     * The chronology used will be derived from the object, defaulting to ISO.     *     * @param instant  the date-time object, null means now     * @throws IllegalArgumentException if the instant is invalid     */",
E,"/**     * Constructs a MonthDay from an Object that represents some form of time,     * using the specified chronology.     * <p>     * The recognised object types are defined in     * {@link org.joda.time.convert.ConverterManager ConverterManager} and     * include ReadableInstant, String, Calendar and Date.     * The String formats are described by {@link ISODateTimeFormat#localDateParser()}.     * <p>     * The constructor uses the time zone of the chronology specified.     * Once the constructor is complete, all further calculations are performed     * without reference to a time-zone (by switching to UTC).     * The specified chronology overrides that of the object.     *     * @param instant  the date-time object, null means now     * @param chronology  the chronology, null means ISO default     * @throws IllegalArgumentException if the instant is invalid     */",
E,"/**     * Constructs a MonthDay with specified year and month     * using <code>ISOChronology</code>.     * <p>     * The constructor uses the no time zone initialising the fields as provided.     * Once the constructor is complete, all further calculations     * are performed without reference to a time-zone (by switching to UTC).     *     * @param monthOfYear  the month of the year     * @param dayOfMonth  the day of the month     */",
E,"/**     * Constructs an instance set to the specified monthOfYear and dayOfMonth     * using the specified chronology, whose zone is ignored.     * <p>     * If the chronology is null, <code>ISOChronology</code> is used.     * <p>     * The constructor uses the time zone of the chronology specified.     * Once the constructor is complete, all further calculations are performed     * without reference to a time-zone (by switching to UTC).     *     * @param monthOfYear  the month of the year     * @param dayOfMonth  the day of the month     * @param chronology  the chronology, null means ISOChronology in the default zone     */",
E,"/**     * Returns a copy of this month-day with the specified chronology.     * This instance is immutable and unaffected by this method call.     * <p>     * This method retains the values of the fields, thus the result will     * typically refer to a different instant.     * <p>     * The time zone of the specified chronology is ignored, as MonthDay     * operates without a time zone.     *     * @param newChronology  the new chronology, null means ISO     * @return a copy of this month-day with a different chronology, never null     * @throws IllegalArgumentException if the values are invalid for the new chronology     */",
E,"/**     * Returns a copy of this month-day with the specified field set to a new value.     * <p>     * For example, if the field type is <code>dayOfMonth</code> then the day     * would be changed in the returned instance.     * <p>     * These three lines are equivalent:     * <pre>     * MonthDay updated = md.withField(DateTimeFieldType.dayOfMonth(), 6);     * MonthDay updated = md.dayOfMonth().setCopy(6);     * MonthDay updated = md.property(DateTimeFieldType.dayOfMonth()).setCopy(6);     * </pre>     *     * @param fieldType  the field type to set, not null     * @param value  the value to set     * @return a copy of this instance with the field set, never null     * @throws IllegalArgumentException if the value is null or invalid     */",
E,"/**     * Returns a copy of this month-day with the value of the specified field increased.     * <p>     * If the addition is zero, then <code>this</code> is returned.     * <p>     * These three lines are equivalent:     * <pre>     * MonthDay added = md.withFieldAdded(DurationFieldType.days(), 6);     * MonthDay added = md.plusDays(6);     * MonthDay added = md.dayOfMonth().addToCopy(6);     * </pre>     *      * @param fieldType  the field type to add to, not null     * @param amount  the amount to add     * @return a copy of this instance with the field updated, never null     * @throws IllegalArgumentException if the value is null or invalid     * @throws ArithmeticException if the new date-time exceeds the capacity     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the addition is zero, then <code>this</code> is returned.     * Fields in the period that aren't present in the partial are ignored.     * <p>     * This method is typically used to add multiple copies of complex     * period instances. Adding one field is best achieved using methods     * like {@link #withFieldAdded(DurationFieldType, int)}     * or {@link #plusMonths(int)}.     *      * @param period  the period to add to this one, null means zero     * @param scalar  the amount of times to add, such as -1 to subtract once     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new date-time exceeds the capacity     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,"/**     * Returns a copy of this month-day plus the specified number of months.     * <p>     * This month-day instance is immutable and unaffected by this method call.     * The month will wrap at the end of the year from December to January.     * The day will be adjusted to the last valid value if necessary.     * <p>     * The following three lines are identical in effect:     * <pre>     * MonthDay added = md.plusMonths(6);     * MonthDay added = md.plus(Period.months(6));     * MonthDay added = md.withFieldAdded(DurationFieldType.months(), 6);     * </pre>     *     * @param months  the amount of months to add, may be negative     * @return the new month-day plus the increased months, never null     */",
E,"/**     * Returns a copy of this month-day plus the specified number of days.     * <p>     * This month-day instance is immutable and unaffected by this method call.     * The month will wrap at the end of the year from December to January.     * <p>     * The following three lines are identical in effect:     * <pre>     * MonthDay added = md.plusDays(6);     * MonthDay added = md.plus(Period.days(6));     * MonthDay added = md.withFieldAdded(DurationFieldType.days(), 6);     * </pre>     *     * @param days  the amount of days to add, may be negative     * @return the new month-day plus the increased days, never null     */",
E,"/**     * Returns a copy of this month-day with the specified period taken away.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to subtract complex period instances.     * Subtracting one field is best achieved using methods     * like {@link #minusMonths(int)}.     *      * @param period  the period to reduce this instant by     * @return a copy of this instance with the period taken away, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,"/**     * Returns a copy of this month-day minus the specified number of months.     * <p>     * This MonthDay instance is immutable and unaffected by this method call.     * The month will wrap at the end of the year from January to December.     * The day will be adjusted to the last valid value if necessary.     * <p>     * The following three lines are identical in effect:     * <pre>     * MonthDay subtracted = md.minusMonths(6);     * MonthDay subtracted = md.minus(Period.months(6));     * MonthDay subtracted = md.withFieldAdded(DurationFieldType.months(), -6);     * </pre>     *     * @param months  the amount of months to subtract, may be negative     * @return the new month-day minus the increased months, never null     */",
E,"/**     * Returns a copy of this month-day minus the specified number of months.     * <p>     * This month-day instance is immutable and unaffected by this method call.     * The month will wrap at the end of the year from January to December.     * <p>     * The following three lines are identical in effect:     * <pre>     * MonthDay subtracted = md.minusDays(6);     * MonthDay subtracted = md.minus(Period.days(6));     * MonthDay subtracted = md.withFieldAdded(DurationFieldType.days(), -6);     * </pre>     *     * @param days  the amount of days to subtract, may be negative     * @return the new month-day minus the increased days, never null     */",
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**         * Adds to the value of this field in a copy of this MonthDay wrapping         * within this field if the maximum value is reached.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it wraps within this field.         * Other fields are unaffected.         * <p>         * For example,         * <code>--12-30</code> addWrapField one month returns <code>--01-30</code>.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**         * Sets this field in a copy of the MonthDay.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param value  the value to set the field in the copy to         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**         * Sets this field in a copy of the MonthDay to a parsed text value.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param text  the text value to set         * @param locale  optional locale to use for selecting a text symbol         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the text value isn't valid         */",
E,"/**         * Sets this field in a copy of the MonthDay to a parsed text value.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param text  the text value to set         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the text value isn't valid         */",
E,"/**     * Obtains a {@code MonthDay} set to the current system millisecond time     * using the specified chronology.     * The resulting object does not use the zone.     *     * @param chronology  the chronology, not null     * @return the current month-day, not null     * @since 2.0     */",
E,"/**     * Parses a {@code MonthDay} from the specified string using a formatter.     *      * @param str  the string to parse, not null     * @param formatter  the formatter to use, not null     * @since 2.0     */",
E,"/**     * Constructs a MonthDay from a <code>java.util.Calendar</code>     * using exactly the same field values avoiding any time zone effects.     * <p>     * Each field is queried from the Calendar and assigned to the MonthDay.     * <p>     * This factory method ignores the type of the calendar and always     * creates a MonthDay with ISO chronology. It is expected that you     * will only pass in instances of <code>GregorianCalendar</code> however     * this is not validated.     *     * @param calendar  the Calendar to extract fields from     * @return the created MonthDay, never null     * @throws IllegalArgumentException if the calendar is null     * @throws IllegalArgumentException if the monthOfYear or dayOfMonth is invalid for the ISO chronology     */",
E,"/**     * Handle broken serialization from other tools.     * @return the resolved object, not null     */",
E,"/**     * Gets the number of fields in this partial, which is two.     * The supported fields are MonthOfYear and DayOfMonth.     * Note that only these fields may be queried.     *     * @return the field count, two     */",
E,/**         * Gets the field that this property uses.         *          * @return the field         */,
E,"/**     * Gets the field type at the specified index.     *     * @param index  the index to retrieve     * @return the field at the specified index, never null     * @throws IndexOutOfBoundsException if the index is invalid     */",
E,"/**     * Gets an array of the field type of each of the fields that this partial supports.     * <p>     * The fields are returned largest to smallest, Month, Day.     *     * @return the array of field types (cloned), largest to smallest, never null     */",
E,"/**     * Returns a copy of this month-day with the specified chronology.     * This instance is immutable and unaffected by this method call.     * <p>     * This method retains the values of the fields, thus the result will     * typically refer to a different instant.     * <p>     * The time zone of the specified chronology is ignored, as MonthDay     * operates without a time zone.     *     * @param newChronology  the new chronology, null means ISO     * @return a copy of this month-day with a different chronology, never null     * @throws IllegalArgumentException if the values are invalid for the new chronology     */",
E,"/**     * Returns a copy of this month-day with the specified field set to a new value.     * <p>     * For example, if the field type is <code>dayOfMonth</code> then the day     * would be changed in the returned instance.     * <p>     * These three lines are equivalent:     * <pre>     * MonthDay updated = md.withField(DateTimeFieldType.dayOfMonth(), 6);     * MonthDay updated = md.dayOfMonth().setCopy(6);     * MonthDay updated = md.property(DateTimeFieldType.dayOfMonth()).setCopy(6);     * </pre>     *     * @param fieldType  the field type to set, not null     * @param value  the value to set     * @return a copy of this instance with the field set, never null     * @throws IllegalArgumentException if the value is null or invalid     */",
E,"/**     * Returns a copy of this month-day with the value of the specified field increased.     * <p>     * If the addition is zero, then <code>this</code> is returned.     * <p>     * These three lines are equivalent:     * <pre>     * MonthDay added = md.withFieldAdded(DurationFieldType.days(), 6);     * MonthDay added = md.plusDays(6);     * MonthDay added = md.dayOfMonth().addToCopy(6);     * </pre>     *      * @param fieldType  the field type to add to, not null     * @param amount  the amount to add     * @return a copy of this instance with the field updated, never null     * @throws IllegalArgumentException if the value is null or invalid     * @throws ArithmeticException if the new date-time exceeds the capacity     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the addition is zero, then <code>this</code> is returned.     * Fields in the period that aren't present in the partial are ignored.     * <p>     * This method is typically used to add multiple copies of complex     * period instances. Adding one field is best achieved using methods     * like {@link #withFieldAdded(DurationFieldType, int)}     * or {@link #plusMonths(int)}.     *      * @param period  the period to add to this one, null means zero     * @param scalar  the amount of times to add, such as -1 to subtract once     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new date-time exceeds the capacity     */",
E,"/**     * Returns a copy of this month-day with the specified period added.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to add complex period instances.     * Adding one field is best achieved using methods     * like {@link #plusMonths(int)}.     *      * @param period  the duration to add to this one, null means zero     * @return a copy of this instance with the period added, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,"/**     * Returns a copy of this month-day plus the specified number of months.     * <p>     * This month-day instance is immutable and unaffected by this method call.     * The month will wrap at the end of the year from December to January.     * The day will be adjusted to the last valid value if necessary.     * <p>     * The following three lines are identical in effect:     * <pre>     * MonthDay added = md.plusMonths(6);     * MonthDay added = md.plus(Period.months(6));     * MonthDay added = md.withFieldAdded(DurationFieldType.months(), 6);     * </pre>     *     * @param months  the amount of months to add, may be negative     * @return the new month-day plus the increased months, never null     */",
E,"/**     * Returns a copy of this month-day plus the specified number of days.     * <p>     * This month-day instance is immutable and unaffected by this method call.     * The month will wrap at the end of the year from December to January.     * <p>     * The following three lines are identical in effect:     * <pre>     * MonthDay added = md.plusDays(6);     * MonthDay added = md.plus(Period.days(6));     * MonthDay added = md.withFieldAdded(DurationFieldType.days(), 6);     * </pre>     *     * @param days  the amount of days to add, may be negative     * @return the new month-day plus the increased days, never null     */",
E,"/**     * Returns a copy of this month-day with the specified period taken away.     * <p>     * If the amount is zero or null, then <code>this</code> is returned.     * <p>     * This method is typically used to subtract complex period instances.     * Subtracting one field is best achieved using methods     * like {@link #minusMonths(int)}.     *      * @param period  the period to reduce this instant by     * @return a copy of this instance with the period taken away, never null     * @throws ArithmeticException if the new month-day exceeds the capacity     */",
E,"/**     * Returns a copy of this month-day minus the specified number of months.     * <p>     * This MonthDay instance is immutable and unaffected by this method call.     * The month will wrap at the end of the year from January to December.     * The day will be adjusted to the last valid value if necessary.     * <p>     * The following three lines are identical in effect:     * <pre>     * MonthDay subtracted = md.minusMonths(6);     * MonthDay subtracted = md.minus(Period.months(6));     * MonthDay subtracted = md.withFieldAdded(DurationFieldType.months(), -6);     * </pre>     *     * @param months  the amount of months to subtract, may be negative     * @return the new month-day minus the increased months, never null     */",
E,"/**     * Returns a copy of this month-day minus the specified number of months.     * <p>     * This month-day instance is immutable and unaffected by this method call.     * The month will wrap at the end of the year from January to December.     * <p>     * The following three lines are identical in effect:     * <pre>     * MonthDay subtracted = md.minusDays(6);     * MonthDay subtracted = md.minus(Period.days(6));     * MonthDay subtracted = md.withFieldAdded(DurationFieldType.days(), -6);     * </pre>     *     * @param days  the amount of days to subtract, may be negative     * @return the new month-day minus the increased days, never null     */",
E,"/**     * Converts this object to a LocalDate with the same month-day and chronology.     *     * @param year  the year to use, valid for chronology     * @return a LocalDate with the same month-day and chronology, never null     */",
E,/**     * Get the month of year field value.     *     * @return the month of year     */,
E,/**     * Get the day of month field value.     *     * @return the day of month     */,
E,"/**     * Returns a copy of this month-day with the month of year field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * month of year changed.     *     * @param monthOfYear  the month of year to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Returns a copy of this month-day with the day of month field updated.     * <p>     * MonthDay is immutable, so there are no set methods.     * Instead, this method returns a new instance with the value of     * day of month changed.     *     * @param dayOfMonth  the day of month to set     * @return a copy of this object with the field set, never null     * @throws IllegalArgumentException if the value is invalid     */",
E,"/**     * Gets the property object for the specified type, which contains     * many useful methods.     *     * @param type  the field type to get the property for     * @return the property object     * @throws IllegalArgumentException if the field is null or unsupported     */",
E,/**     * Get the month of year field property which provides access to advanced functionality.     *      * @return the month of year property     */,
E,/**     * Get the day of month field property which provides access to advanced functionality.     *      * @return the day of month property     */,
E,"/**     * Output the month-day using the specified format pattern.     *     * @param pattern  the pattern specification, null means use <code>toString</code>     * @param locale  Locale to use, null means default     * @see org.joda.time.format.DateTimeFormat     */",
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the partial that this property belongs to.         *          * @return the partial         */,
E,/**         * Gets the value of this field.         *          * @return the field value         */,
E,"/**         * Adds to the value of this field in a copy of this MonthDay.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it will affect larger fields.         * Smaller fields are unaffected.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**         * Adds to the value of this field in a copy of this MonthDay wrapping         * within this field if the maximum value is reached.         * <p>         * The value will be added to this field. If the value is too large to be         * added solely to this field then it wraps within this field.         * Other fields are unaffected.         * <p>         * For example,         * <code>--12-30</code> addWrapField one month returns <code>--01-30</code>.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param valueToAdd  the value to add to the field in the copy         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the value isn't valid         */",
E,"/**         * Sets this field in a copy of the MonthDay to a parsed text value.         * <p>         * The MonthDay attached to this property is unchanged by this call.         * Instead, a new instance is returned.         *          * @param text  the text value to set         * @return a copy of the MonthDay with the field value changed         * @throws IllegalArgumentException if the text value isn't valid         */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months added.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to add, may be negative, null means zero     * @return the new period plus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the specified number of months taken away.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param months  the amount of months to take away, may be negative, null means zero     * @return the new period minus the specified number of months     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the months multiplied by the specified scalar.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param scalar  the amount to multiply by, may be negative     * @return the new period multiplied by the specified scalar     * @throws ArithmeticException if the result overflows an int     */",
E,"/**     * Returns a new instance with the months divided by the specified divisor.     * The calculation uses integer division, thus 3 divided by 2 is 1.     * <p>     * This instance is immutable and unaffected by this method call.     *     * @param divisor  the amount to divide by, may be negative     * @return the new period divided by the specified divisor     * @throws ArithmeticException if the divisor is zero     */",
E,/**     * Returns a new instance with the months value negated.     *     * @return the new period with a negated value     * @throws ArithmeticException if the result overflows an int     */,
E,"/**     * Obtains an instance of <code>Months</code> that may be cached.     * <code>Months</code> is immutable, so instances can be cached and shared.     * This factory method provides access to shared instances.     *     * @param months  the number of months to obtain an instance for     * @return the instance of Months     */",
E,"/**     * Creates a <code>Months</code> representing the number of whole months     * between the two specified partial datetimes.     * <p>     * The two partials must contain the same fields, for example you can specify     * two <code>LocalDate</code> objects.     *     * @param start  the start partial date, must not be null     * @param end  the end partial date, must not be null     * @return the period in months     * @throws IllegalArgumentException if the partials are null or invalid     */",
E,"/**     * Creates a <code>Months</code> representing the number of whole months     * in the specified interval. This method corectly handles any daylight     * savings time changes that may occur during the interval.     *     * @param interval  the interval to extract months from, null returns zero     * @return the period in months     * @throws IllegalArgumentException if the partials are null or invalid     */",
E,/**     * Resolves singletons.     *      * @return the singleton instance     */,
E,/**     * Constructor for objects of class ProductMain     */,
E,/** * Sets the title over the image * * @param textOverImage */,
E,/** * Sets the subtitle * @param subTitle */,
E,/** * Initialize the MaterialLargeImageCardThumbnail * @return */,
E,/** * Returns * the title over the image * @return */,
E,/** * Sets the Resource Id to use for the title over the image * @param textOverImageResId */,
E,/** * Returns the Resource Drawable ID * * @return */,
E,/** * Sets the Resource Drawable ID * * @param drawableIdCardThumbnail */,
E,/** * Returns the Drawable URL * @return */,
E,/** * Sets the Drawable URL * * @param urlCardThumbnail */,
E,/** * Sets the interface to be called with the thumbnail * @param externalCardThumbnail */,
E,/* * getFrameTotal : hyeonjae peureimeseo sseureoteurin pinyi cong gaesureul banhwanhanda. */,
E,/* * getFrameScore : scoreBoardeseo peurinteuhal gag peureimyi jeomsupaneul banhwanhanda. */,
E,/* override * getFrameScore : scoreBoardeseo peurinteuhal gag peureimyi jeomsupaneul banhwanhanda. */,
E,/* * startGame : bolring geimeul sijaghanda. * 1. peulreieoga gongeul gulryeo sseureoteurin pinyi gaesu(pins)reul guhanda. * 2. scoreBoarde sseureoteurin pinyi gaesureul giroghanda. * 3. hyeonjaeggaji peulreihan gyeolgwareul culryeoghanda. */,
E,"/* * roll : gongeul gulryeo sseureoteurin pinyi gaesureul banhwanhanda. * - gag peureimyi ceosbeonjjae sido ddae, pinyi gaesureul 0~10saiyi susjareul raendeomeuro balsaengsikigo, nameun pinyi gaesureul jeojanghaedunda. * - gag peureimyi dubeonjjae sido ddae, namyin pinyi gaesu jung raendeomeuro susjaga balsaenghanda. * - majimag peureimyi dubeonjjae sido ddae, nameun pinyi gaesureul jeojanghaedunda. * - manyag wieseo jeojanghan pinyi gaesuga 0gaeramyeon, boneoseu boneoseu tugureul handa. */",
E,/* * ScoreBoard : jeomsupaneun 9gaeyi ilban peureimgwa 1gaeyi majimag peureimeuro irueojinda. */,
E,"/* * saveScore : tugu hoessue ddara hyeonjae peureimsureul gyesanhago, i peureime sseureoteurin pinyi gaesureul giroghanda. */",
E,/* * printBoard : jeomsupaneul culryeoghanda. */,
E,"/* *  printTotalScore : gag peureimyi jeomsureul culryeoghanda. *  - peureimyi congjeomeun gibon jeomsuwa boneoseu jeomsuro guseongdoenda. *  - gibon jeomsuneun ceos beonjjae, du beonjjae sido ddae sseureoteurin pinyi gaesu(getFrameTotal)ida. *  - boneoseu jeomsu(getbonusScore)neun seuteuraikeuna seupeeo balsaeng si, daeum peureimyi sseureoteurin pinyi gaesuro gyeoljeongdoeneun jeomsuida. */",
E,"/* *  printTotalScore : gag peureimyi boneoseu jeomsureul culryeoghanda. *  - daeum peureimi jinhaengdoeji anhasseul ddae, boneoseu jeomsuneun 0jeomeuro banhwanhanda. (geimi jinhaengdoen hu gaengsin ganeung) *  - seuteuraikeureul haesseul ddaen, ihu du beonyi tuguro sseureoteurin pinyi gaesureul banhwanhanda. *  - i dubeonyi tuguneun ilbanjeogeuro daeum peureimyi ceos beonjjae, du beonjjae sidoro gyeoljeongdoena,  *  ceos beonjjae sidoe ddo dasi seuteuraikeuga balsaenghamyeon geu daeum peureimyi ceos beonjjae sidoro gyeoljeongdoenda. *  - seupeeoreul haesseul ddaen, ihu han beonyi tugu(daeum peureimyi ceos beonjjae sido)ro sseureoteurin pinyi gaesureul banhwanhanda. */",
E,/* play a card */,
E,/* shuffle the deck */,
E,/* play a card */,
E,"/**     * Constructs a new exception with <code>null</code> as its detail message. The cause is not initialized, and may     * subsequently be initialized by a call to {@link #initCause}.     *     * @since 1.4     */",
E,"/**     * Constructs a new exception with the specified detail message. The cause is not initialized, and may subsequently     * be initialized by a call to {@link #initCause}.     *     * @param message     *            a useful message relating to the encoder specific error.     */",
E,"/**     * Constructs a new exception with the specified detail message and cause.     *     * <p>     * Note that the detail message associated with <code>cause</code> is not automatically incorporated into this     * exception's detail message.     * </p>     *     * @param message     *            The detail message which is saved for later retrieval by the {@link #getMessage()} method.     * @param cause     *            The cause which is saved for later retrieval by the {@link #getCause()} method. A <code>null</code>     *            value is permitted, and indicates that the cause is nonexistent or unknown.     * @since 1.4     */",
E,"/**     * Constructs a new exception with the specified cause and a detail message of <code>(cause==null ?     * null : cause.toString())</code> (which typically contains the class and detail message of <code>cause</code>).     * This constructor is useful for exceptions that are little more than wrappers for other throwables.     *     * @param cause     *            The cause which is saved for later retrieval by the {@link #getCause()} method. A <code>null</code>     *            value is permitted, and indicates that the cause is nonexistent or unknown.     * @since 1.4     */",
E,/**     * Constructs a new instance with the given algorithm.     *     * @param stringEncoder     *            the StringEncoder used for comparisons.     */,
E,/**     * Creates a Base32 codec used for decoding and encoding.     * <p>     * When encoding the line length is 0 (no chunking).     * </p>     *     */,
E,/**     * Creates a Base32 codec used for decoding and encoding.     * <p>     * When encoding the line length is 0 (no chunking).     * </p>     * @param pad byte used as padding byte.     */,
E,/**     * Creates a Base32 codec used for decoding and encoding.     * <p>     * When encoding the line length is 0 (no chunking).     * </p>     * @param useHex if {@code true} then use Base32 Hex alphabet     */,
E,/**     * Creates a Base32 codec used for decoding and encoding.     * <p>     * When encoding the line length is 0 (no chunking).     * </p>     * @param useHex if {@code true} then use Base32 Hex alphabet     * @param pad byte used as padding byte.     */,
E,"/**     * Creates a Base32 codec used for decoding and encoding.     * <p>     * When encoding the line length is given in the constructor, the line separator is CRLF.     * </p>     *     * @param lineLength     *            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of     *            8). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ignored when     *            decoding.     */",
E,"/**     * Creates a Base32 codec used for decoding and encoding.     * <p>     * When encoding the line length and line separator are given in the constructor.     * </p>     * <p>     * Line lengths that aren't multiples of 8 will still essentially end up being multiples of 8 in the encoded data.     * </p>     *     * @param lineLength     *            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of     *            8). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ignored when     *            decoding.     * @param lineSeparator     *            Each line of encoded data will end with this sequence of bytes.     * @throws IllegalArgumentException     *             The provided lineSeparator included some Base32 characters. That's not going to work!     */",
E,"/**     * Creates a Base32 / Base32 Hex codec used for decoding and encoding.     * <p>     * When encoding the line length and line separator are given in the constructor.     * </p>     * <p>     * Line lengths that aren't multiples of 8 will still essentially end up being multiples of 8 in the encoded data.     * </p>     *     * @param lineLength     *            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of     *            8). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ignored when     *            decoding.     * @param lineSeparator     *            Each line of encoded data will end with this sequence of bytes.     * @param useHex     *            if {@code true}, then use Base32 Hex alphabet, otherwise use Base32 alphabet     * @throws IllegalArgumentException     *             The provided lineSeparator included some Base32 characters. That's not going to work! Or the     *",lineLength &gt; 0 and lineSeparator is null.     */
E,"/**     * Creates a Base32 / Base32 Hex codec used for decoding and encoding.     * <p>     * When encoding the line length and line separator are given in the constructor.     * </p>     * <p>     * Line lengths that aren't multiples of 8 will still essentially end up being multiples of 8 in the encoded data.     * </p>     *     * @param lineLength     *            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of     *            8). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ignored when     *            decoding.     * @param lineSeparator     *            Each line of encoded data will end with this sequence of bytes.     * @param useHex     *            if {@code true}, then use Base32 Hex alphabet, otherwise use Base32 alphabet     * @param pad byte used as padding byte.     * @throws IllegalArgumentException     *             The provided lineSeparator included some Base32 characters. That's",not going to work! Or the     *             lineLength &gt; 0 and lineSeparator is null.     */
E,/**     * Creates a Base32InputStream such that all data read is Base32-decoded from the original provided InputStream.     *     * @param in     *            InputStream to wrap.     */,
E,"/**     * Creates a Base32InputStream such that all data read is either Base32-encoded or Base32-decoded from the original     * provided InputStream.     *     * @param in     *            InputStream to wrap.     * @param doEncode     *            true if we should encode all data read from us, false if we should decode.     */",
E,"/**     * Creates a Base32InputStream such that all data read is either Base32-encoded or Base32-decoded from the original     * provided InputStream.     *     * @param in     *            InputStream to wrap.     * @param doEncode     *            true if we should encode all data read from us, false if we should decode.     */",
E,/**     * Creates a Base32OutputStream such that all data written is Base32-encoded to the original provided OutputStream.     *     * @param out     *            OutputStream to wrap.     */,
E,"/**     * Creates a Base32OutputStream such that all data written is either Base32-encoded or Base32-decoded to the     * original provided OutputStream.     *     * @param out     *            OutputStream to wrap.     * @param doEncode     *            true if we should encode all data written to us, false if we should decode.     */",
E,"/**     * Creates a Base32OutputStream such that all data written is either Base32-encoded or Base32-decoded to the     * original provided OutputStream.     *     * @param out     *            OutputStream to wrap.     * @param doEncode     *            true if we should encode all data written to us, false if we should decode.     */",
E,"/**     * Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.     * <p>     * When encoding the line length is 0 (no chunking), and the encoding table is STANDARD_ENCODE_TABLE.     * </p>     *     * <p>     * When decoding all variants are supported.     * </p>     */",
E,"/**     * Creates a Base64 codec used for decoding (all modes) and encoding in the given URL-safe mode.     * <p>     * When encoding the line length is 76, the line separator is CRLF, and the encoding table is STANDARD_ENCODE_TABLE.     * </p>     *     * <p>     * When decoding all variants are supported.     * </p>     *     * @param urlSafe     *            if <code>true</code>, URL-safe encoding is used. In most cases this should be set to     *            <code>false</code>.     * @since 1.4     */",
E,"/**     * Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.     * <p>     * When encoding the line length is given in the constructor, the line separator is CRLF, and the encoding table is     * STANDARD_ENCODE_TABLE.     * </p>     * <p>     * Line lengths that aren't multiples of 4 will still essentially end up being multiples of 4 in the encoded data.     * </p>     * <p>     * When decoding all variants are supported.     * </p>     *     * @param lineLength     *            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of     *            4). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ignored when     *            decoding.     * @since 1.4     */",
E,"/**     * Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.     * <p>     * When encoding the line length and line separator are given in the constructor, and the encoding table is     * STANDARD_ENCODE_TABLE.     * </p>     * <p>     * Line lengths that aren't multiples of 4 will still essentially end up being multiples of 4 in the encoded data.     * </p>     * <p>     * When decoding all variants are supported.     * </p>     *     * @param lineLength     *            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of     *            4). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ignored when     *            decoding.     * @param lineSeparator     *            Each line of encoded data will end with this sequence of bytes.     * @throws IllegalArgumentException     *             Thrown when the provided lineSeparator included some base64 characters.     * @sinc",e 1.4     */
E,"/**     * Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.     * <p>     * When encoding the line length and line separator are given in the constructor, and the encoding table is     * STANDARD_ENCODE_TABLE.     * </p>     * <p>     * Line lengths that aren't multiples of 4 will still essentially end up being multiples of 4 in the encoded data.     * </p>     * <p>     * When decoding all variants are supported.     * </p>     *     * @param lineLength     *            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of     *            4). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ignored when     *            decoding.     * @param lineSeparator     *            Each line of encoded data will end with this sequence of bytes.     * @param urlSafe     *            Instead of emitting '+' and '/' we emit '-' and '_' respectively. urlSafe is only applied to encode",*            operations. Decoding seamlessly handles both modes.     *            <b>Note: no padding is added when using the URL-safe alphabet.</b>     * @throws IllegalArgumentException     *             The provided lineSeparator included some base64 characters. That's not going to work!     * @since 1.4     */
E,"/**     * Returns our current encode mode. True if we're URL-SAFE, false otherwise.     *     * @return true if we're in URL-SAFE mode, false otherwise.     * @since 1.4     */",
E,"/**     * Tests a given byte array to see if it contains only valid characters within the Base64 alphabet. Currently the     * method treats whitespace as valid.     *     * @param arrayOctet     *            byte array to test     * @return <code>true</code> if all bytes are valid characters in the Base64 alphabet or if the byte array is empty;     *         <code>false</code>, otherwise     * @since 1.5     */",
E,"/**     * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.     *     * @param binaryData     *            Array containing binary data to encode.     * @param isChunked     *            if <code>true</code> this encoder will chunk the base64 output into 76 character blocks     * @param urlSafe     *            if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.     *            <b>Note: no padding is added when encoding using the URL-safe alphabet.</b>     * @param maxResultSize     *            The maximum result size to accept.     * @return Base64-encoded data.     * @throws IllegalArgumentException     *             Thrown when the input array needs an output array bigger than maxResultSize     * @since 1.4     */",
E,"/**     * Encodes binary data using the base64 algorithm but does not chunk the output.     *     * NOTE:  We changed the behaviour of this method from multi-line chunking (commons-codec-1.4) to     * single-line non-chunking (commons-codec-1.5).     *     * @param binaryData     *            binary data to encode     * @return String containing Base64 characters.     * @since 1.4 (NOTE:  1.4 chunked the output, whereas 1.5 does not).     */",
E,/**     * Encodes binary data using a URL-safe variation of the base64 algorithm but does not chunk the output. The     * url-safe variation emits - and _ instead of + and / characters.     * <b>Note: no padding is added.</b>     * @param binaryData     *            binary data to encode     * @return byte[] containing Base64 characters in their UTF-8 representation.     * @since 1.4     */,
E,/**     * Encodes binary data using a URL-safe variation of the base64 algorithm but does not chunk the output. The     * url-safe variation emits - and _ instead of + and / characters.     * <b>Note: no padding is added.</b>     * @param binaryData     *            binary data to encode     * @return String containing Base64 characters     * @since 1.4     */,
E,/**     * Encodes binary data using the base64 algorithm and chunks the encoded output into 76 character blocks     *     * @param binaryData     *            binary data to encode     * @return Base64 characters chunked in 76 character blocks     */,
E,/**     * Decodes Base64 data into octets.     * <p>     * <b>Note:</b> this method seamlessly handles data encoded in URL-safe or normal mode.     * </p>     *     * @param base64Data     *            Byte array containing Base64 data     * @return Array containing decoded data.     */,
E,/**     * Decodes a byte64-encoded integer according to crypto standards such as W3C's XML-Signature.     *     * @param pArray     *            a byte array containing base64 character data     * @return A BigInteger     * @since 1.4     */,
E,/**     * Encodes to a byte64-encoded integer according to crypto standards such as W3C's XML-Signature.     *     * @param bigInt     *            a BigInteger     * @return A byte array containing base64 character data     * @throws NullPointerException     *             if null is passed in     * @since 1.4     */,
E,/**     * Returns a byte-array representation of a <code>BigInteger</code> without sign bit.     *     * @param bigInt     *            <code>BigInteger</code> to be converted     * @return a byte array representation of the BigInteger parameter     */,
E,/**     * Creates a Base64InputStream such that all data read is Base64-decoded from the original provided InputStream.     *     * @param in     *            InputStream to wrap.     */,
E,"/**     * Creates a Base64InputStream such that all data read is either Base64-encoded or Base64-decoded from the original     * provided InputStream.     *     * @param in     *            InputStream to wrap.     * @param doEncode     *            true if we should encode all data read from us, false if we should decode.     */",
E,"/**     * Creates a Base64InputStream such that all data read is either Base64-encoded or Base64-decoded from the original     * provided InputStream.     *     * @param in     *            InputStream to wrap.     * @param doEncode     *            true if we should encode all data read from us, false if we should decode.     */",
E,/**     * Creates a Base64OutputStream such that all data written is Base64-encoded to the original provided OutputStream.     *     * @param out     *            OutputStream to wrap.     */,
E,"/**     * Creates a Base64OutputStream such that all data written is either Base64-encoded or Base64-decoded to the     * original provided OutputStream.     *     * @param out     *            OutputStream to wrap.     * @param doEncode     *            true if we should encode all data written to us, false if we should decode.     */",
E,"/**     * Creates a Base64OutputStream such that all data written is either Base64-encoded or Base64-decoded to the     * original provided OutputStream.     *     * @param out     *            OutputStream to wrap.     * @param doEncode     *            true if we should encode all data written to us, false if we should decode.     */",
E,/**     * Returns true if this object has buffered data for reading.     *     * @param context the context to be used     * @return true if there is data still available for reading.     */,
E,/**     * Returns the amount of buffered data available for reading.     *     * @param context the context to be used     * @return The amount of buffered data available for reading.     */,
E,/**     * Get the default buffer size. Can be overridden.     *     * @return {@link #DEFAULT_BUFFER_SIZE}     */,
E,/**     * Increases our buffer by the {@link #DEFAULT_BUFFER_RESIZE_FACTOR}.     * @param context the context to be used     */,
E,/**     * Ensure that the buffer has room for <code>size</code> bytes     *     * @param size minimum spare space required     * @param context the context to be used     * @return the buffer     */,
E,"/**     * Extracts buffered data into the provided byte[] array, starting at position bPos, up to a maximum of bAvail     * bytes. Returns how many bytes were actually extracted.     * <p>     * Package protected for access from I/O streams.     *     * @param b     *            byte[] array to extract the buffered data into.     * @param bPos     *            position in byte[] array to start extraction at.     * @param bAvail     *            amount of bytes we're allowed to extract. We may extract fewer (if fewer are available).     * @param context     *            the context to be used     * @return The number of bytes successfully extracted into the provided byte[] array.     */",
E,"/**     * Checks if a byte value is whitespace or not.     * Whitespace is taken to mean: space, tab, CR, LF     * @param byteToCheck     *            the byte to check     * @return true if byte is whitespace, false otherwise     */",
E,"/**     * Encodes a byte[] containing binary data, into a String containing characters in the Base-N alphabet.     * Uses UTF8 encoding.     *     * @param pArray     *            a byte array containing binary data     * @return A String containing only Base-N character data     */",
E,"/**     * Encodes a byte[] containing binary data, into a String containing characters in the appropriate alphabet.     * Uses UTF8 encoding.     *     * @param pArray a byte array containing binary data     * @return String containing only character data in the appropriate alphabet.    */",
E,"/**     * Tests a given String to see if it contains only valid characters within the alphabet.     * The method treats whitespace and PAD as valid.     *     * @param basen String to test     * @return <code>true</code> if all characters in the String are valid characters in the alphabet or if     *         the String is empty; <code>false</code>, otherwise     * @see #isInAlphabet(byte[], boolean)     */",
E,/**     * Tests a given byte array to see if it contains any characters within the alphabet or PAD.     *     * Intended for use in checking line-ending arrays     *     * @param arrayOctet     *            byte array to test     * @return <code>true</code> if any byte is a valid character in the alphabet or PAD; <code>false</code> otherwise     */,
E,/**     * Calculates the amount of space needed to encode the supplied array.     *     * @param pArray byte[] array which will later be encoded     *     * @return amount of space needed to encoded the supplied array.     * Returns a long since a max-len array will require &gt; Integer.MAX_VALUE     */,
E,/**     * Decodes a String where each char of the String represents an ASCII '0' or '1'.     *     * @param ascii     *                  String of '0' and '1' characters     * @return the raw encoded binary where each bit corresponds to a byte in the byte array argument     * @see org.apache.commons.codec.Decoder#decode(Object)     */,
E,/**     * Decodes a byte array where each byte represents an ASCII '0' or '1'.     *     * @param ascii     *                  each byte represents an ASCII '0' or '1'     * @return the raw encoded binary where each bit corresponds to a byte in the byte array argument     */,
E,/**     * Returns <code>true</code> if the given array is <code>null</code> or empty (size 0.)     *     * @param array     *            the source array     * @return <code>true</code> if the given array is <code>null</code> or empty (size 0.)     */,
E,/**     * Converts an array of raw binary data into an array of ASCII 0 and 1 character bytes - each byte is a truncated     * char.     *     * @param raw     *                  the raw binary data to convert     * @return an array of 0 and 1 character bytes for each bit of the argument     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])     */,
E,/**     * Converts an array of raw binary data into an array of ASCII 0 and 1 characters.     *     * @param raw     *                  the raw binary data to convert     * @return an array of 0 and 1 characters for each bit of the argument     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])     */,
E,/**     * Converts an array of raw binary data into a String of ASCII 0 and 1 characters.     *     * @param raw     *                  the raw binary data to convert     * @return a String of 0 and 1 characters representing the binary data     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])     */,
E,/**     * Green implementation of regionMatches.     *     * @param cs     *            the <code>CharSequence</code> to be processed     * @param ignoreCase     *            whether or not to be case insensitive     * @param thisStart     *            the index to start on the <code>cs</code> CharSequence     * @param substring     *            the <code>CharSequence</code> to be looked for     * @param start     *            the index to start on the <code>substring</code> CharSequence     * @param length     *            character length of the region     * @return whether the region matched     */,
E,/**     * Creates a new codec with the default charset name {@link #DEFAULT_CHARSET}     */,
E,/**     * Creates a new codec with the given Charset.     *     * @param charset     *            the charset.     * @since 1.7     */,
E,/**     * Creates a new codec with the given charset name.     *     * @param charsetName     *            the charset name.     * @throws java.nio.charset.UnsupportedCharsetException     *             If the named charset is unavailable     * @since 1.4     * @since 1.7 throws UnsupportedCharsetException if the named charset is unavailable     */,
E,"/**     * Converts an array of characters representing hexadecimal values into an array of bytes of those same values. The     * returned array will be half the length of the passed array, as it takes two characters to represent any given     * byte. An exception is thrown if the passed char array has an odd number of elements.     *     * @param data     *            An array of characters containing hexadecimal digits     * @return A byte array containing binary data decoded from the supplied char array.     * @throws DecoderException     *             Thrown if an odd number or illegal of characters is supplied     */",
E,"/**     * Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order.     * The returned array will be double the length of the passed array, as it takes two characters to represent any     * given byte.     *     * @param data     *            a byte[] to convert to Hex characters     * @param toDigits     *            the output alphabet     * @return A char[] containing hexadecimal characters     * @since 1.4     */",
E,"/**     * Converts an array of bytes into a String representing the hexadecimal values of each byte in order. The returned     * String will be double the length of the passed array, as it takes two characters to represent any given byte.     *     * @param data     *            a byte[] to convert to Hex characters     * @return A String containing hexadecimal characters     * @since 1.4     */",
E,/**     * Converts a hexadecimal character to an integer.     *     * @param ch     *            A character to convert to an integer digit     * @param index     *            The index of the character in the source     * @return An integer     * @throws DecoderException     *             Thrown if ch is an illegal hex character     */,
E,/**     * Gets the charset.     *     * @return the charset.     * @since 1.7     */,
E,/**     * Gets the charset name.     *     * @return the charset name.     * @since 1.4     */,
E,"/**     * <p>     * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.     * </p>     *     * <p>     * <code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal.     * The comparison is case sensitive.     * </p>     *     * <pre>     * StringUtils.equals(null, null)   = true     * StringUtils.equals(null, ""abc"")  = false     * StringUtils.equals(""abc"", null)  = false     * StringUtils.equals(""abc"", ""abc"") = true     * StringUtils.equals(""abc"", ""ABC"") = false     * </pre>     *     * <p>     * Copied from Apache Commons Lang r1583482 on April 10, 2014 (day of 3.3.2 release).     * </p>     *     * @see Object#equals(Object)     * @param cs1     *            the first CharSequence, may be <code>null</code>     * @param cs2     *            the second CharSequence, may be <code>null</code>     * @return <code>true</code> if the CharSequences are equal (case-sensitive), or both <cod",e>null</code>     * @since 1.10     */
E,"/**     * Calls {@link String#getBytes(Charset)}     *     * @param string     *            The string to encode (if null, return null).     * @param charset     *            The {@link Charset} to encode the <code>String</code>     * @return the encoded bytes     */",
E,"/**     * Encodes the given string into a sequence of bytes using the ISO-8859-1 charset, storing the result into a new     * byte array.     *     * @param string     *            the String to encode, may be <code>null</code>     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>     * @throws NullPointerException     *             Thrown if {@link Charsets#ISO_8859_1} is not initialized, which should never happen since it is     *             required by the Java platform specification.     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException     * @see <a href=""http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html"">Standard charsets</a>     * @see #getBytesUnchecked(String, String)     */",
E,"/**     * Encodes the given string into a sequence of bytes using the named charset, storing the result into a new byte     * array.     * <p>     * This method catches {@link UnsupportedEncodingException} and rethrows it as {@link IllegalStateException}, which     * should never happen for a required charset name. Use this method when the encoding is required to be in the JRE.     * </p>     *     * @param string     *            the String to encode, may be <code>null</code>     * @param charsetName     *            The name of a required {@link java.nio.charset.Charset}     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>     * @throws IllegalStateException     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a     *             required charset name.     * @see CharEncoding     * @see String#getBytes(String)     */",
E,"/**     * Encodes the given string into a sequence of bytes using the US-ASCII charset, storing the result into a new byte     * array.     *     * @param string     *            the String to encode, may be <code>null</code>     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>     * @throws NullPointerException     *             Thrown if {@link Charsets#US_ASCII} is not initialized, which should never happen since it is     *             required by the Java platform specification.     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException     * @see <a href=""http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html"">Standard charsets</a>     * @see #getBytesUnchecked(String, String)     */",
E,"/**     * Encodes the given string into a sequence of bytes using the UTF-16 charset, storing the result into a new byte     * array.     *     * @param string     *            the String to encode, may be <code>null</code>     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>     * @throws NullPointerException     *             Thrown if {@link Charsets#UTF_16} is not initialized, which should never happen since it is     *             required by the Java platform specification.     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException     * @see <a href=""http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html"">Standard charsets</a>     * @see #getBytesUnchecked(String, String)     */",
E,"/**     * Encodes the given string into a sequence of bytes using the UTF-16BE charset, storing the result into a new byte     * array.     *     * @param string     *            the String to encode, may be <code>null</code>     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>     * @throws NullPointerException     *             Thrown if {@link Charsets#UTF_16BE} is not initialized, which should never happen since it is     *             required by the Java platform specification.     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException     * @see <a href=""http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html"">Standard charsets</a>     * @see #getBytesUnchecked(String, String)     */",
E,"/**     * Encodes the given string into a sequence of bytes using the UTF-16LE charset, storing the result into a new byte     * array.     *     * @param string     *            the String to encode, may be <code>null</code>     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>     * @throws NullPointerException     *             Thrown if {@link Charsets#UTF_16LE} is not initialized, which should never happen since it is     *             required by the Java platform specification.     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException     * @see <a href=""http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html"">Standard charsets</a>     * @see #getBytesUnchecked(String, String)     */",
E,"/**     * Encodes the given string into a sequence of bytes using the UTF-8 charset, storing the result into a new byte     * array.     *     * @param string     *            the String to encode, may be <code>null</code>     * @return encoded bytes, or <code>null</code> if the input string was <code>null</code>     * @throws NullPointerException     *             Thrown if {@link Charsets#UTF_8} is not initialized, which should never happen since it is     *             required by the Java platform specification.     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException     * @see <a href=""http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html"">Standard charsets</a>     * @see #getBytesUnchecked(String, String)     */",
E,"/**     * Constructs a new <code>String</code> by decoding the specified array of bytes using the given charset.     * <p>     * This method catches {@link UnsupportedEncodingException} and re-throws it as {@link IllegalStateException}, which     * should never happen for a required charset name. Use this method when the encoding is required to be in the JRE.     * </p>     *     * @param bytes     *            The bytes to be decoded into characters, may be <code>null</code>     * @param charsetName     *            The name of a required {@link java.nio.charset.Charset}     * @return A new <code>String</code> decoded from the specified array of bytes using the given charset,     *         or <code>null</code> if the input byte array was <code>null</code>.     * @throws IllegalStateException     *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a     *             required charset name.     * @see CharEncoding     * @see String#S","tring(byte[], String)     */"
E,"/**     * Constructs a new <code>String</code> by decoding the specified array of bytes using the ISO-8859-1 charset.     *     * @param bytes     *            The bytes to be decoded into characters, may be <code>null</code>     * @return A new <code>String</code> decoded from the specified array of bytes using the ISO-8859-1 charset, or     *         <code>null</code> if the input byte array was <code>null</code>.     * @throws NullPointerException     *             Thrown if {@link Charsets#ISO_8859_1} is not initialized, which should never happen since it is     *             required by the Java platform specification.     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException     */",
E,"/**     * Constructs a new <code>String</code> by decoding the specified array of bytes using the US-ASCII charset.     *     * @param bytes     *            The bytes to be decoded into characters     * @return A new <code>String</code> decoded from the specified array of bytes using the US-ASCII charset,     *         or <code>null</code> if the input byte array was <code>null</code>.     * @throws NullPointerException     *             Thrown if {@link Charsets#US_ASCII} is not initialized, which should never happen since it is     *             required by the Java platform specification.     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException     */",
E,"/**     * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-16 charset.     *     * @param bytes     *            The bytes to be decoded into characters     * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16 charset     *         or <code>null</code> if the input byte array was <code>null</code>.     * @throws NullPointerException     *             Thrown if {@link Charsets#UTF_16} is not initialized, which should never happen since it is     *             required by the Java platform specification.     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException     */",
E,"/**     * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-16BE charset.     *     * @param bytes     *            The bytes to be decoded into characters     * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16BE charset,     *         or <code>null</code> if the input byte array was <code>null</code>.     * @throws NullPointerException     *             Thrown if {@link Charsets#UTF_16BE} is not initialized, which should never happen since it is     *             required by the Java platform specification.     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException     */",
E,"/**     * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-16LE charset.     *     * @param bytes     *            The bytes to be decoded into characters     * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-16LE charset,     *         or <code>null</code> if the input byte array was <code>null</code>.     * @throws NullPointerException     *             Thrown if {@link Charsets#UTF_16LE} is not initialized, which should never happen since it is     *             required by the Java platform specification.     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException     */",
E,"/**     * Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-8 charset.     *     * @param bytes     *            The bytes to be decoded into characters     * @return A new <code>String</code> decoded from the specified array of bytes using the UTF-8 charset,     *         or <code>null</code> if the input byte array was <code>null</code>.     * @throws NullPointerException     *             Thrown if {@link Charsets#UTF_8} is not initialized, which should never happen since it is     *             required by the Java platform specification.     * @since As of 1.7, throws {@link NullPointerException} instead of UnsupportedEncodingException     */",
E,/**     * Base64 like conversion of bytes to ASCII chars.     *     * @param b2     *            A byte from the result.     * @param b1     *            A byte from the result.     * @param b0     *            A byte from the result.     * @param outLen     *            The number of expected output chars.     * @param buffer     *            Where the output chars is appended to.     */,
E,/**     * Generates a string of random chars from the B64T set.     *     * @param num     *            Number of chars to generate.     */,
E,"/**     * Encrypts a password in a crypt(3) compatible way.     * <p>     * The exact algorithm depends on the format of the salt string:     * <ul>     * <li>SHA-512 salts start with {@code $6$} and are up to 16 chars long.     * <li>SHA-256 salts start with {@code $5$} and are up to 16 chars long     * <li>MD5 salts start with {@code $1$} and are up to 8 chars long     * <li>DES, the traditional UnixCrypt algorithm is used with only 2 chars     * <li>Only the first 8 chars of the passwords are used in the DES algorithm!     * </ul>     * The magic strings {@code ""$apr1$""} and {@code ""$2a$""} are not recognized by this method as its output should be     * identical with that of the libc implementation.     * <p>     * The rest of the salt string is drawn from the set {@code [a-zA-Z0-9./]} and is cut at the maximum length of if a     * {@code ""$""} sign is encountered. It is therefore valid to enter a complete hash value as salt to e.g. verify a     * password with:     *     * <pre>","* storedPwd.equals(crypt(enteredPwd, storedPwd))     * </pre>     * <p>     * The resulting string starts with the marker string ({@code $6$}), continues with the salt value and ends with a     * {@code ""$""} sign followed by the actual hash value. For DES the string only contains the salt and actual hash.     * It's total length is dependent on the algorithm used:     * <ul>     * <li>SHA-512: 106 chars     * <li>SHA-256: 63 chars     * <li>MD5: 34 chars     * <li>DES: 13 chars     * </ul>     * <p>     * Example:     *     * <pre>     *      crypt(""secret"", ""$1$xxxx"") =&gt; ""$1$xxxx$aMkevjfEIpa35Bh3G4bAc.""     *      crypt(""secret"", ""xx"") =&gt; ""xxWAum7tHdIUw""     * </pre>     * <p>     * This method comes in a variation that accepts a byte[] array to support input strings that are not encoded in     * UTF-8 but e.g. in ISO-8859-1 where equal characters result in different byte values.     *     * @see ""The man page of the libc crypt (3) function.""     * @param key     *            plaintext password as entered by the used     * @param salt     *            salt value     * @return hash value, i.e. encrypted password including the salt string     * @throws IllegalArgumentException     *             if the salt does not match the allowed pattern     * @throws RuntimeException     *             when a {@link java.security.NoSuchAlgorithmException} is caught. *     */"
E,/**     * Read through an InputStream and returns the digest for the data     *     * @param digest     *            The MessageDigest to use (e.g. MD5)     * @param data     *            Data to digest     * @return the digest     * @throws IOException     *             On error reading from the stream     */,
E,"/**     * Returns a <code>MessageDigest</code> for the given <code>algorithm</code>.     *     * @param algorithm     *            the name of the algorithm requested. See <a     *            href=""http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html#AppA""     *            >Appendix A in the Java Cryptography Architecture Reference Guide</a> for information about standard     *            algorithm names.     * @return A digest instance.     * @see MessageDigest#getInstance(String)     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught.     */",
E,"/**     * Returns an MD2 MessageDigest.     *     * @return An MD2 digest instance.     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught, which should never happen because MD2 is a     *             built-in algorithm     * @see MessageDigestAlgorithms#MD2     * @since 1.7     */",
E,"/**     * Returns an MD5 MessageDigest.     *     * @return An MD5 digest instance.     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught, which should never happen because MD5 is a     *             built-in algorithm     * @see MessageDigestAlgorithms#MD5     */",
E,"/**     * Returns an SHA-1 digest.     *     * @return An SHA-1 digest instance.     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught, which should never happen because SHA-1 is a     *             built-in algorithm     * @see MessageDigestAlgorithms#SHA_1     * @since 1.7     */",
E,"/**     * Returns an SHA-256 digest.     * <p>     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.     * </p>     *     * @return An SHA-256 digest instance.     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught, which should never happen because SHA-256 is a     *             built-in algorithm     * @see MessageDigestAlgorithms#SHA_256     */",
E,"/**     * Returns an SHA-384 digest.     * <p>     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.     * </p>     *     * @return An SHA-384 digest instance.     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught, which should never happen because SHA-384 is a     *             built-in algorithm     * @see MessageDigestAlgorithms#SHA_384     */",
E,"/**     * Returns an SHA-512 digest.     * <p>     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.     * </p>     *     * @return An SHA-512 digest instance.     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught, which should never happen because SHA-512 is a     *             built-in algorithm     * @see MessageDigestAlgorithms#SHA_512     */",
E,/**     * Calculates the MD2 digest and returns the value as a 16 element <code>byte[]</code>.     *     * @param data     *            Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}     * @return MD2 digest     * @since 1.7     */,
E,/**     * Calculates the MD2 digest and returns the value as a 32 character hex string.     *     * @param data     *            Data to digest     * @return MD2 digest as a hex string     * @since 1.7     */,
E,/**     * Calculates the MD5 digest and returns the value as a 16 element <code>byte[]</code>.     *     * @param data     *            Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}     * @return MD5 digest     */,
E,/**     * Calculates the MD5 digest and returns the value as a 32 character hex string.     *     * @param data     *            Data to digest     * @return MD5 digest as a hex string     */,
E,/**     * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.     *     * @param data     *            Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}     * @return SHA-1 digest     */,
E,/**     * Calculates the SHA-1 digest and returns the value as a hex string.     *     * @param data     *            Data to digest     * @return SHA-1 digest as a hex string     * @since 1.7     */,
E,/**     * Calculates the SHA-256 digest and returns the value as a <code>byte[]</code>.     * <p>     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.     * </p>     *     * @param data     *            Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}     * @return SHA-256 digest     * @since 1.4     */,
E,/**     * Calculates the SHA-256 digest and returns the value as a hex string.     * <p>     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.     * </p>     *     * @param data     *            Data to digest     * @return SHA-256 digest as a hex string     * @since 1.4     */,
E,/**     * Calculates the SHA-384 digest and returns the value as a <code>byte[]</code>.     * <p>     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.     * </p>     *     * @param data     *            Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}     * @return SHA-384 digest     * @since 1.4     */,
E,/**     * Calculates the SHA-384 digest and returns the value as a hex string.     * <p>     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.     * </p>     *     * @param data     *            Data to digest     * @return SHA-384 digest as a hex string     * @since 1.4     */,
E,/**     * Calculates the SHA-512 digest and returns the value as a <code>byte[]</code>.     * <p>     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.     * </p>     *     * @param data     *            Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}     * @return SHA-512 digest     * @since 1.4     */,
E,/**     * Calculates the SHA-512 digest and returns the value as a hex string.     * <p>     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.     * </p>     *     * @param data     *            Data to digest     * @return SHA-512 digest as a hex string     * @since 1.4     */,
E,/**     * Updates the given {@link MessageDigest}.     *     * @param messageDigest     *            the {@link MessageDigest} to update     * @param valueToDigest     *            the value to update the {@link MessageDigest} with;     *            converted to bytes using {@link StringUtils#getBytesUtf8(String)}     * @return the updated {@link MessageDigest}     * @since 1.7     */,
E,/**     * Returns an initialized <code>Mac</code> for the HmacMD5 algorithm.     * <p>     * Every implementation of the Java platform is required to support this standard Mac algorithm.     * </p>     *     * @param key     *            They key for the keyed digest (must not be null)     * @return A Mac instance initialized with the given key.     * @see Mac#getInstance(String)     * @see Mac#init(Key)     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.     */,
E,/**     * Returns an initialized <code>Mac</code> for the HmacSHA1 algorithm.     * <p>     * Every implementation of the Java platform is required to support this standard Mac algorithm.     * </p>     *     * @param key     *            They key for the keyed digest (must not be null)     * @return A Mac instance initialized with the given key.     * @see Mac#getInstance(String)     * @see Mac#init(Key)     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.     */,
E,/**     * Returns an initialized <code>Mac</code> for the HmacSHA256 algorithm.     * <p>     * Every implementation of the Java platform is required to support this standard Mac algorithm.     * </p>     *     * @param key     *            They key for the keyed digest (must not be null)     * @return A Mac instance initialized with the given key.     * @see Mac#getInstance(String)     * @see Mac#init(Key)     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.     */,
E,/**     * Returns an initialized <code>Mac</code> for the HmacSHA384 algorithm.     * <p>     * Every implementation of the Java platform is <em>not</em> required to support this Mac algorithm.     * </p>     *     * @param key     *            They key for the keyed digest (must not be null)     * @return A Mac instance initialized with the given key.     * @see Mac#getInstance(String)     * @see Mac#init(Key)     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.     */,
E,/**     * Returns an initialized <code>Mac</code> for the HmacSHA512 algorithm.     * <p>     * Every implementation of the Java platform is <em>not</em> required to support this Mac algorithm.     * </p>     *     * @param key     *            They key for the keyed digest (must not be null)     * @return A Mac instance initialized with the given key.     * @see Mac#getInstance(String)     * @see Mac#init(Key)     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.     */,
E,"/**     * Returns an initialized <code>Mac</code> for the given <code>algorithm</code>.     *     * @param algorithm     *            the name of the algorithm requested. See <a href=     *            ""http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html#AppA"" >Appendix     *            A in the Java Cryptography Architecture Reference Guide</a> for information about standard algorithm     *            names.     * @param key     *            They key for the keyed digest (must not be null)     * @return A Mac instance initialized with the given key.     * @see Mac#getInstance(String)     * @see Mac#init(Key)     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.     */",
E,/**     * Returns a HmacMD5 Message Authentication Code (MAC) for the given key and value.     *     * @param key     *            They key for the keyed digest (must not be null)     * @param valueToDigest     *            The value (data) which should to digest (maybe empty or null)     * @return HmacMD5 MAC for the given key and value     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.     */,
E,/**     * Returns a HmacMD5 Message Authentication Code (MAC) as a hex string (lowercase) for the given key and value.     *     * @param key     *            They key for the keyed digest (must not be null)     * @param valueToDigest     *            The value (data) which should to digest (maybe empty or null)     * @return HmacMD5 MAC for the given key and value as a hex string (lowercase)     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.     */,
E,/**     * Returns a HmacSHA1 Message Authentication Code (MAC) for the given key and value.     *     * @param key     *            They key for the keyed digest (must not be null)     * @param valueToDigest     *            The value (data) which should to digest (maybe empty or null)     * @return HmacSHA1 MAC for the given key and value     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.     */,
E,/**     * Returns a HmacSHA1 Message Authentication Code (MAC) as hex string (lowercase) for the given key and value.     *     * @param key     *            They key for the keyed digest (must not be null)     * @param valueToDigest     *            The value (data) which should to digest (maybe empty or null)     * @return HmacSHA1 MAC for the given key and value as hex string (lowercase)     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.     */,
E,/**     * Returns a HmacSHA256 Message Authentication Code (MAC) for the given key and value.     *     * @param key     *            They key for the keyed digest (must not be null)     * @param valueToDigest     *            The value (data) which should to digest (maybe empty or null)     * @return HmacSHA256 MAC for the given key and value     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.     */,
E,/**     * Returns a HmacSHA256 Message Authentication Code (MAC) as hex string (lowercase) for the given key and value.     *     * @param key     *            They key for the keyed digest (must not be null)     * @param valueToDigest     *            The value (data) which should to digest (maybe empty or null)     * @return HmacSHA256 MAC for the given key and value as hex string (lowercase)     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.     */,
E,/**     * Returns a HmacSHA384 Message Authentication Code (MAC) for the given key and value.     *     * @param key     *            They key for the keyed digest (must not be null)     * @param valueToDigest     *            The value (data) which should to digest (maybe empty or null)     * @return HmacSHA384 MAC for the given key and value     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.     */,
E,/**     * Returns a HmacSHA384 Message Authentication Code (MAC) as hex string (lowercase) for the given key and value.     *     * @param key     *            They key for the keyed digest (must not be null)     * @param valueToDigest     *            The value (data) which should to digest (maybe empty or null)     * @return HmacSHA384 MAC for the given key and value as hex string (lowercase)     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.     */,
E,/**     * Returns a HmacSHA512 Message Authentication Code (MAC) for the given key and value.     *     * @param key     *            They key for the keyed digest (must not be null)     * @param valueToDigest     *            The value (data) which should to digest (maybe empty or null)     * @return HmacSHA512 MAC for the given key and value     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.     */,
E,/**     * Returns a HmacSHA512 Message Authentication Code (MAC) as hex string (lowercase) for the given key and value.     *     * @param key     *            They key for the keyed digest (must not be null)     * @param valueToDigest     *            The value (data) which should to digest (maybe empty or null)     * @return HmacSHA512 MAC for the given key and value as hex string (lowercase)     * @throws IllegalArgumentException     *             when a {@link NoSuchAlgorithmException} is caught or key is null or key is invalid.     */,
E,/**     * Updates the given {@link Mac}. This generates a digest for valueToDigest and the key the Mac was initialized     *     * @param mac     *            the initialized {@link Mac} to update     * @param valueToDigest     *            the value to update the {@link Mac} with (maybe null or empty)     * @return the updated {@link Mac}     * @throws IllegalStateException     *             if the Mac was not initialized     * @since 1.x     */,
E,"/**     * Generates an Apache htpasswd compatible ""$apr1$"" MD5 based hash value.     * <p>     * The algorithm is identical to the crypt(3) ""$1$"" one but produces different outputs due to the different salt     * prefix.     *     * @param keyBytes     *            plaintext string to hash.     * @param salt     *            salt string including the prefix and optionally garbage at the end. Will be generated randomly if     *            null.     * @return the hash value     * @throws IllegalArgumentException     *             if the salt does not match the allowed pattern     * @throws RuntimeException     *             when a {@link java.security.NoSuchAlgorithmException} is caught.     */",
E,"/**     * Generates a libc6 crypt() ""$1$"" or Apache htpasswd ""$apr1$"" hash value.     * <p>     * See {@link Crypt#crypt(String, String)} or {@link #apr1Crypt(String, String)} for details.     *     * @param keyBytes     *            plaintext string to hash.     * @param salt May be null.     * @param prefix salt prefix     * @return the hash value     * @throws IllegalArgumentException     *             if the salt does not match the allowed pattern     * @throws RuntimeException     *             when a {@link java.security.NoSuchAlgorithmException} is caught.     */",
E,"/**     * Generates a libc6 crypt() compatible ""$5$"" hash value.     * <p>     * See {@link Crypt#crypt(String, String)} for details.     *     * @param keyBytes     *            plaintext to hash     * @param salt     *            real salt value without prefix or ""rounds=""     * @return complete hash value including salt     * @throws IllegalArgumentException     *             if the salt does not match the allowed pattern     * @throws RuntimeException     *             when a {@link java.security.NoSuchAlgorithmException} is caught.     */",
E,"/**     * Generates a libc6 crypt() compatible ""$5$"" or ""$6$"" SHA2 based hash value.     * <p>     * This is a nearly line by line conversion of the original C function. The numbered comments are from the algorithm     * description, the short C-style ones from the original C code and the ones with ""Remark"" from me.     * <p>     * See {@link Crypt#crypt(String, String)} for details.     *     * @param keyBytes     *            plaintext to hash     * @param salt     *            real salt value without prefix or ""rounds=""     * @param saltPrefix     *            either $5$ or $6$     * @param blocksize     *            a value that differs between $5$ and $6$     * @param algorithm     *            {@link MessageDigest} algorithm identifier string     * @return complete hash value including prefix and salt     * @throws IllegalArgumentException     *             if the given salt is <code>null</code> or does not match the allowed pattern     * @throws IllegalArgumentException     *",when a {@link NoSuchAlgorithmException} is caught     * @see MessageDigestAlgorithms     */
E,"/**     * Generates a libc6 crypt() compatible ""$6$"" hash value.     * <p>     * See {@link Crypt#crypt(String, String)} for details.     *     * @param keyBytes     *            plaintext to hash     * @param salt     *            real salt value without prefix or ""rounds=""     * @return complete hash value including salt     * @throws IllegalArgumentException     *             if the salt does not match the allowed pattern     * @throws RuntimeException     *             when a {@link java.security.NoSuchAlgorithmException} is caught.     */",
E,/**     * Generates a crypt(3) compatible hash using the DES algorithm.     *     * @param original     *            plaintext password     * @param salt     *            a two character string drawn from [a-zA-Z0-9./] or null for a random one     * @return a 13 character string starting with the salt string     * @throws IllegalArgumentException     *             if the salt does not match the allowed pattern     */,
E,/**     * Creates an instance of the Caverphone encoder     */,
E,"/**     * Tests if the encodings of two strings are equal.     *     * This method might be promoted to a new AbstractStringEncoder superclass.     *     * @param str1     *            First of two strings to compare     * @param str2     *            Second of two strings to compare     * @return <code>true</code> if the encodings of these strings are identical, <code>false</code> otherwise.     * @throws EncoderException     *             thrown if there is an error condition during the encoding process.     */",
E,/**     * Creates an instance of the Caverphone encoder     */,
E,/**     * Encodes the given String into a Caverphone value.     *     * @param source     *            String the source string     * @return A caverphone code for the given String     */,
E,"/**     * Tests if the caverphones of two strings are identical.     *     * @param str1     *            First of two strings to compare     * @param str2     *            Second of two strings to compare     * @return <code>true</code> if the caverphones of these strings are identical, <code>false</code> otherwise.     */",
E,"/*     * Returns whether the array contains the key, or not.     */",
E,"/**     * <p>     * Implements the <i>K&ouml;lner Phonetik</i> algorithm.     * </p>     * <p>     * In contrast to the initial description of the algorithm, this implementation does the encoding in one pass.     * </p>     *     * @param text The source text to encode     * @return the corresponding encoding according to the <i>K&ouml;lner Phonetik</i> algorithm     */",
E,/**     * Converts the string to upper case and replaces germanic characters as defined in {@link #PREPROCESS_MAP}.     */,
E,/**     * Creates a new instance with ASCII-folding enabled.     */,
E,"/**     * Creates a new instance.     * <p>     * With ASCII-folding enabled, certain accented characters will be transformed to equivalent ASCII characters, e.g.     * e -&gt; e.     * </p>     *     * @param folding     *            if ASCII-folding shall be performed before encoding     */",
E,"/**         * Creates a new branch, identical to this branch.         *         * @return a new, identical branch         */",
E,/**         * Finish this branch by appending '0's until the maximum code length has been reached.         */,
E,/**         * Process the next replacement to be added to this branch.         *         * @param replacement         *            the next replacement to append         * @param forceAppend         *            indicates if the default processing shall be overridden         */,
E,/**     * Performs a cleanup of the input string before the actual soundex transformation.     * <p>     * Removes all whitespace characters and performs ASCII folding if enabled.     * </p>     *     * @param input     *            the input string to cleanup     * @return a cleaned up string     */,
E,/**     * Perform the actual DM Soundex algorithm on the input string.     *     * @param source     *            A String object to encode     * @param branching     *            If branching shall be performed     * @return A string array containing all DM Soundex codes corresponding to the String supplied depending on the     *         selected branching mode     */,
E,/**     * Creates an instance of this DoubleMetaphone encoder     */,
E,"/**     * Encode a value with Double Metaphone, optionally using the alternate encoding.     *     * @param value String to encode     * @param alternate use alternate encode     * @return an encoded string     */",
E,"/**     * Check if the Double Metaphone values of two <code>String</code> values     * are equal, optionally using the alternate value.     *     * @param value1 The left-hand side of the encoded {@link String#equals(Object)}.     * @param value2 The right-hand side of the encoded {@link String#equals(Object)}.     * @param alternate use the alternate value if <code>true</code>.     * @return <code>true</code> if the encoded <code>String</code>s are equal;     *          <code>false</code> otherwise.     */",
E,/**     * Returns the maxCodeLen.     * @return int     */,
E,/**     * Sets the maxCodeLen.     * @param maxCodeLen The maxCodeLen to set     */,
E,"/**     * Handles 'A', 'E', 'I', 'O', 'U', and 'Y' cases.     */",
E,/**     * Handles 'C' cases.     */,
E,/**     * Handles 'CC' cases.     */,
E,/**     * Handles 'CH' cases.     */,
E,/**     * Handles 'D' cases.     */,
E,/**     * Handles 'G' cases.     */,
E,/**     * Handles 'GH' cases.     */,
E,/**     * Handles 'H' cases.     */,
E,/**     * Handles 'J' cases.     */,
E,/** True if the entry is expired. */,
E,/** True if a refresh is needed from the original data source. */,
E,"/**     * Forces this dispatcher to quit immediately. If any requests are still in the queue, they are     * not guaranteed to be processed.     */",
E,"/**         * For cacheable requests, if a request for the same cache key is already in flight, add it         * to a queue to wait for that in-flight request to finish.         *         * @return whether the request was queued. If false, we should continue issuing the request         *     over the network. If true, we should put the request on hold to be processed when the         *     in-flight request finishes.         */",
E,/** Constructs a new retry policy using the default timeouts. */,
E,/**     * Constructs a new retry policy.     *     * @param initialTimeoutMs The initial timeout for the policy.     * @param maxNumRetries The maximum number of retries.     * @param backoffMultiplier Backoff multiplier for the policy.     */,
E,/** Returns the backoff multiplier for the policy. */,
E,"/** Returns true if this policy has attempts remaining, false otherwise. */",
E,/**     * Creates a new response delivery interface.     *     * @param handler {@link Handler} to post responses on     */,
E,"/**     * Creates a new response delivery interface, mockable version for testing.     *     * @param executor For running delivery tasks     */",
E,/**     * Creates a new network dispatcher thread. You must call {@link #start()} in order to begin     * processing.     *     * @param queue Queue of incoming requests for triage     * @param network Network interface to use for performing requests     * @param cache Cache interface to use for writing responses to cache     * @param delivery Delivery interface to use for posting responses     */,
E,/**     * Creates a new network response for an OK response with no headers.     *     * @param data Response body     */,
E,"/**     * Creates a new request with the given method (one of the values from {@link Method}), URL, and     * error listener. Note that the normal response listener is not provided here as delivery of     * responses is provided by subclasses, who have a better idea of how to deliver an     * already-parsed response.     */",
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Sets the retry policy for this request.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Annotates this request with an entry retrieved for it from cache. Used for cache coherency     * support.     *     * @return This Request object to allow for chaining.     */,
E,/** Return the method for this request. Can be one of the values in {@link Method}. */,
E,/**     * Set a tag on this request. Can be used to cancel all requests with this tag by {@link     * RequestQueue#cancelAll(Object)}.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Returns this request's tag.     *     * @see Request#setTag(Object)     */,
E,/** @return A tag for use with {@link TrafficStats#setThreadStatsTag(int)} */,
E,"/** @return The hashcode of the URL's host component, or 0 if there is none. */",
E,/**     * Sets the retry policy for this request.     *     * @return This Request object to allow for chaining.     */,
E,/** Adds an event to this request's event log; for debugging. */,
E,/**     * Notifies the request queue that this request has finished (successfully or with error).     *     * <p>Also dumps all events from this request's event log; for debugging.     */,
E,/**     * Associates this request with the given queue. The request queue will be notified when this     * request has finished.     *     * @return This Request object to allow for chaining.     */,
E,/**     * Sets the sequence number of this request. Used by {@link RequestQueue}.     *     * @return This Request object to allow for chaining.     */,
E,/** Reads the contents of an InputStream into a byte[]. */,
E,/**     * Combine cache headers with network response headers for an HTTP 304 response.     *     * <p>An HTTP 304 response does not have all header fields. We have to use the header fields     * from the cache entry plus the new ones from the response. See also:     * http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5     *     * @param responseHeaders Headers from the network response.     * @param entry The cached response.     * @return The combined list of headers.     */,
E,"/** @param sizeLimit the maximum size of the pool, in bytes */",
E,"/**     * Returns a buffer from the pool if one is available in the requested size, or allocates a new     * one if a pooled one is not available.     *     * @param len the minimum size, in bytes, of the requested buffer. The returned buffer may be     *     larger.     * @return a byte[] buffer is always returned.     */",
E,"/**     * Returns a buffer to the pool, throwing away old buffers if the pool would exceed its allotted     * size.     *     * @param buf the buffer to return to the pool.     */",
E,/** Removes buffers from the pool until it is under its size limit. */,
E,"/**     * Creates a synthetic request for clearing the cache.     *     * @param cache Cache to clear     * @param callback Callback to make on the main thread once the cache is clear, or null for none     */",
E,/**     * Constructs an instance of the DiskBasedCache at the specified directory.     *     * @param rootDirectory The root directory of the cache.     * @param maxCacheSizeInBytes The maximum size of the cache in bytes.     */,
E,/**     * Constructs an instance of the DiskBasedCache at the specified directory using the default     * maximum cache size of 5MB.     *     * @param rootDirectory The root directory of the cache.     */,
E,/**     * Creates a pseudo-unique filename for the specified cache key.     *     * @param key The key to generate a file name for.     * @return A pseudo-unique filename.     */,
E,/** Returns a file object for the given cache key. */,
E,/**     * Prunes the cache to fit the amount of bytes specified.     *     * @param neededSpace The amount of bytes we are trying to fit into the cache.     */,
E,/**     * Puts the entry with the specified key into the cache.     *     * @param key The key to identify the entry by.     * @param entry The entry to cache.     */,
E,/** Removes the entry identified by 'key' from the cache. */,
E,/**         * Reads the header from a CountingInputStream and returns a CacheHeader object.         *         * @param is The InputStream to read from.         * @throws IOException if fails to read header         */,
E,/** Creates a cache entry for the specified data. */,
E,/** Writes the contents of this CacheHeader to the specified OutputStream. */,
E,/**     * Simple wrapper around {@link InputStream#read()} that throws EOFException instead of     * returning -1.     */,
E,/**     * Called before the request is executed using the underlying HttpClient.     *     * <p>Overwrite in subclasses to augment the request.     */,
E,"/**     * Extracts a {@link Cache.Entry} from a {@link NetworkResponse}.     *     * @param response The network response to parse headers from     * @return a cache entry for the given response, or null if the response is not cacheable.     */",
E,"/** Parse date in RFC1123 format, and return its value as epoch */",
E,/** Format an epoch date in RFC1123 format. */,
E,"/**     * Returns the charset specified in the Content-Type of this header, or the HTTP default     * (ISO-8859-1) if none can be found.     */",
E,/**     * Construct a new HttpResponse for an empty response body.     *     * @param statusCode the HTTP status code of the response     * @param headers the response headers     */,
E,/** Returns the HTTP status code of the response. */,
E,"/**     * Load the url into the webview.     *     * @param url     * @param propsProperties that can be passed in to the Cordova activity (i.e. loadingDialog, wait, ...)     * @throws JSONException     */",
E,/**     * Clear page history for the app.     */,
E,/**     * Go to previous page displayed.     * This is the same as pressing the backbutton on Android device.     */,
E,"/**     * Override the default behavior of the Android back button.     * If overridden, when the back button is pressed, the ""backKeyDown"" JavaScript event will be fired.     *     * @param overrideT=override, F=cancel override     */",
E,"/**     * Override the default behavior of the Android volume buttons.     * If overridden, when the volume button is pressed, the ""volume[up|down]button"" JavaScript event will be fired.     *     * @param button        volumeup, volumedown     * @param override      T=override, F=cancel override     */",
E,/**     * Return whether the Android back button is overridden by the user.     *     * @return boolean     */,
E,/**     * Exit the Android application.     */,
E,"/**     * Listen for telephony events: RINGING, OFFHOOK and IDLE     * Send these events to all plugins using     *      CordovaActivity.onMessage(""telephone"", ""ringing"" | ""offhook"" | ""idle"")     */",
E,/*     * Unregister the receiver     *     */,
E,/**     * Set the current log level.     *     * @param logLevel     */,
E,/**     * Determine if log level will be logged     *     * @param logLevel     * @return true if the parameter passed in is greater than or equal to the current log level     */,
E,/**     * Verbose log message with printf formatting.     *     * @param tag     * @param s     * @param args     */,
E,/**     * Debug log message with printf formatting.     *     * @param tag     * @param s     * @param args     */,
E,/**     * Info log message with printf formatting.     *     * @param tag     * @param s     * @param args     */,
E,/**     * Warning log message with printf formatting.     *     * @param tag     * @param s     * @param args     */,
E,/**     * Error log message with printf formatting.     *     * @param tag     * @param s     * @param args     */,
E,/**     * Changes the bridge mode.     */,
E,"/**     * Combines and returns queued messages combined into a single string.     * Combines as many messages as possible, while staying under MAX_PAYLOAD_SIZE.     * Returns null if the queue is empty.     */",
E,"/**     * Same as popAndEncode(), except encodes in a form that can be executed as JS.     */",
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Add a JavaScript statement to the list.     */,
E,/**     * Constructs with a CordovaPlugin already instantiated.     */,
E,/**     * @param service               The name of the service     * @param pluginClass           The plugin class name     * @param onload                Create plugin object when HTML page is loaded     */,
E,/**     * Init when loading a new HTML page into webview.     */,
E,/**     * Create plugins objects that have onload set.     */,
E,"/**     * Receives a request for execution and fulfills it by finding the appropriate     * Java class and calling it's execute method.     *     * PluginManager.exec can be used either synchronously or async. In either case, a JSON encoded     * string is returned that will indicate if any errors have occurred when trying to find     * or execute the class denoted by the clazz argument.     *     * @param service       String containing the service to run     * @param action        String containing the action that the class is supposed to perform. This is     *                      passed to the plugin execute method and it is up to the plugin developer     *                      how to deal with it.     * @param callbackId    String containing the id of the callback that is execute in JavaScript if     *                      this is an async plugin call.     * @param rawArgs       An Array literal string containing any arguments needed in the     *                      plugin execut",e method.     */
E,"/**     * Get the plugin object that implements the service.     * If the plugin object does not already exist, then create it.     * If the service doesn't exist, then return null.     *     * @param service       The name of the service.     * @return              CordovaPlugin or null     */",
E,/**     * Add a plugin class that implements a service to the service entry table.     * This does not create the plugin object instance.     *     * @param entry             The plugin entry     */,
E,/**     * Called when the system is about to start resuming a previous activity.     *     * @param multitasking      Flag indicating if multitasking is turned on for app     */,
E,"/**     * Called when the system received an HTTP authentication request. Plugins can use     * the supplied HttpAuthHandler to process this auth challenge.     *     * @param view              The WebView that is initiating the callback     * @param handler           The HttpAuthHandler used to set the WebView's response     * @param host              The host requiring authentication     * @param realm             The realm for which authentication is required     *      * @return                  Returns True if there is a plugin which will resolve this auth challenge, otherwise False     *      */",
E,"/**     * Called when he system received an SSL client certificate request.  Plugin can use     * the supplied ClientCertRequest to process this certificate challenge.     *     * @param view              The WebView that is initiating the callback     * @param request           The client certificate request     *     * @return                  Returns True if plugin will resolve this auth challenge, otherwise False     *     */",
E,/**     * Called when the activity will start interacting with the user.     *     * @param multitasking      Flag indicating if multitasking is turned on for app     */,
E,/**     * Called when the activity is becoming visible to the user.     */,
E,/**     * Called when the activity is no longer visible to the user.     */,
E,/**     * The final call you receive before your activity is destroyed.     */,
E,/**     * Send a message to all plugins.     *     * @param id                The message id     * @param data              The message data     * @return                  Object to stop propagation or null     */,
E,/**     * Called when the activity receives a new intent.     */,
E,"/**     * Called when the webview is going to request an external resource.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the resource to load,     *                  false to block the resource.     */",
E,"/**     * Called when the webview is going to change the URL of the loaded content.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the navigation,     *                  false to block the navigation.     */",
E,/**     * Called when the webview is requesting the exec() bridge be enabled.     */,
E,"/**     * Called when the webview is going not going to navigate, but may launch     * an Intent for an URL.     *     * This delegates to the installed plugins, and returns true/false for the     * first plugin to provide a non-null result.  If no plugins respond, then     * the default policy is applied.     *     * @param url       The URL that is being requested.     * @return          Returns true to allow the URL to launch an intent,     *                  false to block the intent.     */",
E,"/**     * Called when the URL of the webview changes.     *     * @param url               The URL that is being changed to.     * @return                  Return false to allow the URL to load, return true to prevent the URL from loading.     */",
E,/**     * Called when the app navigates or refreshes.     */,
E,/**     * Create a plugin based on class name.     */,
E,/**     * Called by the system when the device configuration changes while your activity is running.     *     * @param newConfigThe new device configuration     */,
E,"/**     * If messageType == MESSAGE_TYPE_STRING, then returns the message string.     * Otherwise, returns null.     */",
E,"/* Match patterns (from http://developer.chrome.com/extensions/match_patterns.html)     *     * <url-pattern> := <scheme>://<host><path>     * <scheme> := '*' | 'http' | 'https' | 'file' | 'ftp' | 'chrome-extension'     * <host> := '*' | '*.' <any char except '/' and '*'>+     * <path> := '/' <any chars>     *     * We extend this to explicitly allow a port attached to the host, and we allow     * the scheme to be omitted for backwards compatibility. (Also host is not required     * to begin with a ""*"" or ""*."".)     */",
E,/**     * Determine if URL is in approved list of URLs to load.     *     * @param uri     * @return true if wide open or whitelisted     */,
E,/**     * Instructs the client to show a prompt to ask the user to set the Geolocation permission state for the specified origin.     *     * @param origin     * @param callback     */,
E,/**     * Ask the host application for a custom progress view to show while     * a <video> is loading.     * @return View The progress view.     */,
E,/**     * Sets the authentication token.     *     * @param authenticationToken     * @param host     * @param realm     */,
E,/**     * Removes the authentication token.     *     * @param host     * @param realm     *     * @return the authentication token or null if did not exist     */,
E,"/**     * Gets the authentication token.     *     * In order it tries:     * 1- host + realm     * 2- host     * 3- realm     * 4- no host, no realm     *     * @param host     * @param realm     *     * @return the authentication token     */",
E,/**     * Clear all authentication tokens.     */,
E,/** Used when created via reflection. */,
E,/** * Create the frame. */,
E,/** * Launch the application. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,"/** * sets Instant Gi Engine * @param samples Detail, the higher the slower and smoother * @param sets ? * @param c ? * @param bias_samples ? */",
E,"/** * sets Irradiance Cache GI Engine * @param samples Detail, the higher the slower and smoother * @param tolerance ? * @param minSpacing ? * @param maxSpacing ?  * @param globalphotonmap ? */",
E,"/** * sets path tracing gi engine * @param samples Detail, the higher the slower and smoother */",
E,"/** * Sets color Space, default is COLORSPACE_SRGB_NONLINEAR * @param theColorSpace either COLORSPACE_SRGB_NONLINEAR, COLORSPACE_SRGB_LINEAR, or COLORSPACE_XYZ */",
E,/** * sets bucket order * @param newBucketOrder bucket order type */,
E,/** * returns bucket order type * @return String */,
E,/** * remove sunflow object. function checks if object is existing first * @param name */,
E,/* * remove sunflow shader. function checks if object ist existing first * @param name */,
E,/* * remove sunflow modifier. function checks if object ist existing first * @param name */,
E,/** * getter for x * @return x */,
E,/** * getter for y * @return y */,
E,/** * setter with coordinates using ints * @param x x * @param y y */,
E,/** * get a new vertex * @return named vertex */,
E,/** * default constructor *  * @param origin origin * @param target target * @param edge edge */,
E,/** * constructor *  * @param origin origin vertex * @param target target vertex * @param weight weight */,
E,/** * constructor *  * @param origin origin vertex * @param target target vertex */,
E,/** * v1 getter * @return v1 */,
E,/** * v1 setter * @param v1 v1 */,
E,/** * v2 getter * @return v2 */,
E,/** * v2 setter * @param v2 v2 */,
E,/** * weight getter * @return weight */,
E,/** * weight setter * @param weight weight */,
E,/** * color getter * @return color */,
E,/** * color setter * @param color color */,
E,/** * reset to a neutral state */,
E,/** * string representation */,
E,"/** * compare edge to edge * from Comparable, to allow sorting edges by weight */",
E,/** * add edge to forest *  * @param e edge to be added */,
E,/** * remove a tree from the forest *  * @param t tree */,
E,/** * merge two trees into one *  * @param t1 first tree * @param t2 second tree */,
E,/** Add a new element at the end of this list */,
E,/** Return true if this list contains no elements */,
E,/** Return the number of elements in this list */,
E,/** Remove the first occurrence of the element o from this list.   *  Shift any subsequent elements to the left.   *  Return true if the element is removed. */,
E,/** Create a default list */,
E,/** Create a list from an array of objects */,
E,/** Return the head element in the list */,
E,/** Return the last element in the list */,
E,/** Add an element to the beginning of the list */,
E,/** Add an element to the end of the list */,
E,/** Add a new element at the specified index in this list     * The index of the head element is 0 */,
E,/** Remove the head node and     *  return the object that is contained in the removed node. */,
E,/** Remove the last node and     * return the object that is contained in the removed node. */,
E,/** Remove the element at the specified position in this list.     *  Return the element that was removed from the list. */,
E,/** Override toString() to return elements in the list */,
E,/** Clear the list */,
E,"/** Returns true if this linked list contains the element e, otherwise returns false     * @return .*/",
E,"/** Returns the element at specified index of this list, returns null if index is invalid. */",
E,"/** Returns the index of the first matching element in this linked list, return !-1 if no match. */",
E,"/** Returns the index of the last matching element in this list, returns !-1 if no match. */",
E,"/** Replaces the element at specified index in this linked list with the specified element.  Returns the old element at specified index, otherwise returns null if index is invalid. */",
E,/** Main method - DO NOT CHANGE THIS CODE!!!! */,
E,"/* Bao Xiang Bian Hao , Shi Jian Chuo , HashZhi , Shang Yi Ge Bao Xiang De HashZhi , Shen Mi Shu Zi Bao Xiang Shu Xing Shuo Ming :Bao Xiang Bian Hao :Cong 1Dao 10;HashZhi :Jiang Bao Xiang Bian Hao , Shang Yi Ge Bao Xiang De HashZhi , Shen Mi Shu Zi Pin Cheng Yi Ge Zi Fu Chuan ,Ran Hou Qiu Zi Fu Chuan De HashZhi ,HashTong Yi Cai Yong sha256Suan Fa ;Shang Yi Ge Bao Xiang De HashZhi :Shang Yi Ge Xu Hao De Bao Xiang De HashZhi ,1Hao Bao Xiang De Shang Yi Ge Bao Xiang De HashZhi Shi 0;Shen Mi Shu Zi :Ke Yi Da Kai Bao Xiang De Shen Mi Shu Zi ,Shi Yi Ge Zheng Zheng Shu ;Bao Xiang Kai Qi Gui Ze :Zhao Dao Na Ge Shen Mi Shu Zi ,Shi De Bao Xiang De HashZhi De Qian 5Wei Du Shi Shu Zi 0,Bao Xiang Ji Wei Kai Qi Zhuang Tai */",
E,"/* Bao Xiang Bian Hao , Shi Jian Chuo , HashZhi , Shang Yi Ge Bao Xiang De HashZhi , Shen Mi Shu Zi Bao Xiang Shu Xing Shuo Ming :Bao Xiang Bian Hao :Cong 1Dao 10;HashZhi :Jiang Bao Xiang Bian Hao , Shang Yi Ge Bao Xiang De HashZhi , Shen Mi Shu Zi Pin Cheng Yi Ge Zi Fu Chuan ,Ran Hou Qiu Zi Fu Chuan De HashZhi ,HashTong Yi Cai Yong sha256Suan Fa ;Shang Yi Ge Bao Xiang De HashZhi :Shang Yi Ge Xu Hao De Bao Xiang De HashZhi ,1Hao Bao Xiang De Shang Yi Ge Bao Xiang De HashZhi Shi 0;Shen Mi Shu Zi :Ke Yi Da Kai Bao Xiang De Shen Mi Shu Zi ,Shi Yi Ge Zheng Zheng Shu ;Bao Xiang Kai Qi Gui Ze :Zhao Dao Na Ge Shen Mi Shu Zi ,Shi De Bao Xiang De HashZhi De Qian 5Wei Du Shi Shu Zi 0,Bao Xiang Ji Wei Kai Qi Zhuang Tai */",
E,"/* Bao Xiang Bian Hao , Shi Jian Chuo , HashZhi , Shang Yi Ge Bao Xiang De HashZhi , Shen Mi Shu Zi Bao Xiang Shu Xing Shuo Ming :Bao Xiang Bian Hao :Cong 1Dao 10;HashZhi :Jiang Bao Xiang Bian Hao , Shang Yi Ge Bao Xiang De HashZhi , Shen Mi Shu Zi Pin Cheng Yi Ge Zi Fu Chuan ,Ran Hou Qiu Zi Fu Chuan De HashZhi ,HashTong Yi Cai Yong sha256Suan Fa ;Shang Yi Ge Bao Xiang De HashZhi :Shang Yi Ge Xu Hao De Bao Xiang De HashZhi ,1Hao Bao Xiang De Shang Yi Ge Bao Xiang De HashZhi Shi 0;Shen Mi Shu Zi :Ke Yi Da Kai Bao Xiang De Shen Mi Shu Zi ,Shi Yi Ge Zheng Zheng Shu ;Bao Xiang Kai Qi Gui Ze :Zhao Dao Na Ge Shen Mi Shu Zi ,Shi De Bao Xiang De HashZhi De Qian 5Wei Du Shi Shu Zi 0,Bao Xiang Ji Wei Kai Qi Zhuang Tai */",
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the DisRule wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Australia wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOver wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameWon wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Life wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Message wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Quit wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Rules wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the StartGame wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Story wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the Timer wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,/**     * Act - do whatever the GameOverScreen wants to do. This method is called whenever     * the 'Act' or 'Run' button gets pressed in the environment.     */,
E,"/*if (isWinner) {playercnt = 0;return pirateResource.delete();}else{JSONObject response = new JSONObject();response.put(""Error"", ""GameRoom is running with 5 active players."");return new JsonRepresentation(response);}*/",
E,"/*if (isWinner) {playercnt = 0;return pirateResource.delete();}else{JSONObject response = new JSONObject();response.put(""Error"", ""GameRoom is running with 5 active players."");return new JsonRepresentation(response);}*/",
E,"/*if (isWinner) {playercnt = 0;return pirateResource.delete();}else{JSONObject response = new JSONObject();response.put(""Error"", ""GameRoom is running with 5 active players."");return new JsonRepresentation(response);}*/",
E,"/*if (isWinner) {playercnt = 0;return pirateResource.delete();}else{JSONObject response = new JSONObject();response.put(""Error"", ""GameRoom is running with 5 active players."");return new JsonRepresentation(response);}*/",
E,/**   * Observes the value of any new tiles that was formed   *   * @return   */,
E,"/**   * Places a single 2 or 4 Tile   * P(x = 2) = 90%, P(x = 4) = 10%   *   * @param   */",
E,"/**   * Places a single 2 or 4 Tile   * P(x = 2) = 90%, P(x = 4) = 10%   *   * @param   */",
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,"/**   * Because reading from standard in is blocking, the command line interfaces are not used when JavaFX is used.   */",
E,/**   * Draws Tiles in a square arrangement   */,
E,/**   * Draws Tiles in a square arrangement   */,
E,/**   * Relies on the fact that the rectangle is square   */,
E,/**   * Relies on the fact that the rectangle is square   */,
E,/*    KezListener Interface    */,
E,/** * Create the frame. */,
E,/** * method that returns the URL passed into this download frame * @return */,
E,/** * returns instance of this download frame * @return */,
E,/** * sets the text of filesize label * @param fs */,
E,"/** * Method that updates the status of download. Sets text and values for: * frame title, 2labels, progressbar * @param p * @param s * @param t */",
E,/** * Commences download of media file */,
E,/** * disposes this frame after download finishes */,
E,/** * Create the frame. */,
E,/** * Create the frame. */,
E,/** * converts the text(in format 00:00:00) inside the textfield given as parameter into seconds  * and returns it * @param field * @return */,
E,/** * Create the frame. */,
E,/** * create the frame * @param mediaPath * @param currentVideo */,
E,/** * Create the frame. */,
E,/** * method to set up the process save file * @param saveDir */,
E,/** * method to retrieve music file path and media length time for overlay/ replace process * @param musicPath * @param time */,
E,/** * return singleton object of this panel */,
E,/** * function which saves editing session by updating log files. * @param text * @param musicPath * @param imagePath * @param fontCombo * @param sizeCombo * @param colourCombo * @throws IOException */,
E,/** * function which saves editing session by updating log files. * @param text1 * @param timeCombo1 * @param fontCombo1 * @param sizeCombo1 * @param colourCombo1 * @param text2 * @param timeCombo2 * @param fontCombo2 * @param sizeCombo2 * @param colourCombo2 * @throws IOException */,
E,/** * function which saves editing session by updating log files. * @param text1 * @param fontCombo1 * @param sizeCombo1 * @param colourCombo1 * @param startTime * @param finishTime * @throws IOException */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return musicpath */,
E,/** * this method should read the log file and return imagePath */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should return the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should return text for the logfile */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the the text of the log file */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return appropriate index for JCombobox */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/** * this method should read the log file and return time in xx:xx:xx format */,
E,/** * //method that deletes relative textlogs if they exist. * @throws IOException */,
E,/** * //method that deletes relative textlogs if they exist. * @throws IOException */,
E,/** * //method that deletes relative textlogs if they exist. * @throws IOException */,
E,/**     * Convert an object to JSON byte array.     *     * @param object the object to convert.     * @return the JSON byte array.     * @throws IOException     */,
E,/**     * Create a byte array with a specific size filled with specified data.     *     * @param size the size of the byte array.     * @param data the data to put in the byte array.     * @return the JSON byte array.     */,
E,/**     * Creates a matcher that matches when the examined string represents the same instant as the reference datetime.     *     * @param date the reference datetime against which the examined string is checked.     */,
E,/**     * Verifies the equals/hashcode contract on the domain object.     */,
E,"/**     * Create a {@link FormattingConversionService} which use ISO date format, instead of the localized one.     * @return the {@link FormattingConversionService}.     */",
E,/**     * Makes a an executes a query to the EntityManager finding all stored objects.     * @param <T> The type of objects to be searched     * @param em The instance of the EntityManager     * @param clss The class type to be searched     * @return A list of all found objects     */,
E,"/**     * Create a User.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which has a required relationship to the User entity.     */",
E,"/**     * Create an entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,"/**     * Create an updated entity for this test.     *     * This is a static method, as tests for other entities might also need it,     * if they test an entity which requires the current entity.     */",
E,/**    * Constructor for instantiating a new graph class. The coordinates are used    * for the graph to decide the range of x and y to display so the user should    * always choose tightest bounds with a small boarder to make the graph    * display the most amount of information.    *     * @param graphName    *           the name of the graph    * @param minX    *           the minimum coordinate for the x-axis    * @param maxX    *           the maximum coordinate for the x-axis    * @param minY    *           the minimum coordinate for the y-axis    * @param maxY    *           the maximum coordinate for the y-axis    * @param xScale    *           the amount to increment in the x-axis before drawing a grid line    *           and displaying a x value on the axis    * @param yScale    *           the amount to increment in the y-axis before drawing a grid line    *           and displaying the y value on the axis    */,
E,"/**    * Users can call this method to add new points to the plot for this graph.    * Once a point is added, it cannot be removed from the graph. The graph    * class uses lazy evaluation for all plotting functions so nothing will show    * up until a showGraph() method is called.    *     * @param newPoints    *           the array of new points to add to the graph    */",
E,/**    * Adds a new linear line to the graph. The graph expects the line to be in    * the form of y = mx + b where m corresponds to the slope and b corresponds    * to the y-intercept of the line. The graph class uses lazy evaluation for    * all plotting functions so nothing will show up until a showGraph() method    * is called.    *     * @param slope    *           the slope of the line    * @param yIntercept    *           the y-intercept of the line    */,
E,/**    * this methods shows the graph with all of the current points and lines that    * the user added.    */,
E,/**    * this method reads all the data files for the bird names listed in the enum    * Birds and generates a corresponding processed file named:    * [birdName]_out.txt    */,
E,"/* Constructor: creates new node containing datum d, * with previous node p and next node n */",
E,/** Constructor: an empty heap with capacity 10. <br> * It is a max-heap if isMax is true and a min-heap if isMax is false. */,
E,/** Add v with priority p to the heap. <br> * Throw an illegalArgumentException if v is already in the heap. <br> * The expected time is logarithmic and <br> * the worst-case time is linear in the size of the heap. */,
E,"/** If size = length of d, double the length of array d. <br> * The worst-case time is proportional to the length of d. */",
E,/** Return the size of this heap. <br> * This operation takes constant time. */,
E,"/** Swap b[h] and b[k]. <br> * Precondition: 0 <= h < heap-size, 0 <= k < heap-size. */",
E,"/** If b[h] should be above b[h] in the heap, return 1. <br> * If b[h]'s priority and b[k]'s priority are the same, return 0. <br> * If b[h] should be below b[k] in the heap, return -1. <br> * This is based on what kind of a heap this is, <br> * ... E.g. a min-heap, the value with the smallest priority is in the root. <br> * ... E.g. a max-heap, the value with the largest priority is in the root. */",
E,"/** If h >= size, return.<br> * Otherwise, bubble b[h] up the heap to its right place. <br> * Precondition: 0 <= h and, if h < size, <br> * ... the class invariant is true, except perhaps that <br> * ... b[h] belongs above its parent (if h > 0) in the heap. */",
E,"/** If this is a min-heap, return the heap value with lowest priority. <br> * If this is a max-heap, return the heap value with highest priority.<br> * Do not change the heap. <br> * This operation takes constant time. <br> * Throw a NoSuchElementException if the heap is empty. */",
E,"/** If h < 0 or size <= h, return.<br> * Otherwise, Bubble b[h] down in heap until the class invariant is true. <br> * If there is a choice to bubble down to both the left and right children <br> * (because their priorities are equal), choose the left child. <br> * * Precondition: If 0 <= h < size, the class invariant is true except that <br> * perhaps b[h] belongs below one or both of its children. */",
E,"/** If this is a min-heap, remove and return heap value with lowest priority. <br> * If this is a max-heap, remove and return heap value with highest priority. <br> * Expected time: logarithmic. Worst-case time: linear in the size of the heap.<br> * Throw a NoSuchElementException if the heap is empty. */",
E,/** Change the priority of value v to p. <br> * Expected time: logarithmic. Worst-case time: linear in the size of the heap.<br> * Throw an IllegalArgumentException if v is not in the heap. */,
E,"/** Return the heap values (only, not the priorities) in form [5, 3, 2]. */",
E,"/** Return the heap priorities in form [5.0, 3.0, 2.0]. */",
E,"/** Return the shortest path from node v to node end <br>     * ---or the empty list if a path does not exist. <br>     * Note: The empty list is NOT ""null""; it is a list with 0 elements. */",
E,/** Return the path from the start node to node end.<br>     * Precondition: SFdata contains all the necessary information about<br>     * ............. the path. */,
E,"/** Return the sum of the weights of the edges on path pa. <br>     * Precondition: pa contains at least 1 node. <br>     * If 1 node, it's a path of length 0, i.e. with no edges. */",
E,/** Return the direction. */,
E,/** Return a new point that is this point with p added to it. */,
E,"/** Return a new random cavern with random gold and edge weights. <br> * It is guaranteed that ({@code currentRow}, {@code currentCol}) will be an open floor cell. * * @param rows       The number of rows in this cavern. * @param cols       The number of columns in this cavern. * @param currentRow The row of the cell that must be open floor. * @param currentCol The column of the cell that must be open floor. * @param rand       A source of randomness to use for the cavern generation. */",
E,/** Return the minimum allowable path distance from the entrance to the orb. */,
E,/** Return a randomly determined gold value for a given tile. */,
E,"/** Given tiles t without edges and a supplier to return edge weights, <br> * add edges to the nodes between adjacent non-wall tiles. <br> * Precondition: all elements of {@code tiles} are non-null. */",
E,/** Return true iff p is on the grid. */,
E,/** Generate a new random graph that fits within the grid and return the set of nodes. */,
E,"/** Return a randomly chosen entrance to the cavern (the only non-wall tile along an edge of the * grid), using rand. */",
E,/** Return the number of open floor tiles in this cavern <br> * (this is the size of the graph). */,
E,/** Return the number of rows in the grid. */,
E,/** Return the number of columns in the grid. */,
E,/** Return the set of all nodes in the graph. <br> * This is an umodifiable view of the graph. */,
E,/** Return the node corresponding to the entrance to the cavern. */,
E,/** Return the target node in this cavern. */,
E,"/** Return the Tile information for tile (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,"/** Return the node at the given (r, c). <br> * Precondition: (r, c) must be in the grid. */",
E,/** Package-private implementation of Dijkstra's algorithm that <br> * returns only the minimum distance between the given node and the <br> * target node for this cavern (no path). <br> * Precondition: start must be a node in the graph of this cavern. */,
E,/** Serialize this cavern to a list of strings which can be written out to a file. <br> * The list of strings can be converted back into a Cavern using deserialize(). */,
E,"/** Convert nodeStrList, which was output by serialize(), back into a Cavern.<br> * Precondition: The list of strings is of the format output by serialize(). */",
E,/** Constructor: an edge from src to dest with length len. */,
E,/** Constructor: an edge that is isomporphic to isomorphism. */,
E,/** Return the Node on this edge that is not equal to n. <br> * Throw an IllegalArgumentException if n is not in this Edge. */,
E,/** Return the length of this Edge */,
E,/** Return the source of this edge. */,
E,/** Return destination of edge */,
E,"/** Run through the game, one step at a time. <br>     * Will run scram() only if hunt() succeeds.<br>     * Will fail in case of timeout. */",
E,"/** Run through the game, one step at a time. <br>     * Will run scram() only if hunt() succeeds. <br>     * Does not use a timeout and will wait as long as necessary. */",
E,/** Run only the hunt mode. Uses timeout. */,
E,/** Run only the scram mode. Uses timeout. */,
E,/** Wraps a call to hunt() with the timeout functionality. */,
E,/** Wrap a call to scram() with the timeout functionality. */,
E,"/** Making sure the hunter always has the minimum steps needed to scram, <br>     * add a factor of extra steps proportional to the size of the cavern. */",
E,"/** Compare the hunter's performance on the hunt() stage to the <br>     * theoretical minimum, compute their bonus factor on a call from MIN_BONUS to MAX_BONUS. <br>     * Bonus should be minimum if take longer than NO_BONUS_LENGTH times optimal. */",
E,"/** Return the Manhattan distance from (row, col) to the target */",
E,"/** Given seed, whether or not to use the GUI, and an instance <br>     * of a solution to use, run the game. */",
E,/** Run program in headless mode. args are explained elsewhere. */,
E,/** Constructor: an empty heap. */,
E,/** Return the number of elements in the priority queue.<br> * This operation takes constant time. */,
E,/** Add e with priority p to the priority queue.<br> * Throw an illegalArgumentException if e is already in the queue.<br> * The expected time is O(log N) and the worst-case time is O(N). */,
N,/**         * Diese Methode fugt ein neues Objekt zum Zeichnen hinzu. Die         * Klasse des Objekts muss mindestens das Interface DrawableObject implementieren.         * @param d Das ab sofort zu zeichnende Objekt         */,
N,/**         * Diese Methode entfernt ein Objekt aus der Menge der zu zeichnenden Objekte. Die         * Klasse des Objekts muss mindestens das Interface DrawableObject implementieren.         * @param d Das ab sofort nicht mehr zu zeichnende Objekt         */,
N,/**         * Unbenutzt bis auf Weiteres         */,
N,/**         * Weitergabe an Zeichnungsobjekte.         */,
N,/**         * Weitergabe an Zeichnungsobjekte.         */,
N,/**         * Unbenutzt bis auf Weiteres         */,
N,"/** * Busca los objetos estaciones correspondientes al origen y destino, y * llama al algoritmo para encontrar el camino *  * @param origin * @param destination */",
N,"/** * Busca los objetos estaciones correspondientes al origen y destino, y * llama al algoritmo para encontrar el camino *  * @param origin * @param destination */",
N,"/** * Limpia todas las estaciones de los posibles g, h, f y caminos registrados */",
N,/** * Anade listener *  * @param ecouteur */,
N,"/** * Lee el fichero, y rellena distances y stations */",
N,/** * Gen Ju Jiao Gong Hao Cha Zhao  * @param tno * @return */,
N,/** * Cha Ru  * @param tea */,
N,/** * Shan Chu  * @param tno */,
N,/** * Huo Qu Zhan De Zui Da Rong Liang   */,
N,/** * Huo Qu Zhan De Dang Qian Rong Liang  */,
N,/** * Huo Qu Zhan Zhong De Zui Xiao Zhi  * @return Fan Hui Zhan Zhong Zui Xiao Zhi  */,
N,/**     * Huo Qu Di Zhi      * @param key     * @return     */,
N,"/**     * Er Fen Sou Suo Fa ,TBi Xu Zhong Xie equalsFang Fa      * @param a(Cong Shu Zu  a 0-nWei Zhi Cha Xun Yuan Su x)     * @param x     * @return     */",
N,/**     * He Bing Pai Xu      * @param a     */,
N,/**     * He Bing Pai Xu Hao De Liang Ge Xiang Lin De Shu Zu Duan      * @param x     * @param y     * @param s     */,
N,/**     * Jiang Shu Zu c l:m m+1:rHe Bing Dao Shu Zu dZhong      * @param c     * @param d     * @param l     * @param m     * @param r     */,
N,/**     * Kuai Su Pai Xu      * @param a     * @param p     * @param r     */,
N,/**     * Mei Zhi Xing Yi Ci Du Que Ding Yi Ge Yuan Su De Wei Zhi      * @param a     * @param p     * @param r     * @return     */,
N,/**     * Sui Ji Chan Sheng Ji Zhun Wei Zhi      * @param a     * @param p     * @param r     * @return     */,
N,/**     * She Zhi You Jian Ge Shi      * @param typeEnum     * @return     */,
N,/**     * She Zhi Qing Qiu Mu Biao You Jian Di Zhi      * @param targets     * @return     */,
N,/**     * Zhi Xing Fa Song You Jian      * @throws Exception Ru Guo Fa Song Shi Bai Hui Pao Chu Yi Chang Xin Xi      */,
N,"/**     * Gou Zao Han Shu Shi Li Hua Bu Fen Dui Xiang ,Huo Qu Wen Jian Zi Yuan Dui Xiang      *     * @param fileName     */",
N,/**     * Gen Ju Chuan Ru De keyHuo Qu Dui Xiang De Zhi  2016Nian 12Yue 17Ri  Shang Wu 10:19:55 getValue     *     * @param key propertiesWen Jian Dui Ying De key     * @return String Jie Xi Hou De Dui Ying keyDe Zhi      */,
N,/**     * Huo Qu propertiesWen Jian Nei De Suo You keyZhi <br>     * 2016Nian 12Yue 17Ri  Shang Wu 10:21:20 getKeys     *     * @return     */,
N,/**     * Ce Shi Chuang Jian Lu Jing      * @throws InterruptedException     */,
N,/**     * Ce Shi Chuang Jian Lu Jing      * @throws InterruptedException     */,
N,/**     * laver en tom linkedlist og gemmer informationen fra Orderline i vores OrderLineList     * @return OrderLineList     */,
N,/**     * laver en tom linkedlist og gemmer informationen fra Orderline i vores OrderLineList     * @return OrderLineList     */,
N,/**     * laver en ProductContainer hvis der ikke er en og returnerer      * den nye eller den ekstisterende      */,
N,/**     * finder et produkt ved hjaelp af barcode or returnerer den     * @param int barcode      * @return Product      */,
N,/**     * tjekker om varen er unik og returnerer en boolean      * @param int barcode     * @return boolean      */,
N,/**     * fjerner et uniqueItem fra et produkt og returnerer det     * @param barcoden pa et produkt og og et serienummer pa et item       * @return et item objekt     */,
N,/**     * traekker amount fra et massProduct og returnerer massProduktet      * @param barcoden pa et produkt og maengden af det onskede produkt      * @return et massproduct objekt      */,
N,/**     * henter prisen fra et item baseret pa barcode      * @param et produkt barcode     * @return price fra et produkt      */,
N,/**     * Constructor til objekter af class SimpleLine     */,
N,/**     * laver en SupplierContainer hvis der ikke er en og returnerer      * den nye eller den ekstisterende      */,
N,/**     * tilfojer en supplier til suppliers hashmap     * @param Supplier supplier     */,
N,/**     * constructor til objekter af class UniqueLine     */,
N,/**     * constructor til objekter af class UniqueProduct     */,
N,/**     * Tager et item objekt og tilfojer det til vores UniqueProduct hashmap     */,
N,/**     * Xin Xi Bao Cun Dao Huan Cun Zhong      * @param entity     */,
N,/**     * Create the test case     *     * @param testName name of the test case     */,
N,/**     * @return the suite of tests being tested     */,
N,/**     * Huo Qu Ye Mian Nei Rong      * @param loadUrl     * @return     */,
N,/**     * Huo Qu Chao Lian Jie Xin Xi      * @param str     * @return     */,
N,/**     * Gou Zao Han Shu (Zhi Jie  new Diao Yong Ci Gou Zao Han Shu )     *     * @param context     */,
N,/**     * Gou Zao Han Shu  (Jia Zai Bu Ju Wen Jian De Shi Hou Diao Yong  XML)     *     * @param context     * @param attrs     */,
N,/**     * Gou Zao Han Shu  (Ding Yi Zhu Ti Wen Jian Shi Xu Yao )     *     * @param context     * @param attrs     * @param defStyleAttr     */,
N,/**     * Gou Zao Han Shu      *     * @param context     */,
N,/**     * Gou Zao Han Shu      */,
N,/**     * Shuang Zhong Jian Ce Ji Zhi (Lan Yi Mo Shi )     *     * @return     */,
N,/**     * Jing Tai Nei Bu Lei Shi Xian Fan Hui Dan Li      *     * @return     */,
N,/**     * Tian Jia Qing Qiu Dao Dui Lie      *     * @param request     * @param <T>     */,
N,/**     * Huo Qu Dui Lie      *     * @return     */,
N,/**     * Qu Xiao Qing Qiu      *     * @param tag     */,
N,/**     * Tian Jia Yi Tiao Li Shi Ji Lu      * @param item     */,
N,/**     * Chu Shi Hua Shi Tu      */,
N,/**     * Li Yong Guan Jian Zi Sou Suo Wang Luo Shu Ju      * @param keyword     */,
N,/**     * She Zhi Shi Fou      * @param isHide     */,
N,/** * este metodo configura o caminho para abrir o arquivo Excel  * @param Path * @param SheetName - nome da pasta * @throws Exception */,
N,"/** * Este metodo le os dados de teste de uma celula do Excel passando como parametro * linha x coluna, retorna o conteudo da celula como um String * @param RowNum - linha * @param ColNum - coluna * @return - conteudo da celula * @throws Exception */",
N,/** * Este metodo escreve na celula do Excel passando linha X coluna * @param Result * @param RowNum * @param ColNum * @throws Exception */,
N,/** * este metodo configura o caminho para abrir o arquivo Excel  * @param Path * @param SheetName - nome da pasta * @throws Exception */,
N,/**     * This function is run when the robot is first started up and should be     * used for any initialization code.     */,
N,"/**     * Cha Zhao Yi Ge Yong Hu Dui Xiang ,Gen Ju Yong Hu Ming      * @param username Yong Hu Ming      * @return Cha Zhao Dao De Yong Hu Dui Xiang      */",
N,"/**     * Cha Zhao Yi Ge Yong Hu Dui Xiang ,Gen Ju Yong Hu Ming      * @param username Yong Hu Ming      * @return Cha Zhao Dao De Yong Hu Dui Xiang      */",
N,"/**     * Cha Zhao Yi Ge Yong Hu Dui Xiang ,Gen Ju Yong Hu Ming      * @param username Yong Hu Ming      * @return Cha Zhao Dao De Yong Hu Dui Xiang      */",
N,/**     * Tu Pian Shang Chuan      * @param request     * @param pictureFile     * @return     * @throws IOException     */,
N,/**     * Yan Zheng Wen Jian Shi Fou Cun Zai      * @param strFolder     * @return     */,
N,/**     * Huo Qu Mu Lu Xia De Suo You Wen Jian      * @param path     * @return     */,
N,/**     * Shang Chuan Wen Jian Shi Gen Ju Wen Jian Liu Sheng Cheng Ha Xi Ma Yong Zuo Quan Ju Wei Yi Wen Jian Ming      * @param in     * @return     */,
N,/**     * Fa Song You Jian De Fang Fa      *     * @param to   You Jian De Jie Shou Fang      * @param code You Jian De Ji Huo Ma      */,
N,/**     * Fa Song Zhao Hui Mi Ma You Jian De Fang Fa      *     * @param to   You Jian De Jie Shou Fang      * @param code You Jian De Yan Zheng Ma      */,
N,/**     * Chuang Jian Yi Feng Zhi Bao Han Wen Ben De Jian Dan You Jian      *     * @param session     He Fu Wu Qi Jiao Hu De Hui Hua      * @param sendMail    Fa Jian Ren You Xiang      * @param receiveMail Shou Jian Ren You Xiang      * @return     * @throws Exception     */,
N,/** * She Zhi Mei Ye Ji Lu Shu Liang   * @param rowsPerPage the rowsPerPage to set */,
N,/** * Bao Cun Yi Ge Shi Ti Dui Xiang  * @return Cha Ru Ji Lu De id(id=-1Biao Shi Cha Ru Shi Bai ) */,
N,/** * Bao Cun Yi Xi Lie Shi Ti Dui Xiang  * @param list Han You Xu Yao Bao Cun De Shi Ti Dui Xiang De Ji He  * @return result */,
N,"/** * Cha Xun Zi Ding Yi Ji He ,Gen Ju hql(Yong Yu Duo Biao Cha Xun ) * @return list Zi Ding Yi Yuan Zu De Jie Guo Ji (list=nullShuo Ming Chu Cuo ) */",
N,"/** * Cha Xun Shi Ti Ji He ,Gen Ju hql(Yong Yu Dan Biao Cha Xun ) * @return list Bao Han Shi Ti Dui Xiang De Jie Guo Ji (list=nullShuo Ming Chu Cuo ) */",
N,"/** * Cha Xun Yi Tiao Ji Lu ,Gen Ju id * @param entityName Shi Ti Lei De Ming Zi  * @return obj Cha Xun De Jie Guo Shi Ti Dui Xiang (obj=nullBiao Shi Chu Cuo ) */",
N,"/** * Shan Chu Yi Tiao Ji Lu ,Gen Ju id * @param entityName Shi Ti Lei De Ming Zi  * @param id Xu Yao Shan Chu De Ji Lu De id */",
N,"/** * Xiu Gai Ji Lu ,Gen Ju hql * @param hql  * @return result */",
N,"/** * Chuang Jian Yi Ge Xiang Mu  * Zhu Yi :ProjectEntitySuo You Zi Duan (Chu Liao state, id),Du Bu Neng Wei Kong ! * @param entity * @return */",
N,/** * Huo Qu Suo You Xiang Mu (Suo You Xiang Qing ) * @param project_id (project_id=0Biao Shi Huo Qu Suo You Xiang Mu ) * @return Fan Hui nullBiao Shi Fa Sheng Cuo Wu  */,
N,"/** * Xiu Gai Yi Ge Xiang Mu  * Zhu Yi :ProjectEntitySuo You Zi Duan (Chu Liao state),Du Bu Neng Wei Kong ! * @param entity * @return */",
N,/** * Shan Chu Yi Ge Xiang Mu  * @param project_id * @return */,
N,/** * Huo Qu Suo You /Zhi Ding Yong Hu Chu Ban Wu Lie Biao (user_id=0Biao Shi Huo Qu Quan Bu ) * @param user_id * @return */,
N,/** * Xiu Gai Zhi Ding De Chu Ban Wu  * Zhu :PublicationEntityDui Xiang Zhong Suo You Yuan Su Du Bu De Wei Kong !(Chu Liao state) * @param entity Han You Xiu Gai De Xin Xi He Yuan Ben De Xin Xi  * @return */,
N,/** * Shan Chu Zhi Ding De Chu Ban Wu  * @param publication_id * @return */,
N,/** * Chuang Jian Wo De Jian Li  * @param resumeEntity * @param expList * @param pubList * @return */,
N,/** * Huo Qu Zhi Ding Yong Hu De Jian Li Xiang Qing  * @param user_id * @return */,
N,/** * Xiu Gai Zhi Ding Yong Hu De Jian Li  * @param resumeEntity * @param expList * @param pubList * @return */,
N,/** * Shan Chu Zhi Ding Yong Hu De Jian Li  * @param user_id * @param resume_id * @return */,
N,"/** * Chuang Jian Wo De Jian Li  * @param entity Chu Liao state, idZi Duan ,Qi Ta Suo You Zi Duan Du Bu Neng Wei Kong ! * @return */",
N,/** * Huo Qu Suo You /Wo De Jian Li Lie Biao  * @param user_id Dang user_id=0Biao Shi Huo Qu Suo You Jian Li  * @return Fan Hui nullBiao Shi Zhi Xing Chu Cuo  */,
N,/** * Huo Qu Zhi Ding Yong Hu De Jian Li Xiang Qing  * @param user_id * @return */,
N,/** * Xiu Gai Zhi Ding Yong Hu De Jian Li  * @param resumeEntity * @param expList * @param pubList * @return */,
N,/** * Shan Chu Zhi Ding Yong Hu De Jian Li  * @param user_id * @return */,
N,/** * Jiang Ju Ti De Cao Zuo Feng Zhuang Zai Yi Ge Shi Wu Li  */,
N,/** * Zhu Ce  * @param entity * @return */,
N,/** Zhu Ce Shi Bai Yuan Yin  */,
N,/** * Deng Lu  * @param entity  * @return Fan Hui nullBiao Shi Chu Cuo !Cuo Wu Yuan Yin Xie Zai reasonZhong  */,
N,/** * Zhu Ce  * @param entity  * @return Fan Hui nullBiao Shi Chu Cuo !Cuo Wu Yuan Yin Xie Zai reasonZhong  */,
N,"/** * Wen Ti 1:Shi Yong mergeJin Xing Geng Xin Reng Ran Shi insertEr Bu Shi update * Wen Ti 2:Dang Yong Hu Shan Diao Yi Tiao Xiang Mu Jing Yan Huo Zhu Zuo Hou ,Jian Shao De Na Tiao Reng Ran Cun Zai  */",
N,"/** * Wen Ti 1:Shi Yong mergeJin Xing Geng Xin Reng Ran Shi insertEr Bu Shi update * Wen Ti 2:Dang Yong Hu Shan Diao Yi Tiao Xiang Mu Jing Yan Huo Zhu Zuo Hou ,Jian Shao De Na Tiao Reng Ran Cun Zai  */",
N,"/**     * Chu Li Mei Yi Tiao Ji Lu      * <b>Ye Wu Chu Li Fang Fa </b><br/>     * Ru Guo Zi Lei Fu Gai Liao getDataList()Fang Fa ,<br/>     * Ze Ci Fang Fa Shi Dui dataListDe Dan Ge Yuan Su Jin Xing Chu Li ,<br/>     * Dui Yu dataListDe Bian Li Shi Zai StepServiceLi Jin Xing De ,Mei Ge Yuan Su Dan Du Diao Qi Yi Ge Xian Cheng Jin Xing Chu Li ;     * Tong Shi Bing Fa De Zui Da Xian Cheng Shu Ke Zai Biao BATCH_STEPLi Pei Zhi <br/>     * Ruo Bu Fu Gai dataList,StepServiceShi Zhi Jie Diao Qi Ci Fang Fa <br/>     * Ruo dataList.sizeDa Yu 1,Ze Ci Fang Fa Shi Bing Fa De      *     * @param index     Biao Shi dataZai objectLi De Xia Biao ,Dai Biao Zhe Tiao Ji Lu Zai Wen Jian De Di Ji Xing  ,Cong 1Kai Shi      * @param data Wei getDataList()Fang Fa Fan Hui De Lie Biao Li De Yi Ge Ju Ti Shu Ju ,Li Ru Shi Wen Jian Li De Yi Tiao Ji Lu      * @param object    Wei getObjectList()Fang Fa Fan Hui De Lie Biao De Yi Ge Ju Ti Dui Xiang ,Bu Neng Zai Ci Fang Fa Nei Xiu Gai objectDe Ren He Shu Xing      */",
